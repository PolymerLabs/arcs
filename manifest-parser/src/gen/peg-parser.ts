// tslint:disable:no-any
// tslint:disable: only-arrow-functions
// tslint:disable: max-line-length
// tslint:disable: trailing-comma
// tslint:disable: interface-name
// tslint:disable: switch-default
// tslint:disable: object-literal-shorthand

// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )
//
// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs


// DO NOT EDIT, AUTOGENERATED from src/runtime/manifest-parser.pegjs
import * as AstNode from '../manifest-ast-nodes.js';
import {Flags} from '../../../build/runtime/flags.js';
//import {CheckType} from '../../runtime/check.js';
//import {ClaimType} from '../../runtime/claim.js';

export enum ClaimType {
  IsTag = 'is-tag',
  DerivesFrom = 'derives-from',
}

export enum CheckType {
  HasTag = 'has-tag',
  IsFromHandle = 'is-from-handle',
  IsFromOutput = 'is-from-output',
  IsFromStore = 'is-from-store',
  Implication = 'implication',
}

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<{}> = {};

  const peg$startRuleFunctions: {[id: string]: any} = { Manifest: peg$parseManifest };
  let peg$startRuleFunction: () => any = peg$parseManifest;

  const peg$c0 = function(items: any): any {
      const result: AstNode.ManifestItem[] = items.map(item => {
        const annotations = item[0];
        const manifestItem = item[2];
        manifestItem.annotationRefs = annotations.annotationRefs;
        return manifestItem;
      });
      checkNormal(result);
      return result;
    };
  const peg$c1 = function(annotationRefs: any): any {
      return toAstNode<AstNode.Annotation>({
        kind: 'annotation',
        annotationRefs: annotationRefs.map(aRef => aRef[1]),
      });
    };
  const peg$c2 = "resource";
  const peg$c3 = peg$literalExpectation("resource", false);
  const peg$c4 = function(name: any, body: any): any {
    return toAstNode<AstNode.Resource>({
      kind: 'resource',
      name,
      data: body
    });
  };
  const peg$c5 = "start";
  const peg$c6 = peg$literalExpectation("start", false);
  const peg$c7 = function(): any { startIndent = indent; };
  const peg$c8 = function(lines: any): any {
    return lines.map(line => line[0].substring(startIndent.length) + line[1]).join('');
  };
  const peg$c9 = /^[^\n]/;
  const peg$c10 = peg$classExpectation(["\n"], true, false);
  const peg$c11 = function(): any { return text(); };
  const peg$c12 = "store";
  const peg$c13 = peg$literalExpectation("store", false);
  const peg$c14 = "of";
  const peg$c15 = peg$literalExpectation("of", false);
  const peg$c16 = "!!";
  const peg$c17 = peg$literalExpectation("!!", false);
  const peg$c18 = function(name: any, type: any, id: any, originalId: any, version: any, tags: any, source: any, items: any): any {
      items = optional(items, extractIndented, []);
      let description: string | null = null;
      const claims: AstNode.ManifestStorageClaim[] = [];

      for (const item of items) {
        if (item[0] === 'description') {
          if (description) {
            error('You cannot provide more than one description.');
          }
          description = item[2];
        } else if (item['kind'] === 'manifest-storage-claim') {
          claims.push(item);
        } else {
          error(`Unknown ManifestStorageItem: ${item}`);
        }
      }

      return toAstNode<AstNode.ManifestStorage>({
        kind: 'store',
        name,
        type,
        id: optional(id, id => id[1], null),
        originalId: optional(originalId, originalId => originalId[1], null),
        version: optional(version, version => version[1], null),
        tags: optional(tags, tags => tags[1], null),
        source: source.source,
        origin: source.origin,
        storageKey: source.storageKey || null,
        entities: source.entities || null,
        description,
        claims,
      });
    };
  const peg$c19 = "in";
  const peg$c20 = peg$literalExpectation("in", false);
  const peg$c21 = function(source: any): any { return toAstNode<AstNode.ManifestStorageFileSource>({kind: 'manifest-storage-source', origin: 'file', source }); };
  const peg$c22 = "at";
  const peg$c23 = peg$literalExpectation("at", false);
  const peg$c24 = function(source: any, storageKey: any): any {
      return toAstNode<AstNode.ManifestStorageResourceSource>({
        kind: 'manifest-storage-source',
        origin: 'resource',
        source,
        storageKey: optional(storageKey, sk => sk[3], null)
      });
    };
  const peg$c25 = function(source: any): any { return toAstNode<AstNode.ManifestStorageStorageSource>({kind: 'manifest-storage-source', origin: 'storage', source }); };
  const peg$c26 = "with";
  const peg$c27 = peg$literalExpectation("with", false);
  const peg$c28 = "{";
  const peg$c29 = peg$literalExpectation("{", false);
  const peg$c30 = ",";
  const peg$c31 = peg$literalExpectation(",", false);
  const peg$c32 = "}";
  const peg$c33 = peg$literalExpectation("}", false);
  const peg$c34 = function(parts: any, end: any): any {
      return toAstNode<AstNode.ManifestStorageInlineSource>({
        kind: 'manifest-storage-source',
        origin: 'inline',
        source: 'inline',
        entities: combineMultiLine(parts, end)
      });
    };
  const peg$c35 = function(parts: any, end: any): any {
      return toAstNode<AstNode.ManifestStorageInlineEntity>({
        kind: 'entity-inline',
        fields: Object.assign({}, ...combineMultiLine(parts, end))
      });
    };
  const peg$c36 = ":";
  const peg$c37 = peg$literalExpectation(":", false);
  const peg$c38 = function(name: any, value: any): any {
      return {[name]: value};
    };
  const peg$c39 = function(value: any): any {
      return {kind: 'entity-value', value};
    };
  const peg$c40 = "[";
  const peg$c41 = peg$literalExpectation("[", false);
  const peg$c42 = "]";
  const peg$c43 = peg$literalExpectation("]", false);
  const peg$c44 = function(parts: any, end: any): any {
      const value = combineMultiLine(parts, end);
      if (value.length > 1) {
        const typeFor = v => v.constructor.name === 'Uint8Array' ? 'bytes' : typeof(v);
        const firstType = typeFor(value[0]);
        if (value.some(item => typeFor(item) !== firstType)) {
          error('Collection fields for inline entities must have a consistent value type');
        }
      }
      return {kind: 'entity-collection', value};
    };
  const peg$c45 = "(";
  const peg$c46 = peg$literalExpectation("(", false);
  const peg$c47 = ")";
  const peg$c48 = peg$literalExpectation(")", false);
  const peg$c49 = function(parts: any, end: any): any {
      return {kind: 'entity-tuple', value: combineMultiLine(parts, end)};
    };
  const peg$c50 = "-";
  const peg$c51 = peg$literalExpectation("-", false);
  const peg$c52 = /^[0-9]/;
  const peg$c53 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c54 = ".";
  const peg$c55 = peg$literalExpectation(".", false);
  const peg$c56 = function(): any {
      return Number(text());
    };
  const peg$c57 = "n";
  const peg$c58 = peg$literalExpectation("n", false);
  const peg$c59 = function(): any {
      return BigInt(text());
    };
  const peg$c60 = "true";
  const peg$c61 = peg$literalExpectation("true", true);
  const peg$c62 = "false";
  const peg$c63 = peg$literalExpectation("false", true);
  const peg$c64 = function(bool: any): any {
      return bool.toLowerCase() === 'true';
    };
  const peg$c65 = "|";
  const peg$c66 = peg$literalExpectation("|", false);
  const peg$c67 = function(parts: any, end: any): any {
      return new Uint8Array(combineMultiLine(parts, end));
    };
  const peg$c68 = "<";
  const peg$c69 = peg$literalExpectation("<", false);
  const peg$c70 = ">";
  const peg$c71 = peg$literalExpectation(">", false);
  const peg$c72 = function(id: any, entityStorageKey: any): any {
      if (id.length === 0 || entityStorageKey.length === 0) {
        error('Reference fields for inline entities must have both an id and a storage key');
      }
      return {id, entityStorageKey};
    };
  const peg$c73 = /^[0-9a-f]/i;
  const peg$c74 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);
  const peg$c75 = function(): any {
      return Number('0x' + text());
    };
  const peg$c76 = "description";
  const peg$c77 = peg$literalExpectation("description", false);
  const peg$c78 = "claim";
  const peg$c79 = peg$literalExpectation("claim", false);
  const peg$c80 = "field";
  const peg$c81 = peg$literalExpectation("field", false);
  const peg$c82 = "is";
  const peg$c83 = peg$literalExpectation("is", false);
  const peg$c84 = "and";
  const peg$c85 = peg$literalExpectation("and", false);
  const peg$c86 = function(field: any, tag: any, rest: any): any {
      const fieldPath = field ? field[2].split('.') : [];
      return toAstNode<AstNode.ManifestStorageClaim>({
        kind: 'manifest-storage-claim',
        fieldPath,
        tags: [tag, ...rest.map(item => item[5])],
      });
    };
  const peg$c87 = "import";
  const peg$c88 = peg$literalExpectation("import", false);
  const peg$c89 = function(path: any): any {
      return toAstNode<AstNode.Import>({
        kind: 'import',
        path,
      });
    };
  const peg$c90 = peg$otherExpectation("an interface");
  const peg$c91 = "interface";
  const peg$c92 = peg$literalExpectation("interface", false);
  const peg$c93 = function(name: any, typeVars: any, items: any): any {
      return toAstNode<AstNode.Interface>({
        kind: 'interface',
        name,
        args: optional(items, extractIndented, []).filter(item => item.kind === 'interface-argument'),
        slots: optional(items, extractIndented, []).filter(item => item.kind === 'interface-slot'),
      });
    };
  const peg$c94 = "?";
  const peg$c95 = peg$literalExpectation("?", false);
  const peg$c96 = function(name: any, direction: any, isOptional: any, type: any): any { return buildInterfaceArgument(name, direction || 'any', isOptional, optional(type, t => t[1], null)); };
  const peg$c97 = function(direction: any, isOptional: any, type: any): any { return buildInterfaceArgument(null, direction || 'any', isOptional, optional(type, t => t[1], null)); };
  const peg$c98 = function(isOptional: any, type: any): any { return buildInterfaceArgument(null, 'any', isOptional, type); };
  const peg$c99 = "meta";
  const peg$c100 = peg$literalExpectation("meta", false);
  const peg$c101 = function(items: any): any {
    items = items ? extractIndented(items): [];
    return toAstNode<AstNode.Meta>({kind: 'meta', items: items});
  };
  const peg$c102 = "name";
  const peg$c103 = peg$literalExpectation("name", false);
  const peg$c104 = function(name: any): any {
    return toAstNode<AstNode.MetaName>({ key: 'name', value: name, kind: 'name' });
  };
  const peg$c105 = "storageKey";
  const peg$c106 = peg$literalExpectation("storageKey", false);
  const peg$c107 = function(key: any): any {
    return toAstNode<AstNode.MetaStorageKey>({key: 'storageKey', value: key, kind: 'storage-key' });
  };
  const peg$c108 = "namespace";
  const peg$c109 = peg$literalExpectation("namespace", false);
  const peg$c110 = function(namespace: any): any {
    return toAstNode<AstNode.MetaNamespace>({key: 'namespace', value: namespace, kind: 'namespace' });
  };
  const peg$c111 = "external";
  const peg$c112 = peg$literalExpectation("external", false);
  const peg$c113 = "particle";
  const peg$c114 = peg$literalExpectation("particle", false);
  const peg$c115 = function(external: any, name: any, verbs: any, implFile: any, items: any): any {
      const args: AstNode.ParticleHandleConnection[] = [];
      const modality: string[] = [];
      const slotConnections: AstNode.RecipeParticleSlotConnection[] = [];
      const trustClaims: AstNode.ClaimStatement[] = [];
      const trustChecks: AstNode.CheckStatement[] = [];
      let description: AstNode.Description | null = null;
      let hasParticleHandleConnection = false;
      verbs = optional(verbs, parsedOutput => parsedOutput[1], []);
      external = !!external;
      implFile = optional(implFile, implFile => implFile[3], null);
      if (external && implFile) {
        error('Particles marked external cannot have an implementation file.');
      }
      items = optional(items, extractIndented, []);
      items.forEach(item => {
        if (item.kind === 'particle-interface') {
          if (/[A-Z]/.test(item.verb[0]) && item.verb !== name) {
            error(`Verb ${item.verb} must start with a lower case character or be same as particle name.`);
          }
          verbs.push(item.verb);
          args.push(...item.args);
          hasParticleHandleConnection = true;
        } else if (item.kind === 'particle-argument') {
          args.push(item);
        } else if (item.kind === 'particle-slot') {
          slotConnections.push(item);
        } else if (item.kind === 'description') {
          description = {
            kind: 'description',
            location: location() // TODO: FIXME Get the locations of the item descriptions.
          } as AstNode.Description;
          item.description.forEach(d => description[d.name] = d.pattern || d.patterns[0]);
        } else if (item.kind === 'claim') {
          trustClaims.push(item);
        } else if (item.kind === 'check') {
          trustChecks.push(item);
        } else if (item.modality) {
          modality.push(item.modality);
        } else {
          error(`Particle ${name} contains an unknown element: ${item.name} / ${item.kind}`);
        }
      });
      if (modality.length === 0) {
        // Add default modality
        modality.push('dom');
      }

      return  toAstNode<AstNode.Particle>({
        kind: 'particle',
        name,
        external,
        implFile,
        verbs,
        args,
        modality,
        slotConnections,
        description,
        hasParticleHandleConnection,
        trustClaims,
        trustChecks,
      });
    };
  const peg$c116 = peg$otherExpectation("a particle item");
  const peg$c117 = function(target: any, expression: any): any {
      const targetParts = target.split('.');
      const handle = targetParts[0];
      const fieldPath = targetParts.slice(1);
      return toAstNode<AstNode.ClaimStatement>({
        kind: 'claim',
        handle,
        fieldPath,
        expression,
      });
    };
  const peg$c118 = function(first: any, rest: any): any {
      return [first, ...rest.map(item => item[3])] as AstNode.ClaimExpression;
    };
  const peg$c119 = "not";
  const peg$c120 = peg$literalExpectation("not", false);
  const peg$c121 = function(not: any, tag: any): any {
      return toAstNode<AstNode.ClaimIsTag>({
        kind: 'claim-is-tag',
        claimType: ClaimType.IsTag,
        isNot: not != null,
        tag,
      });
    };
  const peg$c122 = "derives from";
  const peg$c123 = peg$literalExpectation("derives from", false);
  const peg$c124 = function(target: any): any {
      const targetParts = target.split('.');
      const handle = targetParts[0];
      const fieldPath = targetParts.slice(1);
      return toAstNode<AstNode.ClaimDerivesFrom>({
        kind: 'claim-derives-from',
        claimType: ClaimType.DerivesFrom,
        parentHandle: handle,
        fieldPath,
      });
    };
  const peg$c125 = "check";
  const peg$c126 = peg$literalExpectation("check", false);
  const peg$c127 = function(target: any, expression: any): any {
      return toAstNode<AstNode.CheckStatement>({
        kind: 'check',
        target,
        expression,
      });
    };
  const peg$c128 = "data";
  const peg$c129 = peg$literalExpectation("data", false);
  const peg$c130 = function(target: any, isSlot: any): any {
      const targetParts = target.split('.');
      const name = targetParts[0];
      const fieldPath = targetParts.slice(1);
      if (isSlot && fieldPath.length) {
        error('Checks on slots cannot specify a field');
      }
      return toAstNode<AstNode.CheckTarget>({
        kind: 'check-target',
        targetType: isSlot ? 'slot' : 'handle',
        name,
        fieldPath,
      });
    };
  const peg$c131 = "or";
  const peg$c132 = peg$literalExpectation("or", false);
  const peg$c133 = function(left: any, rest: any): any {
      if (rest.length === 0) {
        return left;
      }
      const operators: Set<string> = new Set(rest.map(item => item[1]));
      if (operators.size > 1) {
        expected(`You cannot combine 'and' and 'or' operations in a single check expression. You must nest them inside parentheses.`);
      }
      const operator = rest[0][1];
      return toAstNode<AstNode.CheckBooleanExpression>({
        kind: 'check-boolean-expression',
        operator,
        children: [left, ...rest.map(item => item[3])],
      });
    };
  const peg$c134 = function(condition: any): any { return condition; };
  const peg$c135 = "=>";
  const peg$c136 = peg$literalExpectation("=>", false);
  const peg$c137 = function(antecedent: any, consequent: any): any {
      return toAstNode<AstNode.CheckImplication>({
        kind: 'check-implication',
        checkType: CheckType.Implication,
        antecedent,
        consequent,
      });
    };
  const peg$c138 = function(isNot: any, tag: any): any {
      return toAstNode<AstNode.CheckHasTag>({
        kind: 'check-has-tag',
        checkType: CheckType.HasTag,
        isNot: !!isNot,
        tag,
      });
    };
  const peg$c139 = "from";
  const peg$c140 = peg$literalExpectation("from", false);
  const peg$c141 = "handle";
  const peg$c142 = peg$literalExpectation("handle", false);
  const peg$c143 = function(isNot: any, parentHandle: any): any {
      return toAstNode<AstNode.CheckIsFromHandle>({
        kind: 'check-is-from-handle',
        checkType: CheckType.IsFromHandle,
        isNot: !!isNot,
        parentHandle,
      });
    };
  const peg$c144 = "output";
  const peg$c145 = peg$literalExpectation("output", false);
  const peg$c146 = function(isNot: any, output: any): any {
      return toAstNode<AstNode.CheckIsFromOutput>({
        kind: 'check-is-from-output',
        checkType: CheckType.IsFromOutput,
        isNot: !!isNot,
        output,
      });
    };
  const peg$c147 = function(isNot: any, storeRef: any): any {
      return toAstNode<AstNode.CheckIsFromStore>({
        kind: 'check-is-from-store',
        checkType: CheckType.IsFromStore,
        isNot: !!isNot,
        storeRef,
      });
    };
  const peg$c148 = function(name: any): any { return toAstNode<AstNode.StoreReference>({kind: 'store-reference', type: 'name', store: name}); };
  const peg$c149 = function(id: any): any { return toAstNode<AstNode.StoreReference>({kind: 'store-reference', type: 'id', store: id}); };
  const peg$c150 = function(arg: any, dependentConnections: any): any {
      arg.dependentConnections = optional(dependentConnections, extractIndented, []);
      return arg;
    };
  const peg$c151 = function(name: any): any {
      return name;
    };
  const peg$c152 = "=";
  const peg$c153 = peg$literalExpectation("=", false);
  const peg$c154 = function(name: any, direction: any, type: any, annotations: any, maybeTags: any, expression: any): any {
      return toAstNode<AstNode.ParticleHandleConnection>({
        kind: 'particle-argument',
        direction: optional(direction, d => d[0], 'any'),
        type,
        isOptional: optional(direction, d => !!d[1], false),
        dependentConnections: [],
        name: name || (maybeTags && maybeTags[0]) || expected(`either a name or tags to be supplied ${name} ${maybeTags}`),
        tags: maybeTags || [],
        annotations: annotations || [],
        expression: expression && expression[2]
      });
    };
  const peg$c155 = peg$otherExpectation("a direction (e.g. reads writes, reads, writes, hosts, `consumes, `provides, any')");
  const peg$c156 = "reads";
  const peg$c157 = peg$literalExpectation("reads", false);
  const peg$c158 = " writes";
  const peg$c159 = peg$literalExpectation(" writes", false);
  const peg$c160 = "writes";
  const peg$c161 = peg$literalExpectation("writes", false);
  const peg$c162 = "hosts";
  const peg$c163 = peg$literalExpectation("hosts", false);
  const peg$c164 = "`consumes";
  const peg$c165 = peg$literalExpectation("`consumes", false);
  const peg$c166 = "`provides";
  const peg$c167 = peg$literalExpectation("`provides", false);
  const peg$c168 = /^[^a-zA-Z0-9]/;
  const peg$c169 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], true, false);
  const peg$c170 = peg$anyExpectation();
  const peg$c171 = function(): any {
      // TODO(jopra): Parse optionality properly.
      let dir = text();
      if (dir === 'reads? writes') {
        // Fix for faking proper capability set support with optionality.
        dir = 'reads writes';
      }
      return dir as AstNode.Direction;
    };
  const peg$c172 = function(type: any, refinement: any): any {
      type.refinement = refinement;
      return type;
    };
  const peg$c173 = "![";
  const peg$c174 = peg$literalExpectation("![", false);
  const peg$c175 = function(type: any): any {
     return toAstNode<AstNode.SingletonType>({
       kind: 'singleton-type',
       type
     });
   };
  const peg$c176 = function(type: any): any {
      return toAstNode<AstNode.CollectionType>({
        kind: 'collection-type',
        type,
      });
    };
  const peg$c177 = "BigCollection<";
  const peg$c178 = peg$literalExpectation("BigCollection<", false);
  const peg$c179 = function(type: any): any {
      return toAstNode<AstNode.BigCollectionType>({
        kind: 'big-collection-type',
        type,
      });
    };
  const peg$c180 = "Reference<";
  const peg$c181 = peg$literalExpectation("Reference<", false);
  const peg$c182 = function(type: any): any {
      return toAstNode<AstNode.ReferenceType>({
        kind: 'reference-type',
        type,
      });
    };
  const peg$c183 = "&";
  const peg$c184 = peg$literalExpectation("&", false);
  const peg$c185 = "#";
  const peg$c186 = peg$literalExpectation("#", false);
  const peg$c187 = function(type: any): any {
      return toAstNode<AstNode.MuxType>({
        kind: 'mux-type',
        type,
      });
    };
  const peg$c188 = peg$otherExpectation("a tuple of types (e.g. (A, &B, [C]))");
  const peg$c189 = function(first: any, rest: any): any {
      return toAstNode<AstNode.TupleType>({
        kind: 'tuple-type',
        types: [first].concat(rest.map(t => t[3])),
      });
    };
  const peg$c190 = peg$otherExpectation("a type variable (e.g. ~foo)");
  const peg$c191 = "~";
  const peg$c192 = peg$literalExpectation("~", false);
  const peg$c193 = function(name: any, constraint: any): any {
      return toAstNode<AstNode.TypeVariable>({
        kind: 'variable-type',
        name,
        constraint: optional(constraint, constraint => constraint[3], null),
      });
    };
  const peg$c194 = "Slot";
  const peg$c195 = peg$literalExpectation("Slot", false);
  const peg$c196 = /^[^a-z0-9_]/i;
  const peg$c197 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], true, true);
  const peg$c198 = function(fields: any): any {
    fields = optional(fields, fields => {
      const data = fields[2];
      if (data) {
        return [data[0]].concat(data[1].map(tail => tail[2]));
      } else {
        return [];
      }
    }, []);

    // TODO(jopra): Check for duplicate field names.

    return toAstNode<AstNode.SlotType>({
      kind: 'slot-type',
      fields,
    });
  };
  const peg$c199 = function(name: any, value: any): any {
    return toAstNode<AstNode.SlotField>({
      kind: 'slot-field',
      name,
      value
    });
  };
  const peg$c200 = function(name: any): any {
      return toAstNode<AstNode.TypeName>({
        kind: 'type-name',
        name,
      });
    };
  const peg$c201 = function(head: any, tail: any): any {
      return [head, ...tail.map(a => a[2])];
    };
  const peg$c202 = "modality";
  const peg$c203 = peg$literalExpectation("modality", false);
  const peg$c204 = function(modality: any): any {
      return toAstNode<AstNode.ParticleModality>({
        kind: 'particle-modality',
        modality,
      });
    };
  const peg$c205 = function(type: any): any {
      let isSet = false;
      if (type.kind === 'collection-type') {
        isSet = true;
        type = type.type;
      }
      if (type.kind !== 'slot-type') {
        expected('a slot type');
      }
      type.isSet = isSet;
      return type;
    };
  const peg$c206 = "consumes";
  const peg$c207 = peg$literalExpectation("consumes", false);
  const peg$c208 = function(name: any, isOptional: any, type: any, maybeTags: any, items: any): any {
      const provideSlotConnections: AstNode.ParticleProvidedSlot[] = [];
      items = optional(items, extractIndented, []);
      items.forEach(item => {
        if (item.kind === 'provided-slot') {
          provideSlotConnections.push(item);
        } else {
          error('Unsupported particle slot item ', item);
        }
      });
      let formFactor: AstNode.SlotFormFactor|null = null;
      let isSet = false;
      if (type) {
        isSet = type.isSet;
        type.fields.forEach(({name, value}) => {
          if (name === 'formFactor') {
            if (!formFactor) {
              formFactor = value;
            } else {
              error('duplicate form factor for a slot');
            }
          } else {
            error(`unknown slot field named ${name} with value ${value}`);
          }
        });
      }

      return toAstNode<AstNode.ParticleSlotConnection>({
        kind: 'particle-slot',
        name,
        tags: maybeTags || [],
        isRequired: !isOptional,
        isSet,
        formFactor,
        provideSlotConnections
      });
    };
  const peg$c209 = "provides";
  const peg$c210 = peg$literalExpectation("provides", false);
  const peg$c211 = function(name: any, isOptional: any, type: any, maybeTags: any): any {
      const provideSlotConnections: AstNode.ParticleProvidedSlot[] = [];
      let formFactor: AstNode.SlotFormFactor|null = null;
      const handles: AstNode.ParticleProvidedSlotHandle[] = [];
      let isSet = false;
      if (type) {
        isSet = type.isSet;
        type.fields.forEach(({name, value}) => {
          if (name === 'formFactor') {
            if (!formFactor) {
              formFactor = value;
            } else {
              error('duplicate form factor for a slot');
            }
          } else if (name === 'handle') {
            handles.push(value);
          } else {
            error(`unknown slot field named ${name} with value ${value}`);
          }
        });
      }

      return toAstNode<AstNode.ParticleProvidedSlot>({
        kind: 'provided-slot',
        name,
        tags: maybeTags || [],
        isRequired: !isOptional,
        isSet,
        formFactor,
        handles
      });
    };
  const peg$c212 = function(pattern: any, handleDescriptions: any): any {
      handleDescriptions = optional(handleDescriptions, extractIndented, []);
      const patterns = [];
      if (pattern) {
        patterns.push(pattern);
      }
      handleDescriptions.filter(desc => desc.name === 'pattern').forEach(p => patterns.push(p));
      handleDescriptions = handleDescriptions.filter(desc => desc.name !== 'pattern');
      return {
        kind: 'description',
        location: location(),
        description: [
          {
            // TODO: this should be stored in a different field.
            // TODO: FIXME
            kind: 'default-description?',
            location: location(),
            name: 'pattern',
            patterns: patterns,
          },
          ...handleDescriptions,
        ],
      } as AstNode.Description;
    };
  const peg$c213 = function(name: any, pattern: any): any {
      return toAstNode<AstNode.ParticleHandleDescription>({
        kind: 'handle-description',
        name,
        pattern,
      });
    };
  const peg$c214 = "annotation";
  const peg$c215 = peg$literalExpectation("annotation", false);
  const peg$c216 = function(name: any, params: any, items: any): any {
      const targets = optional(items, extractIndented, []).find(item => item.kind === 'annotation-targets');
      const multiple = optional(items, extractIndented, []).find(item => item.kind === 'annotation-multiple');
      return toAstNode<AstNode.AnnotationNode>({
          kind: 'annotation-node',
          name,
          params: optional(params, params => [params[2], ...(params[3].map(item => item[3]))], []),
          targets: targets ? targets.targets : [],
          retention: optional(items, extractIndented, []).find(item => item.kind === 'annotation-retention').retention,
          allowMultiple: multiple ? multiple.allowMultiple : false,
          doc: optional(optional(items, extractIndented, []).find(item => item.kind === 'annotation-doc'), d => d.doc, '')
      });
    };
  const peg$c217 = function(name: any, type: any): any {
    return toAstNode<AstNode.AnnotationParam>({
      kind: 'annotation-param',
      name,
      type: type.type
    });
  };
  const peg$c218 = "Recipe";
  const peg$c219 = peg$literalExpectation("Recipe", false);
  const peg$c220 = "Particle";
  const peg$c221 = peg$literalExpectation("Particle", false);
  const peg$c222 = "HandleConnection";
  const peg$c223 = peg$literalExpectation("HandleConnection", false);
  const peg$c224 = "Store";
  const peg$c225 = peg$literalExpectation("Store", false);
  const peg$c226 = "Handle";
  const peg$c227 = peg$literalExpectation("Handle", false);
  const peg$c228 = "SchemaField";
  const peg$c229 = peg$literalExpectation("SchemaField", false);
  const peg$c230 = "Schema";
  const peg$c231 = peg$literalExpectation("Schema", false);
  const peg$c232 = "PolicyField";
  const peg$c233 = peg$literalExpectation("PolicyField", false);
  const peg$c234 = "PolicyTarget";
  const peg$c235 = peg$literalExpectation("PolicyTarget", false);
  const peg$c236 = "Policy";
  const peg$c237 = peg$literalExpectation("Policy", false);
  const peg$c238 = "targets:";
  const peg$c239 = peg$literalExpectation("targets:", false);
  const peg$c240 = function(targets: any): any {
    return toAstNode<AstNode.AnnotationTargets>({
      kind: 'annotation-targets',
      targets: optional(targets, t => [t[0], ...t[1].map(tail => tail[2])], [])
    });
  };
  const peg$c241 = "Source";
  const peg$c242 = peg$literalExpectation("Source", false);
  const peg$c243 = "Runtime";
  const peg$c244 = peg$literalExpectation("Runtime", false);
  const peg$c245 = "retention:";
  const peg$c246 = peg$literalExpectation("retention:", false);
  const peg$c247 = function(retention: any): any {
    return toAstNode<AstNode.AnnotationRetention>({
      kind: 'annotation-retention',
      retention
    });
  };
  const peg$c248 = "allowMultiple:";
  const peg$c249 = peg$literalExpectation("allowMultiple:", false);
  const peg$c250 = function(bool: any): any {
    return toAstNode<AstNode.AnnotationMultiple>({
      kind: 'annotation-multiple',
      allowMultiple: bool.toLowerCase() === 'true'
    });
  };
  const peg$c251 = "doc:";
  const peg$c252 = peg$literalExpectation("doc:", false);
  const peg$c253 = function(doc: any): any {
    return toAstNode<AstNode.AnnotationDoc>({
      kind: 'annotation-doc',
      doc
    });
  };
  const peg$c254 = "@";
  const peg$c255 = peg$literalExpectation("@", false);
  const peg$c256 = function(name: any, params: any): any {
    return toAstNode<AstNode.AnnotationRef>({
      kind: 'annotation-ref',
      name,
      params: optional(params, p => [p[3], ...p[5].map(tail => tail[3])], [])
    });
  };
  const peg$c257 = function(name: any, value: any): any {
    return toAstNode<AstNode.AnnotationRefNamedParam>({
      kind: 'annotation-named-param',
      name,
      value: value.value
    });
  };
  const peg$c258 = function(value: any): any {
    return toAstNode<AstNode.AnnotationRefSimpleParam>({
      kind: 'annotation-simple-param',
      value
    });
  };
  const peg$c259 = function(head: any, tail: any): any { return [head, ...(tail || [])]; };
  const peg$c260 = function(tags: any): any { return tags; };
  const peg$c261 = "recipe";
  const peg$c262 = peg$literalExpectation("recipe", false);
  const peg$c263 = function(name: any, verbs: any, items: any): any {
      verbs = optional(verbs, parsedOutput => parsedOutput[1], []);
      return toAstNode<AstNode.RecipeNode>({
        kind: 'recipe',
        name: optional(name, name => name[1], null),
        verbs,
        items: optional(items, extractIndented, []),
      });
    };
  const peg$c264 = "as";
  const peg$c265 = peg$literalExpectation("as", false);
  const peg$c266 = /^[a-zA-Z0-9]/;
  const peg$c267 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  const peg$c268 = function(): any { expected(`lower identifier`); };
  const peg$c269 = "*";
  const peg$c270 = peg$literalExpectation("*", false);
  const peg$c271 = function(ref: any, name: any, connections: any): any {
      const handleConnections: AstNode.RecipeParticleConnection[]  = [];
      const slotConnections: AstNode.RecipeParticleSlotConnection[] = [];
      if (connections) {
        connections = extractIndented(connections);
        for (const conn of connections) {
          if (conn.kind === 'handle-connection') {
            handleConnections.push(conn);
          } else {
            slotConnections.push(conn);
          }
        }
      }
      return toAstNode<AstNode.RecipeParticle>({
        kind: 'recipe-particle',
        name: optional(name, name => name[1], null),
        ref,
        connections: handleConnections,
        slotConnections: slotConnections,
      });
    };
  const peg$c272 = "someof";
  const peg$c273 = peg$literalExpectation("someof", false);
  const peg$c274 = function(param: any, direction: any, relaxed: any, target: any, dependentConnections: any): any {
      direction = optional(direction, d => d[0], null);
      target = optional(target, t => t, toAstNode<AstNode.ParticleConnectionTargetComponents>({
        kind: 'handle-connection-components',
        name: null,
        particle: null,
        tags: []
        }
      ));
      if (!Flags.useSlandles && (direction === 'consumes' || direction === 'provides')) {
        // RecipeParticleSlotConnection
        return toAstNode<AstNode.RecipeParticleSlotConnection>({
          kind: 'slot-connection',
          param: param || '*',
          direction,
          target,
          dependentSlotConnections: optional(dependentConnections, extractIndented, []),
        });
      }
      // RecipeParticleConnection
      return toAstNode<AstNode.RecipeParticleConnection>({
        kind: 'handle-connection',
        param: param || '*',
        direction,
        relaxed: !!relaxed,
        target,
        dependentConnections: optional(dependentConnections, extractIndented, []),
      });
    };
  const peg$c275 = function(param: any, relaxed: any, target: any, dependentConnections: any): any {
      return toAstNode<AstNode.RecipeParticleConnection>({
        kind: 'handle-connection',
        param: param || '*',
        direction: 'any',
        relaxed: !!relaxed,
        target,
        dependentConnections: optional(dependentConnections, extractIndented, []),
      });
    };
  const peg$c276 = peg$otherExpectation("a particle connection target");
  const peg$c277 = function(param: any, tags: any): any {
      param = optional(param, param => param, null);
      let name: string|null = null;
      let particle = null;
      if (param) {
        if (param[0].toUpperCase() === param[0]) {
          particle = param;
        } else {
          name = param;
        }
      }

      return toAstNode<AstNode.ParticleConnectionTargetComponents>({
        kind: 'handle-connection-components',
        name,
        particle,
        tags: optional(tags, t => t[1], []),
      });
    };
  const peg$c278 = function(tags: any): any {
      return toAstNode<AstNode.ParticleConnectionTargetComponents>({
        kind: 'handle-connection-components',
        name: null,
        particle: null,
        tags
      });
    };
  const peg$c279 = function(from: any, direction: any, relaxed: any, to: any): any {
      const anyTarget = toAstNode<AstNode.NameConnectionTarget>({
        kind: 'connection-target',
        targetType: 'localName',
        name: undefined,
        param: '*',
        tags: [],
      });
      return toAstNode<AstNode.RecipeConnection>({
        kind: 'connection',
        direction: optional(direction, d => d[0], 'any'),
        relaxed: !!relaxed,
        from: from || anyTarget,
        to,
      });
    };
  const peg$c280 = function(target: any): any {
      return target;
    };
  const peg$c281 = "search";
  const peg$c282 = peg$literalExpectation("search", false);
  const peg$c283 = "tokens";
  const peg$c284 = peg$literalExpectation("tokens", false);
  const peg$c285 = function(phrase: any, tokens: any): any {
      return toAstNode<AstNode.RecipeSearch>({
        kind: 'search',
        phrase,
        tokens: optional(tokens, tokens => tokens[1][2].map(t => t[1]), null)
      });
    };
  const peg$c286 = function(verbs: any, components: any): any {
      const {param, tags} = components || {param: null, tags: []};
      return toAstNode<AstNode.VerbConnectionTarget>({
        kind: 'connection-target',
        targetType: 'verb',
        verbs,
        param,
        tags
      });
    };
  const peg$c287 = function(tags: any): any {
      return toAstNode<AstNode.TagConnectionTarget>({
        kind: 'connection-target',
        targetType: 'tag',
        tags
      });
    };
  const peg$c288 = function(name: any, components: any): any {
      const {param, tags} = components || {param: null, tags: []};
      return toAstNode<AstNode.NameConnectionTarget>({
        kind: 'connection-target',
        targetType: 'localName',
        name,
        param,
        tags
      });
    };
  const peg$c289 = function(particle: any, components: any): any {
      const {param, tags} = components || {param: null, tags: []};
      return toAstNode<AstNode.ParticleConnectionTarget>({
        kind: 'connection-target',
        targetType: 'particle',
        particle,
        param,
        tags
      });
    };
  const peg$c290 = function(param: any, tags: any): any {
      return toAstNode<AstNode.ConnectionTargetHandleComponents>({
        kind: 'connection-target-handle-components',
        param: optional(param, param => param, null),
        tags: optional(tags, tags => tags[1], []),
      });
    };
  const peg$c291 = "use";
  const peg$c292 = peg$literalExpectation("use", false);
  const peg$c293 = "map";
  const peg$c294 = peg$literalExpectation("map", false);
  const peg$c295 = "create";
  const peg$c296 = peg$literalExpectation("create", false);
  const peg$c297 = "copy";
  const peg$c298 = peg$literalExpectation("copy", false);
  const peg$c299 = "`slot";
  const peg$c300 = peg$literalExpectation("`slot", false);
  const peg$c301 = function(name: any, fate: any, ref: any, annotations: any): any {
      return toAstNode<AstNode.RecipeHandle>({
        kind: 'handle',
        name,
        ref: optional(ref, ref => ref[1], emptyRef()) as AstNode.HandleRef,
        fate,
        annotations: annotations || []
      });
    };
  const peg$c302 = "join";
  const peg$c303 = peg$literalExpectation("join", false);
  const peg$c304 = function(name: any, first: any, rest: any): any {
      return toAstNode<AstNode.RecipeSyntheticHandle>({
        kind: 'synthetic-handle',
        name,
        associations: [first].concat(rest.map(t => t[3])),
      });
    };
  const peg$c305 = "require";
  const peg$c306 = peg$literalExpectation("require", false);
  const peg$c307 = function(items: any): any {
      return toAstNode<AstNode.RecipeRequire>({
        kind: 'require',
        items: extractIndented(items),
      });
    };
  const peg$c308 = function(name: any, ref: any): any {
      return toAstNode<AstNode.RequireHandleSection>({
        kind: 'require-handle',
        name: optional(name, name => name[1], null),
        ref: optional(ref, ref => ref[1], emptyRef()) as AstNode.HandleRef,
      });
    };
  const peg$c309 = function(tag: any): any {return tag;};
  const peg$c310 = function(head: any, tail: any): any { return [head, ...(tail && tail[1] || [])]; };
  const peg$c311 = peg$otherExpectation("a verb (e.g. &Verb)");
  const peg$c312 = function(verb: any): any {return verb;};
  const peg$c313 = function(name: any, tags: any): any {
       return toAstNode<AstNode.NameAndTagList>({
         kind: 'name-and-tag-list',
         name: name,
         tags: tags = optional(tags, list => list[1], [])
       });
     };
  const peg$c314 = function(name: any): any {
       // TODO(jopra): Likely covered by previous case.
       return toAstNode<AstNode.NameAndTagList>({
         kind: 'name-and-tag-list',
         name: name,
         tags: []
       });
     };
  const peg$c315 = function(tags: any): any {
        return toAstNode<AstNode.NameAndTagList>({
         kind: 'name-and-tag-list',
          name: tags[0],
          tags: tags
        });
     };
  const peg$c316 = function(name: any): any {
      return toAstNode<AstNode.ParticleRef>({
        kind: 'particle-ref',
        name,
        verbs: [],
        tags: []
      });
    };
  const peg$c317 = function(verb: any): any {
      return toAstNode<AstNode.ParticleRef>({
        kind: 'particle-ref',
        verbs: [verb],
        tags: []
      });
    };
  const peg$c318 = function(id: any, tags: any): any {
      return toAstNode<AstNode.HandleRef>({
        kind: 'handle-ref',
        id,
        tags: tags || [],
      });
    };
  const peg$c319 = function(name: any, tags: any): any {
      return toAstNode<AstNode.HandleRef>({
        kind: 'handle-ref',
        name,
        tags: tags || [],
      });
    };
  const peg$c320 = function(tags: any): any {
      return toAstNode<AstNode.HandleRef>({
        kind: 'handle-ref',
        tags: tags || [],
      });
    };
  const peg$c321 = function(tags: any): any {
      return toAstNode<AstNode.HandleRef>({
        kind: 'handle-ref',
        tags,
      });
    };
  const peg$c322 = "slot";
  const peg$c323 = peg$literalExpectation("slot", false);
  const peg$c324 = function(name: any, ref: any): any {
      return toAstNode<AstNode.RecipeSlot>({
        kind: 'slot',
        ref: optional(ref, ref => ref[1], emptyRef()) as AstNode.HandleRef,
        name,
      });
    };
  const peg$c325 = function(names: any, fields: any): any {
      return toAstNode<AstNode.SchemaInline>({
        kind: 'schema-inline',
        names: optional(names, names => names.map(name => name[0]).filter(name => name !== '*'), ['*']),
        fields: optional(fields, fields => [fields[0], ...fields[1].map(tail => tail[2])], [])
      });
    };
  const peg$c326 = function(name: any, type: any): any {
      if (type) {
        type = optional(type, ty => ty[2], null);
      }
      return toAstNode<AstNode.SchemaInlineField>({
        kind: 'schema-inline-field',
        name,
        type
      });
    };
  const peg$c327 = "schema";
  const peg$c328 = peg$literalExpectation("schema", false);
  const peg$c329 = function(names: any, parents: any): any {
      return toAstNode<AstNode.SchemaSpec>({
        kind: 'schema',
        names: names.map(name => name[1]).filter(name => name !== '*'),
        parents: optional(parents, parents => parents, []),
      });
    };
  const peg$c330 = "alias";
  const peg$c331 = peg$literalExpectation("alias", false);
  const peg$c332 = function(spec: any, alias: any, items: any): any {
      return toAstNode<AstNode.SchemaAlias>({
        ...spec,
        kind: 'schema',
        items: optional(items, extractIndented, []),
        alias
      });
    };
  const peg$c333 = function(spec: any, items: any): any {
      return toAstNode<AstNode.Schema>({
        ...spec,
        kind: 'schema',
        items: optional(items, extractIndented, [])
      });
    };
  const peg$c334 = "extends";
  const peg$c335 = peg$literalExpectation("extends", false);
  const peg$c336 = function(first: any, rest: any): any {
    return [first, ...(rest.map(item => item[3]))] as string[];
  };
  const peg$c337 = function(field: any): any {
      if (!field.type) {
        expected('a type (required for schema fields)');
      }
      field.kind = 'schema-field';
      return toAstNode<AstNode.SchemaField>(field);
    };
  const peg$c338 = /^[^\n\]}]/;
  const peg$c339 = peg$classExpectation(["\n", "]", "}"], true, false);
  const peg$c340 = function(): any { expected('a schema type'); };
  const peg$c341 = function(type: any, refinement: any, annotations: any): any {
      if (!Flags.fieldRefinementsAllowed && refinement) {
        error('field refinements are unsupported');
      }
      type.refinement = refinement;
      type.annotations = annotations || [];
      return type;
    };
  const peg$c342 = function(schema: any): any {
      return toAstNode<AstNode.SchemaCollectionType>({
        kind: 'schema-collection',
        schema,
        refinement: null
      });
    };
  const peg$c343 = "List<";
  const peg$c344 = peg$literalExpectation("List<", false);
  const peg$c345 = function(schema: any): any {
      return toAstNode<AstNode.SchemaOrderedListType>({
        kind: 'schema-ordered-list',
        schema
      });
    };
  const peg$c346 = function(schema: any): any {
      return toAstNode<AstNode.SchemaReferenceType>({
        kind: 'schema-reference',
        schema
      });
    };
  const peg$c347 = function(schema: any): any {
      return toAstNode<AstNode.SchemaReferenceType>({
        kind: 'schema-reference',
        schema,
        refinement: null
      });
    };
  const peg$c348 = "Text";
  const peg$c349 = peg$literalExpectation("Text", false);
  const peg$c350 = "URL";
  const peg$c351 = peg$literalExpectation("URL", false);
  const peg$c352 = "Number";
  const peg$c353 = peg$literalExpectation("Number", false);
  const peg$c354 = "BigInt";
  const peg$c355 = peg$literalExpectation("BigInt", false);
  const peg$c356 = "Boolean";
  const peg$c357 = peg$literalExpectation("Boolean", false);
  const peg$c358 = "Bytes";
  const peg$c359 = peg$literalExpectation("Bytes", false);
  const peg$c360 = function(type: any): any {
      return toAstNode<AstNode.SchemaPrimitiveType>({
        kind: 'schema-primitive',
        type,
        refinement: null,
        annotations: [],
      });
    };
  const peg$c361 = "inline";
  const peg$c362 = peg$literalExpectation("inline", false);
  const peg$c363 = function(schema: any): any {
      return toAstNode<AstNode.NestedSchema>({
        kind: 'schema-nested',
        schema
      });
    };
  const peg$c364 = peg$otherExpectation("Expression instantiating a new Arcs entity, e.g. new Foo {x: bar.x}");
  const peg$c365 = "new";
  const peg$c366 = peg$literalExpectation("new", false);
  const peg$c367 = function(names: any, fields: any): any {
       return toAstNode<AstNode.ExpressionEntity>({
          kind: 'expression-entity',
          names: optional(names, names => names.map(name => name[0]).filter(name => name !== '*'), ['*']),
          fields
       });
    };
  const peg$c368 = function(field: any, rest: any): any {
      return [field].concat(rest.map(rfield => rfield[2]));
    };
  const peg$c369 = function(fieldName: any, expression: any): any {
      return toAstNode<AstNode.ExpressionEntityField>({
          kind: 'expression-entity-field',
          name: fieldName,
          expression
      });
    };
  const peg$c370 = peg$otherExpectation("a dotted scope chain, starting at a root param, e.g. param.schemaFieldName.schemaFieldName");
  const peg$c371 = function(paramName: any, scopeChain: any): any {
      return toAstNode<AstNode.ExpressionScopeLookup>({
        kind: 'expression-scope-lookup',
        scopeChain: [paramName].concat(scopeChain.map(scope => scope[1]))
      });
    };
  const peg$c372 = "Byte";
  const peg$c373 = peg$literalExpectation("Byte", false);
  const peg$c374 = "Short";
  const peg$c375 = peg$literalExpectation("Short", false);
  const peg$c376 = "Int";
  const peg$c377 = peg$literalExpectation("Int", false);
  const peg$c378 = "Long";
  const peg$c379 = peg$literalExpectation("Long", false);
  const peg$c380 = "Char";
  const peg$c381 = peg$literalExpectation("Char", false);
  const peg$c382 = "Float";
  const peg$c383 = peg$literalExpectation("Float", false);
  const peg$c384 = "Double";
  const peg$c385 = peg$literalExpectation("Double", false);
  const peg$c386 = function(type: any): any {
      return toAstNode<AstNode.KotlinPrimitiveType>({
        kind: 'kotlin-primitive',
        type,
        refinement: null
      });
    };
  const peg$c387 = function(first: any, rest: any): any {
      const types = [first];
      for (const type of rest) {
        types.push(type[3]);
      }
      return toAstNode<AstNode.SchemaUnionType>({kind: 'schema-union', types, refinement: null, annotations: []});
    };
  const peg$c388 = function(first: any, rest: any): any {
      const types = [first];
      for (const type of rest) {
        types.push(type[3]);
      }
      return toAstNode<AstNode.SchemaTupleType>({kind: 'schema-tuple', types, refinement: null, annotations: []});
    };
  const peg$c389 = function(expression: any): any {
        return toAstNode<AstNode.RefinementNode>({kind: 'refinement', expression});
    };
  const peg$c390 = function(): any { expected("a valid refinement expression"); };
  const peg$c391 = function(leftExpr: any, tail: any): any {
      for (const part of tail) {
        const operator = part[1];
        const rightExpr = part[3];
        leftExpr = toAstNode<AstNode.BinaryExpressionNode>({kind: 'binary-expression-node', leftExpr, rightExpr, operator});
      }
      return leftExpr;
    };
  const peg$c392 = "==";
  const peg$c393 = peg$literalExpectation("==", false);
  const peg$c394 = "!=";
  const peg$c395 = peg$literalExpectation("!=", false);
  const peg$c396 = "<=";
  const peg$c397 = peg$literalExpectation("<=", false);
  const peg$c398 = ">=";
  const peg$c399 = peg$literalExpectation(">=", false);
  const peg$c400 = "+";
  const peg$c401 = peg$literalExpectation("+", false);
  const peg$c402 = "/";
  const peg$c403 = peg$literalExpectation("/", false);
  const peg$c404 = function(expr: any): any {
      return expr;
    };
  const peg$c405 = function(op: any, expr: any): any {
      const operator = op[0];
      return toAstNode<AstNode.UnaryExpressionNode>({kind: 'unary-expression-node', expr, operator});
    };
  const peg$c406 = function(bool: any): any {
      return toAstNode<AstNode.BooleanNode>({kind: 'boolean-node', value: bool.toLowerCase() === 'true'});
    };
  const peg$c407 = "now()";
  const peg$c408 = peg$literalExpectation("now()", false);
  const peg$c409 = "creationTimestamp";
  const peg$c410 = peg$literalExpectation("creationTimestamp", false);
  const peg$c411 = function(fn: any): any {
      return toAstNode<AstNode.BuiltInNode>({kind: 'built-in-node', value: fn});
    };
  const peg$c412 = function(fn: any): any {
      return toAstNode<AstNode.FieldNode>({kind: 'field-name-node', value: fn});
    };
  const peg$c413 = function(fn: any): any {
      // TODO(cypher1): Add support for named query arguments
      return toAstNode<AstNode.QueryNode>({kind: 'query-argument-node', value: fn});
    };
  const peg$c414 = "'";
  const peg$c415 = peg$literalExpectation("'", false);
  const peg$c416 = "\\'";
  const peg$c417 = peg$literalExpectation("\\'", false);
  const peg$c418 = /^[^'\n]/;
  const peg$c419 = peg$classExpectation(["'", "\n"], true, false);
  const peg$c420 = function(txt: any): any {
      const value = txt.join('')
        .replace('\\t', '\t')
        .replace('\\b', '\b')
        .replace('\\n', '\n')
        .replace('\\r', '\r')
        .replace('\\\'', '\'')
        .replace('\\"', '"')
        .replace('\\\\', '\\');
      return toAstNode<AstNode.TextNode>({kind: 'text-node', value});
    };
  const peg$c421 = function(name: any): any {
    // TODO: Support complex units like metres per second.
    return [name];
  };
  const peg$c422 = "day";
  const peg$c423 = peg$literalExpectation("day", false);
  const peg$c424 = "hour";
  const peg$c425 = peg$literalExpectation("hour", false);
  const peg$c426 = "minute";
  const peg$c427 = peg$literalExpectation("minute", false);
  const peg$c428 = "second";
  const peg$c429 = peg$literalExpectation("second", false);
  const peg$c430 = "millisecond";
  const peg$c431 = peg$literalExpectation("millisecond", false);
  const peg$c432 = "s";
  const peg$c433 = peg$literalExpectation("s", false);
  const peg$c434 = function(unit: any): any {
      return unit+'s';
    };
  const peg$c435 = function(neg: any, whole: any, decimal: any, units: any): any {
      const value = Number(`${neg || ''}${whole.join('')}.${decimal ? decimal[1].join('') : ''}`);
      return toAstNode<AstNode.NumberNode>({kind: 'number-node', value, units});
    };
  const peg$c436 = "i";
  const peg$c437 = peg$literalExpectation("i", false);
  const peg$c438 = "l";
  const peg$c439 = peg$literalExpectation("l", false);
  const peg$c440 = function(neg: any, val: any, typeIdentifier: any, units: any): any {
      const type = () => {
        switch (typeIdentifier) {
          case 'n': return AstNode.Primitive.BIGINT;
          case 'i': return AstNode.Primitive.INT;
          case 'l': return AstNode.Primitive.LONG;
        }
        throw new Error(`Unexpected type identifier ${typeIdentifier} (expected one of n, i or l)`);
      };
      const value = BigInt(`${neg || ''}${val.join('')}`);
      return toAstNode<AstNode.DiscreteNode>({kind: 'discrete-node', value, units, type: type()});
    };
  const peg$c441 = peg$otherExpectation("a version number (e.g. @012)");
  const peg$c442 = /^[^ ]/;
  const peg$c443 = peg$classExpectation([" "], true, false);
  const peg$c444 = function(version: any): any {
      return version.join('');
    };
  const peg$c445 = /^[a-z]/;
  const peg$c446 = peg$classExpectation([["a", "z"]], false, false);
  const peg$c447 = function(count: any, units: any): any {
      return toAstNode<AstNode.NumberedUnits>({
        kind: 'numbered-units',
        count: count.join(''),
        units
      });
    };
  const peg$c448 = "policy";
  const peg$c449 = peg$literalExpectation("policy", false);
  const peg$c450 = function(name: any, items: any): any {
      const targets: AstNode.PolicyTarget[] = [];
      const configs: AstNode.PolicyConfig[] = [];
      for (const item of extractCommaSeparated(items)) {
        switch (item.kind) {
          case 'policy-target':
            targets.push(item);
            break;
          case 'policy-config':
            configs.push(item);
            break;
          default:
            error(`Unknown PolicyItem: ${item}`);
        }
      }
      return toAstNode<AstNode.Policy>({
        kind: 'policy',
        name,
        targets,
        configs,
        annotationRefs: [], // This gets overridden by the Manifest rule.
      });
    };
  const peg$c451 = "access";
  const peg$c452 = peg$literalExpectation("access", false);
  const peg$c453 = function(annotationRefs: any, schemaName: any, fields: any): any {
      return toAstNode<AstNode.PolicyTarget>({
        kind: 'policy-target',
        schemaName,
        fields,
        annotationRefs: annotationRefs.map(item => item[0]),
      });
    };
  const peg$c454 = peg$otherExpectation("Set of policy fields enclosed in curly braces");
  const peg$c455 = function(fields: any): any {
      return extractCommaSeparated(fields);
    };
  const peg$c456 = function(annotationRefs: any, name: any, subfields: any): any {
      return toAstNode<AstNode.PolicyField>({
        kind: 'policy-field',
        name,
        subfields: subfields || [],
        annotationRefs: annotationRefs.map(item => item[0]),
      });
    };
  const peg$c457 = "config";
  const peg$c458 = peg$literalExpectation("config", false);
  const peg$c459 = function(name: any, items: any): any {
      const metadata: Map<string, string> = new Map();
      for (const [key, value] of extractCommaSeparated(items)) {
        if (metadata.has(key)) {
          error(`Duplicate key in policy config: ${key}.`);
        }
        metadata.set(key, value);
      }
      return toAstNode<AstNode.PolicyConfig>({
        kind: 'policy-config',
        name,
        metadata,
      });
    };
  const peg$c460 = function(key: any, value: any): any {
      return [key, value];
    };
  const peg$c461 = peg$otherExpectation("indentation");
  const peg$c462 = " ";
  const peg$c463 = peg$literalExpectation(" ", false);
  const peg$c464 = function(i: any): any {
    i = i.join('');
    if (i.length > indent.length) {
      indents.push(indent);
      indent = i;
      return true;
    }
    return false;
  };
  const peg$c465 = peg$otherExpectation("same indentation");
  const peg$c466 = function(i: any): any {
    i = i.join('');
    if (i.length === indent.length) {
      return true;
    } else if (i.length < indent.length) {
      indent = indents.pop();
      return false;
    }
    return false;
  };
  const peg$c467 = peg$otherExpectation("same or more indentation");
  const peg$c468 = function(i: any): any {
    i = i.join('');
    if (i.length >= indent.length) {
      return true;
    } else if (i.length < indent.length) {
      indent = indents.pop();
      return false;
    }
    return undefined;
  };
  const peg$c469 = /^[^a-zA-Z0-9_]/;
  const peg$c470 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], true, false);
  const peg$c471 = function(keyword: any): any {
    expected(`an upper case identifier`);
  };
  const peg$c472 = function(keyword: any): any {
    expected(`identifier`);
  };
  const peg$c473 = peg$otherExpectation("a 'quoted string'");
  const peg$c474 = /^[^\\']/;
  const peg$c475 = peg$classExpectation(["\\", "'"], true, false);
  const peg$c476 = "\\";
  const peg$c477 = peg$literalExpectation("\\", false);
  const peg$c478 = /^[^']/;
  const peg$c479 = peg$classExpectation(["'"], true, false);
  const peg$c480 = function(parts: any, end: any): any {
      parts = parts.map(([text, slash, char]) => {
        switch (char) {
          case 't': char = '\t'; break;
          case 'n': char = '\n'; break;
        }
        return text.join('') + char;
      });
      return parts.join('') + end.join('');
   };
  const peg$c481 = peg$otherExpectation("a `backquoted string`");
  const peg$c482 = "`";
  const peg$c483 = peg$literalExpectation("`", false);
  const peg$c484 = /^[^`]/;
  const peg$c485 = peg$classExpectation(["`"], true, false);
  const peg$c486 = function(pattern: any): any { return pattern.join(''); };
  const peg$c487 = peg$otherExpectation("an identifier (e.g. 'id')");
  const peg$c488 = function(id: any): any { expected('\' at the end of an identifier'); };
  const peg$c489 = function(id: any): any { return id.join(''); };
  const peg$c490 = peg$otherExpectation("an uppercase identifier (e.g. Foo)");
  const peg$c491 = /^[A-Z]/;
  const peg$c492 = peg$classExpectation([["A", "Z"]], false, false);
  const peg$c493 = /^[a-z0-9_]/i;
  const peg$c494 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], false, true);
  const peg$c495 = peg$otherExpectation("a lowercase identifier (e.g. foo)");
  const peg$c496 = peg$otherExpectation("a lowercase identifier or keyword");
  const peg$c497 = peg$otherExpectation("a field name (e.g. foo9)");
  const peg$c498 = peg$otherExpectation("a sequence of field names, descending into subfields (e.g. someField.someRef.someOtherField).");
  const peg$c499 = peg$otherExpectation("a name conforming to the rules of an android app name, per https://developer.android.com/guide/topics/manifest/manifest-element.html#package");
  const peg$c500 = peg$otherExpectation("a name starting with a letter and containing letters, digits and underscores");
  const peg$c501 = /^[a-zA-Z]/;
  const peg$c502 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  const peg$c503 = /^[a-zA-Z0-9_]/;
  const peg$c504 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  const peg$c505 = peg$otherExpectation("one or more whitespace characters");
  const peg$c506 = peg$otherExpectation("a 'plain' space (use whiteSpace instead)");
  const peg$c507 = "\xA0";
  const peg$c508 = peg$literalExpectation("\xA0", false);
  const peg$c509 = "\t";
  const peg$c510 = peg$literalExpectation("\t", false);
  const peg$c511 = "\f";
  const peg$c512 = peg$literalExpectation("\f", false);
  const peg$c513 = "\r";
  const peg$c514 = peg$literalExpectation("\r", false);
  const peg$c515 = "\x0B";
  const peg$c516 = peg$literalExpectation("\x0B", false);
  const peg$c517 = function(): any {expected('space');};
  const peg$c518 = peg$otherExpectation("a group of new lines (and optionally comments)");
  const peg$c519 = "//";
  const peg$c520 = peg$literalExpectation("//", false);
  const peg$c521 = peg$otherExpectation("optional whitespace including newlines and comments");
  const peg$c522 = peg$otherExpectation("a new line");
  const peg$c523 = "\n";
  const peg$c524 = peg$literalExpectation("\n", false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseManifest(): AstNode.Manifest {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseeolWhiteSpace();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIndent();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseAnnotation();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseSameIndent();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseManifestItem();
            if (s7 !== peg$FAILED) {
              s5 = [s5, s6, s7];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseAnnotation();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseSameIndent();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseManifestItem();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestItem(): AstNode.ManifestItem {
    let s0;

    s0 = peg$parseRecipeNode();
    if (s0 === peg$FAILED) {
      s0 = peg$parseParticle();
      if (s0 === peg$FAILED) {
        s0 = peg$parseImport();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSchema();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSchemaAlias();
            if (s0 === peg$FAILED) {
              s0 = peg$parseManifestStorage();
              if (s0 === peg$FAILED) {
                s0 = peg$parseInterface();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseMeta();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseResource();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseAnnotationNode();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsePolicy();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAnnotation(): AstNode.Annotation {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseSameIndent();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseAnnotationRef();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseeolWhiteSpace();
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseSameIndent();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseAnnotationRef();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseeolWhiteSpace();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c1(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseResource(): AstNode.Resource {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseupperIdent();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIndent();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseSameIndent();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseResourceStart();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseResourceBody();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseeolWhiteSpace();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c4(s3, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseResourceStart(): AstNode.ResourceStart {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeol();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c7();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseResourceBody(): AstNode.ResourceBody {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseSameOrMoreIndent();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseResourceLine();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseSameOrMoreIndent();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseResourceLine();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c8(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseResourceLine(): AstNode.ResourceLine {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c9.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$c9.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeol();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorage(): AstNode.ManifestStorage {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseupperIdent();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c14) {
              s5 = peg$c14;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhiteSpace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseManifestStorageType();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parsewhiteSpace();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseid();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c16) {
                      s10 = peg$c16;
                      peg$currPos += 2;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c17); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseid();
                      if (s11 !== peg$FAILED) {
                        s10 = [s10, s11];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$currPos;
                      s11 = peg$parsewhiteSpace();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseVersion();
                        if (s12 !== peg$FAILED) {
                          s11 = [s11, s12];
                          s10 = s11;
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$currPos;
                        s12 = peg$parsewhiteSpace();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parseTagList();
                          if (s13 !== peg$FAILED) {
                            s12 = [s12, s13];
                            s11 = s12;
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 === peg$FAILED) {
                          s11 = null;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsewhiteSpace();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parseManifestStorageSource();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parseeolWhiteSpace();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$currPos;
                                s16 = peg$parseIndent();
                                if (s16 !== peg$FAILED) {
                                  s17 = [];
                                  s18 = peg$currPos;
                                  s19 = peg$parseSameIndent();
                                  if (s19 !== peg$FAILED) {
                                    s20 = peg$parseManifestStorageItem();
                                    if (s20 !== peg$FAILED) {
                                      s19 = [s19, s20];
                                      s18 = s19;
                                    } else {
                                      peg$currPos = s18;
                                      s18 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s18;
                                    s18 = peg$FAILED;
                                  }
                                  if (s18 !== peg$FAILED) {
                                    while (s18 !== peg$FAILED) {
                                      s17.push(s18);
                                      s18 = peg$currPos;
                                      s19 = peg$parseSameIndent();
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parseManifestStorageItem();
                                        if (s20 !== peg$FAILED) {
                                          s19 = [s19, s20];
                                          s18 = s19;
                                        } else {
                                          peg$currPos = s18;
                                          s18 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                    }
                                  } else {
                                    s17 = peg$FAILED;
                                  }
                                  if (s17 !== peg$FAILED) {
                                    s16 = [s16, s17];
                                    s15 = s16;
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                                if (s15 === peg$FAILED) {
                                  s15 = null;
                                }
                                if (s15 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c18(s3, s7, s8, s9, s10, s11, s13, s15);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageType(): AstNode.ManifestStorageType {
    let s0;

    s0 = peg$parseSchemaInline();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSingletonType();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCollectionType();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBigCollectionType();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTypeName();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseManifestStorageSource(): AstNode.ManifestStorageSource {
    let s0;

    s0 = peg$parseManifestStorageFileSource();
    if (s0 === peg$FAILED) {
      s0 = peg$parseManifestStorageResourceSource();
      if (s0 === peg$FAILED) {
        s0 = peg$parseManifestStorageStorageSource();
        if (s0 === peg$FAILED) {
          s0 = peg$parseManifestStorageInlineSource();
        }
      }
    }

    return s0;
  }

  function peg$parseManifestStorageFileSource(): AstNode.ManifestStorageFileSource {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseid();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageResourceSource(): AstNode.ManifestStorageResourceSource {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseupperIdent();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsewhiteSpace();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c22) {
              s6 = peg$c22;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsewhiteSpace();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseid();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageStorageSource(): AstNode.ManifestStorageStorageSource {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseid();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageInlineSource(): AstNode.ManifestStorageInlineSource {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemultiLineSpace();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c28;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsemultiLineSpace();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parseManifestStorageInlineEntity();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsewhiteSpace();
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c30;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsemultiLineSpace();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parseManifestStorageInlineEntity();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsewhiteSpace();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s9 = peg$c30;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsemultiLineSpace();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseManifestStorageInlineEntity();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsemultiLineSpace();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c32;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c33); }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c34(s5, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageInlineEntity(): AstNode.ManifestStorageInlineEntity {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c28;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemultiLineSpace();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseManifestStorageInlineEntityField();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c30;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsemultiLineSpace();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseManifestStorageInlineEntityField();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c30;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsemultiLineSpace();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseManifestStorageInlineEntityField();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemultiLineSpace();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s6 = peg$c32;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageInlineEntityField(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefieldName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsemultiLineSpace();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseManifestStorageInlineValue();
            if (s5 === peg$FAILED) {
              s5 = peg$parseManifestStorageInlineCollection();
              if (s5 === peg$FAILED) {
                s5 = peg$parseManifestStorageInlineTuple();
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c38(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageInlineValue(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseManifestStorageInlineData();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c39(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseManifestStorageInlineCollection(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemultiLineSpace();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseManifestStorageInlineData();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c30;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsemultiLineSpace();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseManifestStorageInlineData();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c30;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsemultiLineSpace();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseManifestStorageInlineData();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemultiLineSpace();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c42;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c44(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageInlineTuple(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemultiLineSpace();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseManifestStorageInlineData();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c30;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsemultiLineSpace();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseManifestStorageInlineData();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c30;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsemultiLineSpace();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseManifestStorageInlineData();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemultiLineSpace();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c47;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c48); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c49(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageInlineData(): AstNode.ManifestStorageInlineData {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$parseQuotedString();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c50;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c52.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c52.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c54;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c52.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c52.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c53); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c56();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c50;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c52.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c53); }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s4 = peg$c54;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              if (peg$c52.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c53); }
              }
              if (s6 !== peg$FAILED) {
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  if (peg$c52.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c53); }
                  }
                }
              } else {
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 110) {
                s4 = peg$c57;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c58); }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c59();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c60) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c61); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c62) {
              s1 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c63); }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c64(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 124) {
              s1 = peg$c65;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c66); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsemultiLineSpace();
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$parseHexByte();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsewhiteSpace();
                  if (s6 === peg$FAILED) {
                    s6 = null;
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s7 = peg$c30;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c31); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsemultiLineSpace();
                      if (s8 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  s5 = peg$parseHexByte();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsewhiteSpace();
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s7 = peg$c30;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c31); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parsemultiLineSpace();
                        if (s8 !== peg$FAILED) {
                          s5 = [s5, s6, s7, s8];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseHexByte();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsemultiLineSpace();
                    if (s5 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 124) {
                        s6 = peg$c65;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c66); }
                      }
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c67(s3, s4);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 60) {
                s1 = peg$c68;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c69); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsemultiLineSpace();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseQuotedString();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsewhiteSpace();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c30;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c31); }
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parsemultiLineSpace();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parseQuotedString();
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parsemultiLineSpace();
                            if (s8 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 62) {
                                s9 = peg$c70;
                                peg$currPos++;
                              } else {
                                s9 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c71); }
                              }
                              if (s9 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c72(s3, s7);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseHexByte(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (peg$c73.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c73.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c74); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c75();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageItem(): any {
    let s0;

    s0 = peg$parseManifestStorageDescription();
    if (s0 === peg$FAILED) {
      s0 = peg$parseManifestStorageClaim();
    }

    return s0;
  }

  function peg$parseManifestStorageDescription(): AstNode.ManifestStorageDescription {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c76) {
      s1 = peg$c76;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebackquotedString();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManifestStorageClaim(): AstNode.ManifestStorageClaim {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c78) {
      s1 = peg$c78;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c80) {
          s4 = peg$c80;
          peg$currPos += 5;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsewhiteSpace();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsedottedFields();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsewhiteSpace();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c82) {
            s4 = peg$c82;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 !== peg$FAILED) {
              s6 = peg$parselowerIdent();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                s9 = peg$parsewhiteSpace();
                if (s9 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c84) {
                    s10 = peg$c84;
                    peg$currPos += 3;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c85); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsewhiteSpace();
                    if (s11 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c82) {
                        s12 = peg$c82;
                        peg$currPos += 2;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c83); }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsewhiteSpace();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parselowerIdent();
                          if (s14 !== peg$FAILED) {
                            s9 = [s9, s10, s11, s12, s13, s14];
                            s8 = s9;
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$parsewhiteSpace();
                  if (s9 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c84) {
                      s10 = peg$c84;
                      peg$currPos += 3;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c85); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsewhiteSpace();
                      if (s11 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c82) {
                          s12 = peg$c82;
                          peg$currPos += 2;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c83); }
                        }
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parsewhiteSpace();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parselowerIdent();
                            if (s14 !== peg$FAILED) {
                              s9 = [s9, s10, s11, s12, s13, s14];
                              s8 = s9;
                            } else {
                              peg$currPos = s8;
                              s8 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s8;
                            s8 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseeolWhiteSpace();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c86(s3, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImport(): AstNode.Import {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c87) {
      s1 = peg$c87;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c88); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseid();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c89(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterface(): AstNode.Interface {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c91) {
      s1 = peg$c91;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c92); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseupperIdent();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsewhiteSpace();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 60) {
              s6 = peg$c68;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c69); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsewhiteSpace();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseTypeVariableList();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsewhiteSpace();
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                      s10 = peg$c70;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c71); }
                    }
                    if (s10 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8, s9, s10];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseeolWhiteSpace();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseIndent();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$currPos;
                s10 = peg$parseSameIndent();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseInterfaceArgument();
                  if (s11 !== peg$FAILED) {
                    s10 = [s10, s11];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$currPos;
                  s10 = peg$parseSameIndent();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseInterfaceArgument();
                    if (s11 !== peg$FAILED) {
                      s10 = [s10, s11];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseeolWhiteSpace();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c93(s3, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }

    return s0;
  }

  function peg$parseInterfaceArgument(): AstNode.InterfaceArgument {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseNameWithColon();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDirection();
      if (s2 === peg$FAILED) {
        s2 = peg$parseSlotDirection();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s3 = peg$c94;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsewhiteSpace();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseParticleHandleConnectionType();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseeolWhiteSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c96(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDirection();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSlotDirection();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s2 = peg$c94;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseParticleHandleConnectionType();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeolWhiteSpace();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c97(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 63) {
          s1 = peg$c94;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsewhiteSpace();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseParticleHandleConnectionType();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseeolWhiteSpace();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c98(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseMeta(): AstNode.Meta {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeolWhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseIndent();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseSameIndent();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseMetaItem();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseSameIndent();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseMetaItem();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c101(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMetaItem(): AstNode.MetaItem {
    let s0;

    s0 = peg$parseMetaStorageKey();
    if (s0 === peg$FAILED) {
      s0 = peg$parseMetaName();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMetaNamespace();
      }
    }

    return s0;
  }

  function peg$parseMetaName(): AstNode.MetaName {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c102) {
      s1 = peg$c102;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseid();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseeolWhiteSpace();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c104(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMetaStorageKey(): AstNode.MetaStorageKey {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c105) {
      s1 = peg$c105;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseid();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseeolWhiteSpace();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c107(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMetaNamespace(): AstNode.MetaNamespace {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c108) {
      s1 = peg$c108;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedottedName();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseeolWhiteSpace();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c110(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParticle(): AstNode.Particle {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c111) {
      s2 = peg$c111;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c112); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c113) {
        s2 = peg$c113;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseupperIdent();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parsewhiteSpace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseVerbList();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsewhiteSpace();
              if (s7 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c19) {
                  s8 = peg$c19;
                  peg$currPos += 2;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsewhiteSpace();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseid();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseeolWhiteSpace();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parseIndent();
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$currPos;
                    s12 = peg$parseSameIndent();
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseParticleItem();
                      if (s13 !== peg$FAILED) {
                        s12 = [s12, s13];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$currPos;
                      s12 = peg$parseSameIndent();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parseParticleItem();
                        if (s13 !== peg$FAILED) {
                          s12 = [s12, s13];
                          s11 = s12;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseeolWhiteSpace();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c115(s1, s4, s5, s6, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParticleItem(): AstNode.ParticleItem {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parseParticleModality();
    if (s0 === peg$FAILED) {
      s0 = peg$parseParticleSlotConnection();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDescription();
        if (s0 === peg$FAILED) {
          s0 = peg$parseParticleHandleConnection();
          if (s0 === peg$FAILED) {
            s0 = peg$parseClaimStatement();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCheckStatement();
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }

    return s0;
  }

  function peg$parseClaimStatement(): AstNode.ClaimStatement {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c78) {
      s1 = peg$c78;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedottedFields();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseClaimExpression();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseeolWhiteSpace();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c117(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClaimExpression(): AstNode.ClaimExpression {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseClaim();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhiteSpace();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c84) {
          s5 = peg$c84;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseClaim();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c84) {
            s5 = peg$c84;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseClaim();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c118(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClaim(): AstNode.Claim {
    let s0;

    s0 = peg$parseClaimIsTag();
    if (s0 === peg$FAILED) {
      s0 = peg$parseClaimDerivesFrom();
    }

    return s0;
  }

  function peg$parseClaimIsTag(): AstNode.ClaimIsTag {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c119) {
          s4 = peg$c119;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsewhiteSpace();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parselowerIdent();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c121(s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClaimDerivesFrom(): AstNode.ClaimDerivesFrom {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c122) {
      s1 = peg$c122;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c123); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedottedFields();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c124(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCheckStatement(): AstNode.CheckStatement {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c125) {
      s1 = peg$c125;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c126); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCheckTarget();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseCheckExpressionBody();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseeolWhiteSpace();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c127(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCheckTarget(): AstNode.CheckTarget {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsedottedFields();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c128) {
          s4 = peg$c128;
          peg$currPos += 4;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c130(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCheckExpressionBody(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseCheckExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhiteSpace();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c131) {
          s5 = peg$c131;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c132); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c84) {
            s5 = peg$c84;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseCheckExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c131) {
            s5 = peg$c131;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c132); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c84) {
              s5 = peg$c84;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseCheckExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c133(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCheckExpression(): AstNode.CheckExpression {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseCheckCondition();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c134(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c45;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhiteSpace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCheckExpressionBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhiteSpace();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c47;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c48); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c134(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCheckCondition(): AstNode.CheckCondition {
    let s0;

    s0 = peg$parseCheckImplication();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCheckIsFromHandle();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCheckIsFromStore();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCheckIsFromOutput();
          if (s0 === peg$FAILED) {
            s0 = peg$parseCheckHasTag();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseCheckImplication(): AstNode.CheckImplication {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCheckExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c135) {
              s5 = peg$c135;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c136); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhiteSpace();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCheckExpression();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsewhiteSpace();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s9 = peg$c47;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c137(s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCheckHasTag(): AstNode.CheckHasTag {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c119) {
          s4 = peg$c119;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsewhiteSpace();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parselowerIdent();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c138(s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCheckIsFromHandle(): AstNode.CheckIsFromHandle {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c119) {
          s4 = peg$c119;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c139) {
            s4 = peg$c139;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c140); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c141) {
                s6 = peg$c141;
                peg$currPos += 6;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c142); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsewhiteSpace();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parselowerIdent();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c143(s2, s8);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCheckIsFromOutput(): AstNode.CheckIsFromOutput {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c119) {
          s4 = peg$c119;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c139) {
            s4 = peg$c139;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c140); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c144) {
                s6 = peg$c144;
                peg$currPos += 6;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c145); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsewhiteSpace();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parselowerIdent();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c146(s2, s8);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCheckIsFromStore(): AstNode.CheckIsFromStore {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c119) {
          s4 = peg$c119;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c139) {
            s4 = peg$c139;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c140); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c12) {
                s6 = peg$c12;
                peg$currPos += 5;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsewhiteSpace();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseStoreReference();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c147(s2, s8);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStoreReference(): AstNode.StoreReference {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseupperIdent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c148(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseid();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c149(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseParticleHandleConnection(): AstNode.ParticleHandleConnection {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseParticleHandleConnectionBody();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeolWhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseIndent();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseSameIndent();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseParticleHandleConnection();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseSameIndent();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseParticleHandleConnection();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c150(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNameWithColon(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    s3 = peg$parseunsafeLowerIdent();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsewhiteSpace();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c36;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    peg$silentFails--;
    if (s2 !== peg$FAILED) {
      peg$currPos = s1;
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselowerIdent();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c36;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c151(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParticleHandleConnectionBody(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseNameWithColon();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDirection();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s4 = peg$c94;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseParticleHandleConnectionType();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSpaceAnnotationRefList();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseSpaceTagList();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 61) {
                  s8 = peg$c152;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c153); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsemultiLineSpace();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseExpressionEntity();
                    if (s10 !== peg$FAILED) {
                      s8 = [s8, s9, s10];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c154(s1, s2, s4, s5, s6, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDirection(): AstNode.Direction {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c156) {
      s2 = peg$c156;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c157); }
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 63) {
        s3 = peg$c94;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c158) {
          s4 = peg$c158;
          peg$currPos += 7;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c156) {
        s1 = peg$c156;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c160) {
          s1 = peg$c160;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c161); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c162) {
            s1 = peg$c162;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c163); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c164) {
              s1 = peg$c164;
              peg$currPos += 9;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c165); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c166) {
                s1 = peg$c166;
                peg$currPos += 9;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c167); }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (peg$c168.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c170); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c171();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c155); }
    }

    return s0;
  }

  function peg$parseParticleHandleConnectionType(): AstNode.ParticleHandleConnectionType {
    let s0, s1, s2, s3;

    s0 = peg$parseTypeVariable();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSingletonType();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCollectionType();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBigCollectionType();
          if (s0 === peg$FAILED) {
            s0 = peg$parseReferenceType();
            if (s0 === peg$FAILED) {
              s0 = peg$parseMuxType();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSlotType();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseTupleType();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseSchemaInline();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parsewhiteSpace();
                      if (s2 === peg$FAILED) {
                        s2 = null;
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseRefinement();
                        if (s3 === peg$FAILED) {
                          s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c172(s1, s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseTypeName();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSingletonType(): AstNode.SingletonType {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c173) {
      s1 = peg$c173;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c174); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseParticleHandleConnectionType();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c42;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c175(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCollectionType(): AstNode.CollectionType {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseParticleHandleConnectionType();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c42;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c176(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBigCollectionType(): AstNode.BigCollectionType {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c177) {
      s1 = peg$c177;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseParticleHandleConnectionType();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s3 = peg$c70;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c179(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReferenceType(): AstNode.ReferenceType {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c180) {
      s1 = peg$c180;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c181); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseParticleHandleConnectionType();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s3 = peg$c70;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c182(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c183;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseParticleHandleConnectionType();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c182(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMuxType(): AstNode.MuxType {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c185;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseParticleHandleConnectionType();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c187(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTupleType(): AstNode.TupleType {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemultiLineSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseParticleHandleConnectionType();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsemultiLineSpace();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c30;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsemultiLineSpace();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseParticleHandleConnectionType();
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsemultiLineSpace();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c30;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsemultiLineSpace();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseParticleHandleConnectionType();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemultiLineSpace();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c30;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsemultiLineSpace();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c47;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c189(s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c188); }
    }

    return s0;
  }

  function peg$parseTypeVariable(): AstNode.TypeVariable {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 126) {
      s1 = peg$c191;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c192); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselowerIdent();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c26) {
            s5 = peg$c26;
            peg$currPos += 4;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseParticleHandleConnectionType();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c193(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c190); }
    }

    return s0;
  }

  function peg$parseSlotType(): AstNode.SlotType {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c194) {
      s1 = peg$c194;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c195); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c170); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        if (peg$c196.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c197); }
        }
      }
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s5 = peg$c28;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            s7 = peg$parseSlotField();
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s10 = peg$c30;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parsewhiteSpace();
                if (s11 !== peg$FAILED) {
                  s12 = peg$parseSlotField();
                  if (s12 !== peg$FAILED) {
                    s10 = [s10, s11, s12];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s10 = peg$c30;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parsewhiteSpace();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parseSlotField();
                    if (s12 !== peg$FAILED) {
                      s10 = [s10, s11, s12];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s7 = peg$c32;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c198(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSlotField(): AstNode.SlotField {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefieldName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parselowerIdent();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c199(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeName(): AstNode.TypeName {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseupperIdent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c200(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTypeVariableList(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseTypeVariable();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c30;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemultiLineSpace();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseTypeVariable();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c30;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemultiLineSpace();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTypeVariable();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c201(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParticleModality(): AstNode.ParticleModality {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c202) {
      s1 = peg$c202;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c203); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefieldName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c204(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSlandleType(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsewhiteSpace();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseParticleHandleConnectionType();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c205(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParticleSlotConnection(): AstNode.ParticleSlotConnection {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseNameWithColon();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c206) {
        s2 = peg$c206;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s3 = peg$c94;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSlandleType();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSpaceTagList();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseeolWhiteSpace();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseIndent();
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$currPos;
                  s11 = peg$parseSameIndent();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parseParticleProvidedSlot();
                    if (s12 !== peg$FAILED) {
                      s11 = [s11, s12];
                      s10 = s11;
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$currPos;
                    s11 = peg$parseSameIndent();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseParticleProvidedSlot();
                      if (s12 !== peg$FAILED) {
                        s11 = [s11, s12];
                        s10 = s11;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c208(s1, s3, s4, s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParticleProvidedSlot(): AstNode.ParticleProvidedSlot {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseNameWithColon();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c209) {
        s2 = peg$c209;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c210); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s3 = peg$c94;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSlandleType();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSpaceTagList();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseeolWhiteSpace();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c211(s1, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDescription(): AstNode.Description {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c76) {
      s1 = peg$c76;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebackquotedString();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseIndent();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              s9 = peg$parseSameIndent();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseParticleHandleDescription();
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$parseSameIndent();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseParticleHandleDescription();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                }
              } else {
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c212(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParticleHandleDescription(): AstNode.ParticleHandleDescription {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parselowerIdent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebackquotedString();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c213(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnnotationNode(): AstNode.AnnotationNode {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c214) {
      s1 = peg$c214;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c215); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselowerIdent();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c45;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c46); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAnnotationParam();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$currPos;
                s10 = peg$parsewhiteSpace();
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                if (s10 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s11 = peg$c30;
                    peg$currPos++;
                  } else {
                    s11 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                  }
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parsewhiteSpace();
                    if (s12 === peg$FAILED) {
                      s12 = null;
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parseAnnotationParam();
                      if (s13 !== peg$FAILED) {
                        s10 = [s10, s11, s12, s13];
                        s9 = s10;
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$currPos;
                  s10 = peg$parsewhiteSpace();
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  if (s10 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s11 = peg$c30;
                      peg$currPos++;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c31); }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parsewhiteSpace();
                      if (s12 === peg$FAILED) {
                        s12 = null;
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parseAnnotationParam();
                        if (s13 !== peg$FAILED) {
                          s10 = [s10, s11, s12, s13];
                          s9 = s10;
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsewhiteSpace();
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s10 = peg$c47;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                    if (s10 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8, s9, s10];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseeolWhiteSpace();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseIndent();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$currPos;
                s10 = peg$parseSameIndent();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseAnnotationNodeItem();
                  if (s11 !== peg$FAILED) {
                    s10 = [s10, s11];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$currPos;
                  s10 = peg$parseSameIndent();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseAnnotationNodeItem();
                    if (s11 !== peg$FAILED) {
                      s10 = [s10, s11];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c216(s3, s4, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnnotationParam(): AstNode.AnnotationParam {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsefieldName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c36;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSchemaPrimitiveType();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c217(s1, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnnotationNodeItem(): any {
    let s0;

    s0 = peg$parseAnnotationTargets();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAnnotationRetention();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAnnotationMultiple();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAnnotationDoc();
        }
      }
    }

    return s0;
  }

  function peg$parseAnnotationTargetValue(): AstNode.AnnotationTargetValue {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c218) {
      s0 = peg$c218;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c219); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c220) {
        s0 = peg$c220;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c221); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c222) {
          s0 = peg$c222;
          peg$currPos += 16;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c223); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c224) {
            s0 = peg$c224;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c225); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c226) {
              s0 = peg$c226;
              peg$currPos += 6;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c227); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 11) === peg$c228) {
                s0 = peg$c228;
                peg$currPos += 11;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c229); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c230) {
                  s0 = peg$c230;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c231); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 11) === peg$c232) {
                    s0 = peg$c232;
                    peg$currPos += 11;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c233); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 12) === peg$c234) {
                      s0 = peg$c234;
                      peg$currPos += 12;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c235); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c236) {
                        s0 = peg$c236;
                        peg$currPos += 6;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c237); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAnnotationTargets(): AstNode.AnnotationTargets {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c238) {
      s1 = peg$c238;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c239); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s3 = peg$c40;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseAnnotationTargetValue();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s9 = peg$c30;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parsewhiteSpace();
                if (s10 === peg$FAILED) {
                  s10 = null;
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseAnnotationTargetValue();
                  if (s11 !== peg$FAILED) {
                    s9 = [s9, s10, s11];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c30;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsewhiteSpace();
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseAnnotationTargetValue();
                    if (s11 !== peg$FAILED) {
                      s9 = [s9, s10, s11];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsewhiteSpace();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s7 = peg$c42;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c43); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseeolWhiteSpace();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c240(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnnotationRetentionValue(): AstNode.AnnotationRetentionValue {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c241) {
      s0 = peg$c241;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c242); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c243) {
        s0 = peg$c243;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c244); }
      }
    }

    return s0;
  }

  function peg$parseAnnotationRetention(): AstNode.AnnotationRetention {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c245) {
      s1 = peg$c245;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c246); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseAnnotationRetentionValue();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c247(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnnotationMultiple(): AstNode.AnnotationMultiple {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c248) {
      s1 = peg$c248;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c249); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c60) {
          s3 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c62) {
            s3 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c250(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnnotationDoc(): AstNode.AnnotationDoc {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c251) {
      s1 = peg$c251;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c252); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseQuotedString();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c253(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnnotationRef(): AstNode.AnnotationRef {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c254;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c255); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselowerIdent();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c45;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c46); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAnnotationRefParam();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsewhiteSpace();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$currPos;
                  s11 = peg$parsewhiteSpace();
                  if (s11 === peg$FAILED) {
                    s11 = null;
                  }
                  if (s11 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s12 = peg$c30;
                      peg$currPos++;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c31); }
                    }
                    if (s12 !== peg$FAILED) {
                      s13 = peg$parsewhiteSpace();
                      if (s13 === peg$FAILED) {
                        s13 = null;
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parseAnnotationRefParam();
                        if (s14 !== peg$FAILED) {
                          s11 = [s11, s12, s13, s14];
                          s10 = s11;
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$currPos;
                    s11 = peg$parsewhiteSpace();
                    if (s11 === peg$FAILED) {
                      s11 = null;
                    }
                    if (s11 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s12 = peg$c30;
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c31); }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsewhiteSpace();
                        if (s13 === peg$FAILED) {
                          s13 = null;
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parseAnnotationRefParam();
                          if (s14 !== peg$FAILED) {
                            s11 = [s11, s12, s13, s14];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s10 = peg$c47;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                    if (s10 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7, s8, s9, s10];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c256(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnnotationRefParam(): AstNode.AnnotationRefParam {
    let s0;

    s0 = peg$parseAnnotationRefNamedParam();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAnnotationRefSimpleParam();
    }

    return s0;
  }

  function peg$parseAnnotationRefNamedParam(): AstNode.AnnotationRefNamedParam {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parselowerIdent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAnnotationRefSimpleParam();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c257(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnnotationRefSimpleParam(): AstNode.AnnotationRefSimpleParam {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseManifestStorageInlineData();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c258(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAnnotationRefList(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseAnnotationRef();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaceAnnotationRefList();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c259(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSpaceAnnotationRefList(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsewhiteSpace();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAnnotationRefList();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c260(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRecipeNode(): AstNode.RecipeNode {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c261) {
      s1 = peg$c261;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c262); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseupperIdent();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseVerbList();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseIndent();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              s9 = peg$parseSameIndent();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseRecipeItem();
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                s9 = peg$parseSameIndent();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseRecipeItem();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c263(s2, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRecipeItem(): AstNode.RecipeItem {
    let s0;

    s0 = peg$parseRecipeParticle();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRecipeHandle();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRecipeSyntheticHandle();
        if (s0 === peg$FAILED) {
          s0 = peg$parseRequireHandleSection();
          if (s0 === peg$FAILED) {
            s0 = peg$parseRecipeRequire();
            if (s0 === peg$FAILED) {
              s0 = peg$parseRecipeSlot();
              if (s0 === peg$FAILED) {
                s0 = peg$parseRecipeSearch();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseRecipeConnection();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseDescription();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLocalName(): AstNode.LocalName {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c264) {
      s1 = peg$c264;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c265); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselowerIdent();
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          if (peg$c266.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c267); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c266.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c267); }
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c268();
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c151(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTopLevelAlias(): AstNode.TopLevelAlias {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c264) {
      s1 = peg$c264;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c265); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseupperIdent();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c151(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRecipeParticle(): AstNode.RecipeParticle {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseParticleRef();
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c269;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c270); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseLocalName();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseeolWhiteSpace();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseIndent();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$parseSameIndent();
            if (s8 !== peg$FAILED) {
              s9 = peg$parseRecipeParticleConnection();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$parseSameIndent();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseRecipeParticleConnection();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c271(s1, s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRecipeParticleConnection(): AstNode.RecipeParticleConnection {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseNameWithColon();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseSlotDirection();
      if (s3 === peg$FAILED) {
        s3 = peg$parseDirection();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c272) {
          s4 = peg$c272;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c273); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsewhiteSpace();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseParticleConnectionTargetComponents();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseeolWhiteSpace();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parseIndent();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$currPos;
                s10 = peg$parseSameIndent();
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseRecipeParticleConnection();
                  if (s11 !== peg$FAILED) {
                    s10 = [s10, s11];
                    s9 = s10;
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$currPos;
                  s10 = peg$parseSameIndent();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseRecipeParticleConnection();
                    if (s11 !== peg$FAILED) {
                      s10 = [s10, s11];
                      s9 = s10;
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c274(s1, s2, s3, s4, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNameWithColon();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c272) {
          s3 = peg$c272;
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c273); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseParticleConnectionTargetComponents();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeolWhiteSpace();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseIndent();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                s9 = peg$parseSameIndent();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseRecipeParticleConnection();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$parseSameIndent();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseRecipeParticleConnection();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c275(s1, s2, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseParticleConnectionTargetComponents(): AstNode.ParticleConnectionTargetComponents {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseupperIdent();
    if (s1 === peg$FAILED) {
      s1 = peg$parselowerIdent();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseTagList();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c277(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTagList();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c278(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c276); }
    }

    return s0;
  }

  function peg$parseSlotDirection(): AstNode.SlotDirection {
    let s0;

    if (input.substr(peg$currPos, 8) === peg$c209) {
      s0 = peg$c209;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c210); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c206) {
        s0 = peg$c206;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c207); }
      }
    }

    return s0;
  }

  function peg$parseRecipeConnection(): AstNode.RecipeConnection {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseConnectionTargetWithColon();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseDirection();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c272) {
          s4 = peg$c272;
          peg$currPos += 6;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c273); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsewhiteSpace();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseConnectionTarget();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseeolWhiteSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c279(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConnectionTargetWithColon(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseConnectionTarget();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c36;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c280(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRecipeSearch(): AstNode.RecipeSearch {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c281) {
      s1 = peg$c281;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c282); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebackquotedString();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseIndent();
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              s8 = peg$parseSameIndent();
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c283) {
                  s9 = peg$c283;
                  peg$currPos += 6;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c284); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = [];
                  s11 = peg$currPos;
                  s12 = peg$parsewhiteSpace();
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parsebackquotedString();
                    if (s13 !== peg$FAILED) {
                      s12 = [s12, s13];
                      s11 = s12;
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                  if (s11 !== peg$FAILED) {
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$currPos;
                      s12 = peg$parsewhiteSpace();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parsebackquotedString();
                        if (s13 !== peg$FAILED) {
                          s12 = [s12, s13];
                          s11 = s12;
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    }
                  } else {
                    s10 = peg$FAILED;
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseeolWhiteSpace();
                    if (s11 !== peg$FAILED) {
                      s8 = [s8, s9, s10, s11];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c285(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConnectionTarget(): AstNode.ConnectionTarget {
    let s0;

    s0 = peg$parseVerbConnectionTarget();
    if (s0 === peg$FAILED) {
      s0 = peg$parseTagConnectionTarget();
      if (s0 === peg$FAILED) {
        s0 = peg$parseParticleConnectionTarget();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNameConnectionTarget();
        }
      }
    }

    return s0;
  }

  function peg$parseVerbConnectionTarget(): AstNode.VerbConnectionTarget {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseVerbList();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseConnectionTargetHandleComponents();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c286(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTagConnectionTarget(): AstNode.TagConnectionTarget {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTagList();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c287(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNameConnectionTarget(): AstNode.NameConnectionTarget {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parselowerIdent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseConnectionTargetHandleComponents();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c288(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParticleConnectionTarget(): AstNode.ParticleConnectionTarget {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseupperIdent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseConnectionTargetHandleComponents();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c289(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConnectionTargetHandleComponents(): AstNode.ConnectionTargetHandleComponents {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c54;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parselowerIdent();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTagList();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c290(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRecipeHandleFate(): AstNode.RecipeHandleFate {
    let s0;

    if (input.charCodeAt(peg$currPos) === 63) {
      s0 = peg$c94;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c291) {
        s0 = peg$c291;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c292); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c293) {
          s0 = peg$c293;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c294); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c295) {
            s0 = peg$c295;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c296); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c297) {
              s0 = peg$c297;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c298); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c299) {
                s0 = peg$c299;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c300); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseRecipeHandle(): AstNode.RecipeHandle {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseNameWithColon();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRecipeHandleFate();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHandleRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSpaceAnnotationRefList();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseeolWhiteSpace();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c301(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRecipeSyntheticHandle(): AstNode.RecipeSyntheticHandle {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseNameWithColon();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c302) {
        s2 = peg$c302;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c303); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c45;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c46); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parselowerIdent();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$currPos;
                s9 = peg$parsewhiteSpace();
                if (s9 === peg$FAILED) {
                  s9 = null;
                }
                if (s9 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s10 = peg$c30;
                    peg$currPos++;
                  } else {
                    s10 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                  }
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parsewhiteSpace();
                    if (s11 === peg$FAILED) {
                      s11 = null;
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parselowerIdent();
                      if (s12 !== peg$FAILED) {
                        s9 = [s9, s10, s11, s12];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$currPos;
                  s9 = peg$parsewhiteSpace();
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s10 = peg$c30;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c31); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parsewhiteSpace();
                      if (s11 === peg$FAILED) {
                        s11 = null;
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parselowerIdent();
                        if (s12 !== peg$FAILED) {
                          s9 = [s9, s10, s11, s12];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c47;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsewhiteSpace();
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseeolWhiteSpace();
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c304(s1, s6, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRecipeRequire(): AstNode.RecipeRequire {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c305) {
      s1 = peg$c305;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c306); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeolWhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseIndent();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseSameIndent();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseRecipeParticle();
            if (s8 === peg$FAILED) {
              s8 = peg$parseRequireHandleSection();
              if (s8 === peg$FAILED) {
                s8 = peg$parseRecipeSlot();
              }
            }
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseSameIndent();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseRecipeParticle();
              if (s8 === peg$FAILED) {
                s8 = peg$parseRequireHandleSection();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseRecipeSlot();
                }
              }
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c307(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRequireHandleSection(): AstNode.RequireHandleSection {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c141) {
      s1 = peg$c141;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c142); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseLocalName();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHandleRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c308(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTag(): AstNode.Tag {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c185;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesimpleName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c309(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTagList(): AstNode.TagList {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseTag();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseTagList();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c310(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVerb(): AstNode.Verb {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c183;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c184); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesimpleName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c312(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c311); }
    }

    return s0;
  }

  function peg$parseVerbList(): AstNode.VerbList {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseVerb();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseVerbList();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c310(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSpaceTagList(): AstNode.SpaceTagList {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsewhiteSpace();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTagList();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c260(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNameAndTagList(): AstNode.NameAndTagList {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parselowerIdent();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsewhiteSpace();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseTagList();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c313(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsewhiteSpace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parselowerIdent();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c314(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsewhiteSpace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTagList();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c315(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseParticleRef(): AstNode.ParticleRef {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseupperIdent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c316(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVerb();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c317(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseHandleRef(): AstNode.HandleRef {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSpaceTagList();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c318(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseupperIdent();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpaceTagList();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c319(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c269;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c270); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSpaceTagList();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c320(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTagList();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c321(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseRecipeSlot(): AstNode.RecipeSlot {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNameWithColon();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c322) {
        s2 = peg$c322;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c323); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHandleRef();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseeolWhiteSpace();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c324(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaInline(): AstNode.SchemaInline {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseupperIdent();
    if (s3 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s3 = peg$c269;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c270); }
      }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parsewhiteSpace();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseupperIdent();
      if (s3 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s3 = peg$c269;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c270); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c28;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemultiLineSpace();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseSchemaInlineField();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c30;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parsemultiLineSpace();
              if (s9 !== peg$FAILED) {
                s10 = peg$parseSchemaInlineField();
                if (s10 !== peg$FAILED) {
                  s8 = [s8, s9, s10];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c30;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsemultiLineSpace();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseSchemaInlineField();
                  if (s10 !== peg$FAILED) {
                    s8 = [s8, s9, s10];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c30;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsemultiLineSpace();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s7 = peg$c32;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c33); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c325(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaInlineField(): AstNode.SchemaInlineField {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefieldName();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c36;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSchemaType();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c326(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaSpec(): AstNode.SchemaSpec {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c327) {
      s1 = peg$c327;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c328); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhiteSpace();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s5 = peg$c269;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c270); }
        }
        if (s5 === peg$FAILED) {
          s5 = peg$parseupperIdent();
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsewhiteSpace();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s5 = peg$c269;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c270); }
            }
            if (s5 === peg$FAILED) {
              s5 = peg$parseupperIdent();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSchemaExtends();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c329(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaAlias(): AstNode.SchemaAlias {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c330) {
      s1 = peg$c330;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c331); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSchemaSpec();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTopLevelAlias();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseeolWhiteSpace();
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parseIndent();
                if (s8 !== peg$FAILED) {
                  s9 = [];
                  s10 = peg$currPos;
                  s11 = peg$parseSameIndent();
                  if (s11 !== peg$FAILED) {
                    s12 = peg$parseSchemaItem();
                    if (s12 !== peg$FAILED) {
                      s11 = [s11, s12];
                      s10 = s11;
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s10;
                    s10 = peg$FAILED;
                  }
                  while (s10 !== peg$FAILED) {
                    s9.push(s10);
                    s10 = peg$currPos;
                    s11 = peg$parseSameIndent();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseSchemaItem();
                      if (s12 !== peg$FAILED) {
                        s11 = [s11, s12];
                        s10 = s11;
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c332(s3, s5, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchema(): AstNode.Schema {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseSchemaSpec();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeolWhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseIndent();
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseSameIndent();
          if (s7 !== peg$FAILED) {
            s8 = peg$parseSchemaItem();
            if (s8 !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseSameIndent();
            if (s7 !== peg$FAILED) {
              s8 = peg$parseSchemaItem();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c333(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaExtends(): AstNode.SchemaExtends {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parsewhiteSpace();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c334) {
        s2 = peg$c334;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c335); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseupperIdent();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parsewhiteSpace();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c30;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parsewhiteSpace();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseupperIdent();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parsewhiteSpace();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c30;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsewhiteSpace();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseupperIdent();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c336(s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaItem(): AstNode.SchemaItem {
    let s0;

    s0 = peg$parseSchemaField();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDescription();
    }

    return s0;
  }

  function peg$parseSchemaField(): AstNode.SchemaField {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSchemaInlineField();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeolWhiteSpace();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c337(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaType(): AstNode.SchemaType {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseSchemaReferenceType();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSchemaCollectionType();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSchemaOrderedListType();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSchemaPrimitiveType();
          if (s1 === peg$FAILED) {
            s1 = peg$parseKotlinPrimitiveType();
            if (s1 === peg$FAILED) {
              s1 = peg$parseSchemaUnionType();
              if (s1 === peg$FAILED) {
                s1 = peg$parseSchemaTupleType();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseNestedSchemaType();
                  if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = [];
                    if (peg$c338.test(input.charAt(peg$currPos))) {
                      s3 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c339); }
                    }
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      if (peg$c338.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c339); }
                      }
                    }
                    if (s2 !== peg$FAILED) {
                      peg$savedPos = s1;
                      s2 = peg$c340();
                    }
                    s1 = s2;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRefinement();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAnnotationRefList();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c341(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaCollectionType(): AstNode.SchemaCollectionType {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSchemaType();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c42;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c342(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaOrderedListType(): AstNode.SchemaOrderedListType {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c343) {
      s1 = peg$c343;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c344); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSchemaType();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s5 = peg$c70;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c345(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaReferenceType(): AstNode.SchemaReferenceType {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c180) {
      s1 = peg$c180;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c181); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSchemaInline();
        if (s3 === peg$FAILED) {
          s3 = peg$parseTypeName();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s5 = peg$c70;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c346(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s1 = peg$c183;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhiteSpace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSchemaInline();
          if (s3 === peg$FAILED) {
            s3 = peg$parseTypeName();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhiteSpace();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c347(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSchemaPrimitiveType(): AstNode.SchemaPrimitiveType {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c348) {
      s1 = peg$c348;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c349); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c350) {
        s1 = peg$c350;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c351); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c352) {
          s1 = peg$c352;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c353); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c354) {
            s1 = peg$c354;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c355); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c356) {
              s1 = peg$c356;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c357); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c358) {
                s1 = peg$c358;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c359); }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c360(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNestedSchemaType(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c361) {
      s1 = peg$c361;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c362); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSchemaInline();
        if (s3 === peg$FAILED) {
          s3 = peg$parseTypeName();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c363(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpressionEntity(): AstNode.ExpressionEntity {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c365) {
      s1 = peg$c365;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c366); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseupperIdent();
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s5 = peg$c269;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c270); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseupperIdent();
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s5 = peg$c269;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c270); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s4 = peg$c28;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemultiLineSpace();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseExpressionEntityFields();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c30;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsemultiLineSpace();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s9 = peg$c32;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c33); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c367(s3, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c364); }
    }

    return s0;
  }

  function peg$parseExpressionEntityFields(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseExpressionEntityField();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s4 = peg$c30;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsemultiLineSpace();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseExpressionEntityField();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c30;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsemultiLineSpace();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseExpressionEntityField();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c368(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpressionEntityField(): AstNode.ExpressionEntityField {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefieldName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExpressionScopeLookup();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c369(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpressionScopeLookup(): AstNode.ExpressionScopeLookup {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsefieldName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c54;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parsefieldName();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c54;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefieldName();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c371(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c370); }
    }

    return s0;
  }

  function peg$parseKotlinPrimitiveType(): AstNode.KotlinPrimitiveType {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c372) {
      s1 = peg$c372;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c373); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c374) {
        s1 = peg$c374;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c375); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c376) {
          s1 = peg$c376;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c377); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c378) {
            s1 = peg$c378;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c379); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c380) {
              s1 = peg$c380;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c381); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c382) {
                s1 = peg$c382;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c383); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c384) {
                  s1 = peg$c384;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c385); }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c386(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSchemaUnionType(): AstNode.SchemaUnionType {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSchemaPrimitiveType();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsewhiteSpace();
          if (s6 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c131) {
              s7 = peg$c131;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c132); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsewhiteSpace();
              if (s8 !== peg$FAILED) {
                s9 = peg$parseSchemaPrimitiveType();
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parsewhiteSpace();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c131) {
                  s7 = peg$c131;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c132); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsewhiteSpace();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseSchemaPrimitiveType();
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c47;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c48); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c387(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSchemaTupleType(): AstNode.SchemaTupleType {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSchemaPrimitiveType();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$parsewhiteSpace();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c30;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsewhiteSpace();
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseSchemaPrimitiveType();
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c30;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsewhiteSpace();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseSchemaPrimitiveType();
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c47;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c48); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c388(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRefinement(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOrExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c42;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c389(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c40;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c390();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseOrExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAndExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhiteSpace();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c131) {
          s5 = peg$c131;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c132); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseAndExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c131) {
            s5 = peg$c131;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c132); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAndExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c391(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAndExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseEqualityExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhiteSpace();
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c84) {
          s5 = peg$c84;
          peg$currPos += 3;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c85); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseEqualityExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c84) {
            s5 = peg$c84;
            peg$currPos += 3;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseEqualityExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c391(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEqualityExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseComparisonExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhiteSpace();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c392) {
          s5 = peg$c392;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c393); }
        }
        if (s5 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c394) {
            s5 = peg$c394;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c395); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseComparisonExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c392) {
            s5 = peg$c392;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c393); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c394) {
              s5 = peg$c394;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c395); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseComparisonExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c391(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComparisonExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseAdditiveExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhiteSpace();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c396) {
          s5 = peg$c396;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c397); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s5 = peg$c68;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          if (s5 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c398) {
              s5 = peg$c398;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c399); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s5 = peg$c70;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c71); }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseAdditiveExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c396) {
            s5 = peg$c396;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c397); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 60) {
              s5 = peg$c68;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c69); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c398) {
                s5 = peg$c398;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c399); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s5 = peg$c70;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c71); }
                }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseAdditiveExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c391(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdditiveExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseMultiplicativeExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhiteSpace();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s5 = peg$c400;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c401); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c50;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c51); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseMultiplicativeExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s5 = peg$c400;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c401); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c50;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseMultiplicativeExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c391(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiplicativeExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePrimaryExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsewhiteSpace();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s5 = peg$c269;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c270); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c402;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c403); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewhiteSpace();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parsePrimaryExpression();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s5 = peg$c269;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c270); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s5 = peg$c402;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c403); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewhiteSpace();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsePrimaryExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c391(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePrimaryExpression(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOrExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c47;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c404(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c119) {
        s2 = peg$c119;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c50;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewhiteSpace();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePrimaryExpression();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c405(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseDiscreteValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNumberValue();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c60) {
              s1 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c61); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c62) {
                s1 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c63); }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c406(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c407) {
                s1 = peg$c407;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c408); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 17) === peg$c409) {
                  s1 = peg$c409;
                  peg$currPos += 17;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c410); }
                }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c411(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsefieldName();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c412(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 63) {
                    s1 = peg$c94;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c413(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 39) {
                      s1 = peg$c414;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c415); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = [];
                      if (input.substr(peg$currPos, 2) === peg$c416) {
                        s3 = peg$c416;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c417); }
                      }
                      if (s3 === peg$FAILED) {
                        if (peg$c418.test(input.charAt(peg$currPos))) {
                          s3 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c419); }
                        }
                      }
                      while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (input.substr(peg$currPos, 2) === peg$c416) {
                          s3 = peg$c416;
                          peg$currPos += 2;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c417); }
                        }
                        if (s3 === peg$FAILED) {
                          if (peg$c418.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c419); }
                          }
                        }
                      }
                      if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                          s3 = peg$c414;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c415); }
                        }
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c420(s2);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseUnits(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsewhiteSpace();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnitName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c421(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnitName(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c422) {
      s1 = peg$c422;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c423); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c424) {
        s1 = peg$c424;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c425); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c426) {
          s1 = peg$c426;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c427); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c428) {
            s1 = peg$c428;
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c429); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 11) === peg$c430) {
              s1 = peg$c430;
              peg$currPos += 11;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c431); }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 115) {
        s2 = peg$c432;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c433); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c434(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumberValue(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c50;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c54;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c52.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c53); }
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseUnits();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c435(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDiscreteValue(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c50;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c52.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 110) {
          s3 = peg$c57;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 105) {
            s3 = peg$c436;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c437); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 108) {
              s3 = peg$c438;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c439); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseUnits();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c440(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVersion(): AstNode.Version {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c254;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c255); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c442.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c443); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c442.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c443); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c444(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c441); }
    }

    return s0;
  }

  function peg$parseNumberedUnits(): AstNode.NumberedUnits {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c52.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c53); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c52.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (peg$c445.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c446); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c447(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePolicy(): AstNode.Policy {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c448) {
      s1 = peg$c448;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c449); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseupperIdent();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopenBrace();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parsePolicyItem();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              s9 = peg$parsecommaOrNewline();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsePolicyItem();
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                s9 = peg$parsecommaOrNewline();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsePolicyItem();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecloseBrace();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseeolWhiteSpace();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c450(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePolicyItem(): any {
    let s0;

    s0 = peg$parsePolicyTarget();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePolicyConfig();
    }

    return s0;
  }

  function peg$parsePolicyTarget(): AstNode.PolicyTarget {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseAnnotationRef();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsemultiLineSpace();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseAnnotationRef();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsemultiLineSpace();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c139) {
        s2 = peg$c139;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewhiteSpace();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseupperIdent();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsewhiteSpace();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c451) {
                s6 = peg$c451;
                peg$currPos += 6;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c452); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsePolicyFieldSet();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c453(s1, s4, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePolicyFieldSet(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseopenBrace();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsePolicyField();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parsecommaOrNewline();
        if (s6 !== peg$FAILED) {
          s7 = peg$parsePolicyField();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parsecommaOrNewline();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsePolicyField();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecloseBrace();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c455(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c454); }
    }

    return s0;
  }

  function peg$parsePolicyField(): AstNode.PolicyField {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseAnnotationRef();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsemultiLineSpace();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseAnnotationRef();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsemultiLineSpace();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefieldName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePolicyFieldSet();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c456(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePolicyConfig(): AstNode.PolicyConfig {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c457) {
      s1 = peg$c457;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c458); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopenBrace();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parsePolicyConfigKeyValuePair();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              s9 = peg$parsecommaOrNewline();
              if (s9 !== peg$FAILED) {
                s10 = peg$parsePolicyConfigKeyValuePair();
                if (s10 !== peg$FAILED) {
                  s9 = [s9, s10];
                  s8 = s9;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                s9 = peg$parsecommaOrNewline();
                if (s9 !== peg$FAILED) {
                  s10 = peg$parsePolicyConfigKeyValuePair();
                  if (s10 !== peg$FAILED) {
                    s9 = [s9, s10];
                    s8 = s9;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecloseBrace();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c459(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePolicyConfigKeyValuePair(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewhiteSpace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseQuotedString();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c460(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIndent(): AstNode.Indent {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    peg$silentFails++;
    s1 = peg$currPos;
    s2 = [];
    if (input.charCodeAt(peg$currPos) === 32) {
      s3 = peg$c462;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c463); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c462;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c463); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s3 = peg$c464(s2);
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    peg$silentFails--;
    if (s1 !== peg$FAILED) {
      peg$currPos = s0;
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c461); }
    }

    return s0;
  }

  function peg$parseSameIndent(): AstNode.SameIndent {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    s3 = [];
    if (input.charCodeAt(peg$currPos) === 32) {
      s4 = peg$c462;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c463); }
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      if (input.charCodeAt(peg$currPos) === 32) {
        s4 = peg$c462;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c463); }
      }
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s4 = peg$c466(s3);
      if (s4) {
        s4 = undefined;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    peg$silentFails--;
    if (s2 !== peg$FAILED) {
      peg$currPos = s1;
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c462;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c463); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c462;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c463); }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c465); }
    }

    return s0;
  }

  function peg$parseSameOrMoreIndent(): AstNode.SameOrMoreIndent {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    s3 = [];
    if (input.charCodeAt(peg$currPos) === 32) {
      s4 = peg$c462;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c463); }
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      if (input.charCodeAt(peg$currPos) === 32) {
        s4 = peg$c462;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c463); }
      }
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s4 = peg$c468(s3);
      if (s4) {
        s4 = undefined;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    peg$silentFails--;
    if (s2 !== peg$FAILED) {
      peg$currPos = s1;
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c462;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c463); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.charCodeAt(peg$currPos) === 32) {
          s3 = peg$c462;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c463); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c467); }
    }

    return s0;
  }

  function peg$parseUpperReservedWord(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseSchemaPrimitiveType();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (peg$c469.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c470); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c170); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s3 !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c471(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReservedWord(): AstNode.ReservedWord {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDirection();
    if (s1 === peg$FAILED) {
      s1 = peg$parseSlotDirection();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSchemaPrimitiveType();
        if (s1 === peg$FAILED) {
          s1 = peg$parseRecipeHandleFate();
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 8) === peg$c113) {
              s1 = peg$c113;
              peg$currPos += 8;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c114); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c261) {
                s1 = peg$c261;
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c262); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c87) {
                  s1 = peg$c87;
                  peg$currPos += 6;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c88); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c19) {
                    s1 = peg$c19;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c91) {
                      s1 = peg$c91;
                      peg$currPos += 9;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c92); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c327) {
                        s1 = peg$c327;
                        peg$currPos += 6;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c328); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c305) {
                          s1 = peg$c305;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c306); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 6) === peg$c141) {
                            s1 = peg$c141;
                            peg$currPos += 6;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c142); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c111) {
                              s1 = peg$c111;
                              peg$currPos += 8;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c112); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c469.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c470); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c170); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c472(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuotedString(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c414;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c415); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = [];
      if (peg$c474.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c475); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        if (peg$c474.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c475); }
        }
      }
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s5 = peg$c476;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c477); }
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c170); }
          }
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = [];
        if (peg$c474.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c475); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$c474.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c475); }
          }
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s5 = peg$c476;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c477); }
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c170); }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c478.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c479); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c478.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c479); }
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s4 = peg$c414;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c415); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c480(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c473); }
    }

    return s0;
  }

  function peg$parsecommaOrNewline(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsemultiLineSpace();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c30;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemultiLineSpace();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseeolWhiteSpace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemultiLineSpace();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseopenBrace(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsemultiLineSpace();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c28;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemultiLineSpace();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecloseBrace(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecommaOrNewline();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemultiLineSpace();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c32;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebackquotedString(): AstNode.backquotedString {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 96) {
      s1 = peg$c482;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c483); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c484.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c485); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c484.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c485); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 96) {
          s3 = peg$c482;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c483); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c486(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c481); }
    }

    return s0;
  }

  function peg$parseid(): AstNode.id {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c414;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c415); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c418.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c419); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c418.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c419); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c414;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c415); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c170); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c488(s2);
          }
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c489(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c487); }
    }

    return s0;
  }

  function peg$parseupperIdent(): AstNode.upperIdent {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseUpperReservedWord();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (peg$c491.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c492); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c493.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c494); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c493.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c494); }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c490); }
    }

    return s0;
  }

  function peg$parselowerIdent(): AstNode.lowerIdent {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReservedWord();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunsafeLowerIdent();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c495); }
    }

    return s0;
  }

  function peg$parseunsafeLowerIdent(): any {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c445.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c446); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c493.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c494); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c493.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c494); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (peg$c469.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c470); }
        }
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c170); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        peg$silentFails--;
        if (s4 !== peg$FAILED) {
          peg$currPos = s3;
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c496); }
    }

    return s0;
  }

  function peg$parsefieldName(): AstNode.fieldName {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c445.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c446); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c493.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c494); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c493.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c494); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c497); }
    }

    return s0;
  }

  function peg$parsedottedFields(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsefieldName();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s5 = peg$c54;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parsefieldName();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s5 = peg$c54;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsefieldName();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c498); }
    }

    return s0;
  }

  function peg$parsedottedName(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsesimpleName();
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s5 = peg$c54;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parsesimpleName();
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s5 = peg$c54;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsesimpleName();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c499); }
    }

    return s0;
  }

  function peg$parsesimpleName(): any {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c501.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c502); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c503.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c504); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c503.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c504); }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c500); }
    }

    return s0;
  }

  function peg$parsewhiteSpace(): AstNode.whiteSpace {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsespaceChar();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsespaceChar();
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c505); }
    }

    return s0;
  }

  function peg$parsespaceChar(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c462;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c463); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 160) {
        s1 = peg$c507;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c508); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s1 = peg$c509;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c510); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 12) {
            s1 = peg$c511;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c512); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 13) {
              s1 = peg$c513;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c514); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 11) {
                s1 = peg$c515;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c516); }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c517();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c506); }
    }

    return s0;
  }

  function peg$parseeolWhiteSpace(): AstNode.eolWhiteSpace {
    let s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsespaceChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsespaceChar();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c170); }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsespaceChar();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsespaceChar();
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c519) {
          s2 = peg$c519;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c520); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c9.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeolWhiteSpace();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsespaceChar();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsespaceChar();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseeol();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseeolWhiteSpace();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c518); }
    }

    return s0;
  }

  function peg$parsemultiLineSpace(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseeolWhiteSpace();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewhiteSpace();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c521); }
    }

    return s0;
  }

  function peg$parseeol(): AstNode.eol {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 13) {
      s1 = peg$c513;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c514); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s2 = peg$c523;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c524); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s3 = peg$c513;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c514); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c522); }
    }

    return s0;
  }


    let indent = '';
    let startIndent = '';
    const indents: string[] = [];

    const emptyRef = () => ({kind: 'handle-ref', id: null, name: null, tags: [], location: location()}) as AstNode.HandleRef;

    function extractIndented(items) {
      return items[1].map(item => item[1]);
    }

    /**
     * Utility for extracting values out of comma-separated lists, of the form:
     * `items:(X (commaOrNewline X)*)?`.
     */
    function extractCommaSeparated(items) {
      if (items == null || items.length === 0) {
        return [];
      }
      const [first, rest] = items;
      return [first, ...rest.map(item => item[1])];
    }

    function optional<S, R>(result: S, extract: (source: S) => R, defaultValue: R): R {
      if (result !== null) {
        const value = extract(result);
        if (value !== null) {
          return value;
        }
      }
      return defaultValue === null ? null : defaultValue;
    }

    function checkNormal(result, path: string = '') {
      if (['string', 'number', 'bigint', 'boolean'].includes(typeof result) || result === null) {
        return;
      }
      if (result === undefined) {
        internalError(`Result was undefined at ${path}`);
      }
      if (Array.isArray(result)) {
        let i = 0;
        for (const item of result) {
          checkNormal(item, `${path}/${i}`);
          i++;
        }
        return;
      }
      if (result instanceof Map) {
        for (const [key, value] of result) {
          checkNormal(value, `${path}/${key}`);
        }
        return;
      }
      if (result.model) {
        internalError(`Unexpected 'model' in ${JSON.stringify(result)} at ${path}`);
      }

      if (!result.location) {
        internalError(`No 'location' in ${JSON.stringify(result)} at ${path}`);
      }
      if (!result.kind) {
        internalError(`No 'kind' in ${JSON.stringify(result)} at ${path}`);
      }
      if (result.kind === 'entity-inline') {
        return;
      }
      for (const key of Object.keys(result)) {
        if (['location', 'kind'].includes(key)) {
          continue;
        }
        checkNormal(result[key], `${path}/${key}`);
      }
    }

    function toAstNode<T extends {location: IFileRange} & Omit<T, 'location'>>(data: Omit<T, 'location'>): T {
      const loc = location();
      loc['text'] = text();
      return {...data, location: loc} as T;
    }

    function buildInterfaceArgument(name: string, direction: AstNode.Direction | AstNode.SlotDirection, isOptional: boolean, type: AstNode.ParticleHandleConnectionType) {
      if (direction === 'hosts') {
        error(`Interface cannot have arguments with a 'hosts' direction.`);
      }
      if (direction === 'consumes' || direction === 'provides') {
        let isSet = false;
        if (type && type.kind === 'collection-type') {
          isSet = true;
          type = type.type; // unwrap the inner type of the collection type;
        }
        if (type && type.kind === 'slot-type') {
          const slotType = type as AstNode.SlotType;
          slotType.fields.forEach(({name, value}) => {
            error(`interface slots do not currently support fields`);
          });
        } else if (type !== null) {
          error('cannot consume or provide non slot types');
        }
        return toAstNode<AstNode.InterfaceSlot>({
          kind: 'interface-slot',
          name,
          isRequired: !isOptional,
          direction,
          isSet,
        });
      }
      if (isOptional) {
        // TODO: Support interface optionality
        error('interface handles do not support optionality');
      }
      return toAstNode<AstNode.InterfaceArgument>({
        kind: 'interface-argument',
        direction,
        type,
        name: name || '*',
      });
    }

    // Expected usage to parse a list of bracket-enclosed Things:
    // '[' multiLineSpace parts:(Thing whiteSpace? ',' multiLineSpace)* end:Thing? multiLineSpace ']'
    function combineMultiLine<T>(parts: [T, ...any[]][], end: T | null): T[] {
      const res = parts.map(p => p[0]);
      if (end != null) {
        res.push(end);
      }
      return res;
    }

    function internalError(message: string) {
      error(`Internal Parser Error: ${message}`);
    }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;
