meta
  namespace: arcs.sdk.wasm

particle HandleSyncUpdateTest in '$module.wasm'
  sng: reads {num: Number, txt: Text, lnk: URL, flg: Boolean}
  col: reads [{num: Number, txt: Text, lnk: URL, flg: Boolean}]
  res: writes [{txt: Text, num: Number}]

recipe HandleSyncUpdateTest
  HandleSyncUpdateTest
    sng: reads h1
    col: reads h2
    res: writes h3

// -----------------------------------------------------------------------------------------------

particle RenderTest in '$module.wasm'
  root: consumes Slot
  flags: reads {template: Boolean, model: Boolean}

recipe RenderTest
  s1: slot 'rootslotid-root'
  RenderTest
    root: consumes s1
    flags: reads h1

// -----------------------------------------------------------------------------------------------

resource DataResource
  start
  [{"txt": "initial"}]
store DataStore of {txt: Text} in DataResource

particle AutoRenderTest in '$module.wasm'
  root: consumes Slot
  data: reads {txt: Text}

recipe AutoRenderTest
  h1: copy DataStore
  s1: slot 'rootslotid-root'
  AutoRenderTest
    root: consumes s1
    data: reads h1

// -----------------------------------------------------------------------------------------------

particle EventsTest in '$module.wasm'
  root: consumes Slot
  output: writes {txt: Text}

recipe EventsTest
  s1: slot 'rootslotid-root'
  EventsTest
    root: consumes s1
    output: writes h1

// -----------------------------------------------------------------------------------------------

particle ServicesTest in '$module.wasm'
  output: writes [{call: Text, tag: Text, payload: Text}]

recipe ServicesTest
  ServicesTest
    output: writes h1

// -----------------------------------------------------------------------------------------------

particle EntityClassApiTest in '$module.wasm'
  data: reads {num: Number, txt: Text, lnk: URL, flg: Boolean}
  empty: reads {}
  errors: writes [{msg: Text}]

recipe EntityClassApiTest
  EntityClassApiTest
    data: reads h1
    empty: reads h2
    errors: writes h3

// -----------------------------------------------------------------------------------------------

particle SpecialSchemaFieldsTest in '$module.wasm'
  // 'internal_id' is for C++; 'entityId' is for Kotlin
  fields: reads {for: Text, internal_id: Number, entityId: Number}
  errors: writes [{msg: Text}]

recipe SpecialSchemaFieldsTest
  SpecialSchemaFieldsTest
    fields: reads h1
    errors: writes h2

// -----------------------------------------------------------------------------------------------

particle ReferenceClassApiTest in '$module.wasm'
  data: reads {num: Number, txt: Text}
  errors: writes [{msg: Text}]

recipe ReferenceClassApiTest
  ReferenceClassApiTest
    data: reads h1
    errors: writes h2

// -----------------------------------------------------------------------------------------------

particle SingletonApiTest in '$module.wasm'
  root: consumes Slot
  inHandle: reads {num: Number, txt: Text}
  outHandle: writes {num: Number, txt: Text}
  ioHandle: reads writes {num: Number, txt: Text}
  errors: writes [{msg: Text}]

recipe SingletonApiTest
  s1: slot 'rootslotid-root'
  SingletonApiTest
    root: consumes s1
    inHandle: reads h1
    outHandle: writes h2
    ioHandle: reads writes h3
    errors: writes h4

// -----------------------------------------------------------------------------------------------

particle CollectionApiTest in '$module.wasm'
  root: consumes Slot
  inHandle: reads [{num: Number}]
  outHandle: writes [{num: Number, txt: Text, flg: Boolean}]
  ioHandle: reads writes [{num: Number, txt: Text, flg: Boolean}]

recipe CollectionApiTest
  s1: slot 'rootslotid-root'
  CollectionApiTest
    root: consumes s1
    inHandle: reads h1
    outHandle: writes h2
    ioHandle: reads writes h3

// -----------------------------------------------------------------------------------------------

particle UnicodeTest in '$module.wasm'
  sng: reads {pass: Text, src: Text}
  col: reads [{pass: Text, src: Text}]
  res: writes [{pass: Text, src: Text}]

recipe UnicodeTest
  UnicodeTest
    sng: reads h1
    col: reads h2
    res: writes h3

// -----------------------------------------------------------------------------------------------

particle OnFirstStartTest in '$module.wasm'
  root: consumes Slot
  fooHandle: reads writes {txt: Text}

recipe OnFirstStartTest
  s1: slot 'rootslotid-root'
  OnFirstStartTest
    root: consumes s1
    fooHandle: reads writes h3

// -----------------------------------------------------------------------------------------------

schema Slice
  num: Number
  flg: Boolean
  txt: Text

particle EntitySlicingTest in '$module.wasm'
  s1: reads Slice {num}
  s2: reads Slice {txt, num}
  s3: reads Slice {num, flg, txt}
  c1: reads [Slice {num}]
  c2: reads [Slice {num, txt}]
  c3: reads [Slice {flg, txt, num}]
  res: writes [{val: Text}]

recipe EntitySlicingTest
  sngHandle: use *
  colHandle: use *
  resHandle: use *
  EntitySlicingTest
    s1: reads sngHandle
    s2: reads sngHandle
    s3: reads sngHandle
    c1: reads colHandle
    c2: reads colHandle
    c3: reads colHandle
    res: writes resHandle

// -----------------------------------------------------------------------------------------------

particle CombineUpdatesTest in '$module.wasm'
  root: consumes Slot
  handle1: reads writes {num: Number}
  handle2: reads writes [{num: Number}]
  handle3: reads writes {num3: Number}
  handle4: reads writes {num4: Number}
  handle5: reads writes {num5: Number}
  handle6: reads writes {num6: Number}
  handle7: reads writes {num7: Number}
  handle8: reads writes {num8: Number}
  handle9: reads writes {num9: Number}
  handle10: reads writes {num10: Number}
  errors: writes [{msg: Text}]

recipe CombineUpdatesTest
  s1: slot 'rootslotid-root'
  CombineUpdatesTest
    root: consumes s1
    handle1: reads writes h1
    handle2: reads writes h2
    handle3: reads writes h3
    handle4: reads writes h4
    handle5: reads writes h5
    handle6: reads writes h6
    handle7: reads writes h7
    handle8: reads writes h8
    handle9: reads writes h9
    handle10: reads writes h10
    errors: writes h11

