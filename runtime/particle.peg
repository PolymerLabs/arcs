/**
 * @license
 * Copyright (c) 2017 Google Inc. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * Code distributed by Google as part of this project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
{
  var typeLiteral = require("./type-literal.js");
}


ParticleFile = Comment? particle:Particle _ { return particle }

Comment = "/*" (! "*/" .)* "*/" _

Particle
  = type: PrimitiveType _ "(" _ args: Arguments? _ ")" {
      return {type: type, args: args};
  }
  
Type = (VariableType / PrimitiveType / ListType)

ListType = "[" pt:Type "]" { return typeLiteral.viewOf(pt); }

VariableType = "~" name: VariableTypeName { return typeLiteral.namedTypeVariable(name); }

VariableTypeName = [a-z][a-zA-Z0-9]* { return text() }

PrimitiveType = [A-Z][a-zA-Z0-9]* { return text() }
  
Arguments
  = head:Argument tail:(_ "," _ Argument)* {
      return [head].concat(tail.map(a => a[3]));
  }

Argument = dir:Direction? _ tn:Type? _ name:Name? {
    var tags = dir.ephemeral ? ["ephemeral"] : []
    return {direction: dir.direction, tags: tags, type: tn, name: name}
    }

Direction = e: "ephemeral"? _ dir: ("in" / "out" / "inout" / "create") {
    return {direction: dir, ephemeral: e};
    }

Name = [a-z][a-zA-Z0-9]* { return text() }

_ "whitespace"
  = [ \t\n\r]* 
