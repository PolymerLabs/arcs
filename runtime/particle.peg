/**
 * @license
 * Copyright (c) 2017 Google Inc. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * Code distributed by Google as part of this project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
{
  var typeLiteral = require("./type-literal.js");
}


ParticleFile = Comment? particle:Particle _ renders:Renders? _ exposes:Exposes? _ description:Description? _ {
  if (renders) {
    particle.renders = renders;
  } else {
    particle.renders = [];
  }
  if (exposes) {
    particle.exposes = exposes;
  } else {
    particle.exposes = [];
  }
  if (description)
    particle.description = description;
  return particle;
}

Renders = "renders:" _ first:RenderDescriptor rest:(_ "," _ RenderDescriptor)* {
  return [first].concat(rest.map(a => a[3]));
}

RenderDescriptor = name:SlotDescriptor _ min:RenderLevel? max:(_ "-" _ RenderLevel)? {
  if (max == undefined) {
    max = "can";
  } else {
    max = max[3];
  }
  
  if (min == undefined) {
    min = "none";
  }
  return {name, min, max};
}

RenderLevel = "none" / "can" / "need"

Exposes = "exposes:" _ first:ExposeDescriptor rest:(_ "," _ ExposeDescriptor)* {
  return [first].concat(rest.map(a => a[3]));
}

ExposeDescriptor = SlotDescriptor

SlotDescriptor = name:VariableTypeName view:("(" _ VariableTypeName _ ")")? {
  if (view)
    return { name, view: view[2] };
  return { name };
}

Comment = "/*" (! "*/" .)* "*/" _

Particle
  = transient:Transient _ name: PrimitiveType _ "(" _ args: Arguments? _ ")" {
      return { name, args, transient };
  }

Transient = "transient"? {
  if (text().length > 0)
    return true;
}

Type = (VariableType / PrimitiveType / ListType)

ListType = "[" pt:Type "]" { return typeLiteral.viewOf(pt); }

VariableType = "~" name: VariableTypeName { return typeLiteral.namedTypeVariable(name); }

VariableTypeName = [a-z][a-zA-Z0-9]* { return text() }

PrimitiveType = [A-Z][a-zA-Z0-9]* { return text() }
  
Arguments
  = head:Argument tail:(_ "," _ Argument)* {
      return [head].concat(tail.map(a => a[3]));
  }

Argument = dir:Direction? _ tn:Type? _ name:Name? {
    var tags = dir.ephemeral ? ["ephemeral"] : []
    return {direction: dir.direction, tags: tags, type: tn, name: name}
    }

Direction = e: "ephemeral"? _ dir: ("in" / "out" / "inout" / "create") {
    return {direction: dir, ephemeral: e};
    }

Name = [a-z][a-zA-Z0-9]* { return text() }

_ "whitespace"
  = [ \t\n\r]* 

Description = "Description {" _ "pattern:" first:DescriptionValue rest:(_ DescriptionToken)* _ "}" {
  let result = {"pattern":first};
  rest.forEach(a => { result[a[1][0]] = a[1][1]; });
  return result;
}
DescriptionValue = [a-zA-Z0-9~'$\{\}\[\] ]+ { return text().trim() }
DescriptionToken = arg:Name ":" pattern:DescriptionValue { return [arg, pattern] }
