/**
 * @license
 * Copyright (c) 2017 Google Inc. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * Code distributed by Google as part of this project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
{
  let indent = '';
  let startIndent = '';
  const indents:string[] = [];

  function extractIndented(items) {
    return items[1].map(item => item[1]);
  }

  function optional(result, extract, defaultValue) {
    if (result != null) {
      const value = extract(result);
      if (value != null) {
        return value;
      }
    }
    return defaultValue == null ? null : defaultValue;
  }

  function checkNormal(result): void {
    if (['string', 'number', 'boolean'].includes(typeof result) || result === null) {
      return;
    }
    if (result === undefined) {
      throw new SyntaxError(`result was undefined`, [], "", location());
    }
    if (Array.isArray(result)) {
      for (const item of result) {
        checkNormal(item);
      }
      return;
    }
    if (result.model) {
      throw new Error(`unexpected 'model' in ${JSON.stringify(result)}`);
    }
    if (!result.location) {
      throw new Error(`no 'location' in ${JSON.stringify(result)}`);
    }
    if (!result.kind) {
      throw new Error(`no 'kind' in ${JSON.stringify(result)}`);
    }
    for (const key of Object.keys(result)) {
      if (['location', 'kind'].includes(key)) {
        continue;
      }
      checkNormal(result[key]);
    }
  }
}

Manifest
  = eolWhiteSpace? Indent? items:((SameIndent Annotation eolWhiteSpace)? SameIndent ManifestItem)*
  {
    const result: Token.ManifestItem[] = items.map(item => {
      const manifestItem = item[2];
      manifestItem.annotation = optional(item[0], a => a[1], null);
      return manifestItem;
    });
    checkNormal(result);
    return result as Token.ManifestItem[];
  }

ManifestItem
  = Recipe
  / Particle
  / Import
  / Schema
  / SchemaAlias
  / ManifestStorage
  / Shape
  / Meta
  / Resource

Annotation = '@' annotation:lowerIdent { return annotation; }

Resource = 'resource' whiteSpace name:TopLevelIdent eolWhiteSpace Indent SameIndent ResourceStart body:ResourceBody eolWhiteSpace? {
  return {
    kind: 'resource',
    name,
    data: body,
    location: location()
  } as Token.Resource;
  // @returns Token.Resource
}

ResourceStart = 'start' eolWhiteSpace { startIndent = indent; }

ResourceBody = lines:(SameOrMoreIndent ResourceLine)+ {
  return lines.map(line => line[0].substring(startIndent.length) + line[1]).join('');
}

ResourceLine = [^\n]* eol { return text(); }

// TODO: Entity syntax.
ManifestStorage
  = 'store' whiteSpace name:TopLevelIdent whiteSpace 'of' whiteSpace type:ManifestStorageType id:(whiteSpace id)? originalId:('!!' id)?
    version:(whiteSpace Version)? tags:(whiteSpace TagList)? whiteSpace source:ManifestStorageSource eolWhiteSpace
    items:(Indent (SameIndent ManifestStorageItem)+)?
  {
    items = optional(items, extractIndented, []);
    return {
      kind: 'store',
      location: location(),
      name,
      type,
      id: optional(id, id => id[1], null),
      originalId: optional(originalId, originalId => originalId[1], null),
      version: optional(version, version => version[1], null),
      tags: optional(tags, tags => tags[1], null),
      source: source.source,
      origin: source.origin,
      description: items.length > 0 ? items[0][2] : null
    } as Token.ManifestStorage;
  }

ManifestStorageType
  = SchemaInline / CollectionType / BigCollectionType / TypeName

ManifestStorageSource
  = ManifestStorageFileSource / ManifestStorageResourceSource / ManifestStorageStorageSource

ManifestStorageFileSource
  = 'in' whiteSpace source:id { return {origin: 'file', source } as Token.ManifestStorageSource; }

ManifestStorageResourceSource
  = 'in' whiteSpace source:TopLevelIdent { return {origin: 'resource', source } as Token.ManifestStorageSource; }

ManifestStorageStorageSource
  = 'at' whiteSpace source:id { return {origin: 'storage', source }  as Token.ManifestStorageSource; }

ManifestStorageItem
  = ManifestStorageDescription

ManifestStorageDescription
  = 'description' whiteSpace backquotedString eolWhiteSpace

Import
  = 'import' whiteSpace path:id eolWhiteSpace
  {
    return {
      kind: 'import',
      location: location(),
      path,
    } as Token.Import;
  }

Shape
  = 'shape' whiteSpace name:TopLevelIdent typeVars:(whiteSpace? '<' whiteSpace? VariableTypeList whiteSpace? '>')? eolWhiteSpace items:(Indent (SameIndent ShapeItem)*)? eolWhiteSpace?
  {
    const iface = optional(items, extractIndented, []).find(item => item.kind === 'shape-interface');
    if (iface) {
      return {
        kind: 'shape',
        location: location(),
        name,
        interface: iface,
        slots: optional(items, extractIndented, []).filter(item => item.kind === 'shape-slot'),
      } as Token.Shape;
    } else {
      return {
        kind: 'shape',
        location: location(),
        name,
        args: optional(items, extractIndented, []).filter(item => item.kind === 'shape-argument'),
        slots: optional(items, extractIndented, []).filter(item => item.kind === 'shape-slot'),
      } as Token.Shape;
    }
  }

ShapeItem
  = ShapeInterface
  / ShapeArgumentItem
  / ShapeSlot


ShapeInterface
  = verb:(upperIdent / lowerIdent) '(' args:ShapeArgumentList? ')' eolWhiteSpace
  {
    return {
      kind: 'shape-interface',
      location: location(),
      verb,
      args: args || []
    } as Token.ShapeInterface;
  }

ShapeArgumentItem
  = arg:ShapeArgumentWithName eolWhiteSpace
  {
    return arg;
  }

ShapeArgumentList
  = head:ShapeArgument tail:(',' whiteSpace ShapeArgument)*
  {
    return [head].concat(tail.map(a => a[2])) as Token.ShapeArgument[];
  }

ShapeArgument
  = direction:(ParticleArgumentDirection whiteSpace)? type:(ParticleArgumentType whiteSpace)? name:(lowerIdent)?
  {
    if (direction) {
      direction = direction[0];
    }
    if (type) {
      type = type[0];
    }
    if (direction === 'host') {
      error(`Shape cannot have arguments with a 'host' direction.`);
    }

    return {
      kind: 'shape-argument',
      location: location(),
      direction,
      type,
      name,
    } as Token.ShapeArgument;
  }

ShapeArgumentWithName
  = direction:(ParticleArgumentDirection whiteSpace)? type:(ParticleArgumentType whiteSpace)? name:(lowerIdent / '*')
  {
    if(direction) {
      direction = direction[0];
    }
    if(type) {
      type = type[0];
    }
    if (direction === 'host') {
      error(`Shape cannot have arguments with a 'host' direction.`);
    }

    return {
      kind: 'shape-argument',
      location: location(),
      direction,
      type,
      name,
    } as Token.ShapeArgument;
  }

ShapeSlot
  = isRequired:('must' whiteSpace)? direction:('consume' / 'provide') isSet:(whiteSpace 'set of')? name:(whiteSpace lowerIdent)? eolWhiteSpace
  {
    return {
      kind: 'shape-slot',
      location: location(),
      name: optional(name, isRequired => name[1], null),
      isRequired: optional(isRequired, isRequired => isRequired[0] === 'must', false),
      direction,
      isSet: !!isSet,
    } as Token.ShapeSlot;
  }

Meta
  = 'meta' eolWhiteSpace items:(Indent (SameIndent MetaItem)*)? eolWhiteSpace?
{
  items = items ? extractIndented(items): [];
  return {kind: 'meta', items, location: location()} as Token.Meta;
}

MetaItem = MetaStorageKey / MetaName

MetaName = 'name' whiteSpace? ':' whiteSpace? name:id eolWhiteSpace
{
  return { key: 'name', value: name, location: location(), kind: 'name' } as Token.MetaName;
}

MetaStorageKey = 'storageKey' whiteSpace? ':' whiteSpace? key:id eolWhiteSpace
{
  return {key: 'storageKey', value: key, location: location(), kind: 'storageKey' } as Token.MetaStorageKey;
};

Particle
  = 'particle' whiteSpace name:TopLevelIdent verbs:(whiteSpace VerbList)? implFile:(whiteSpace 'in' whiteSpace id)? eolWhiteSpace items:(Indent (SameIndent ParticleItem)*)? eolWhiteSpace?
  {
    let args: Token.ParticleArgument[]  = [];
    const affordance = [];
    const slots: Token.ParticleSlot[] = [];
    let description = null;
    let hasParticleArgument = false;
    verbs = optional(verbs, parsedOutput => parsedOutput[1], []);
    items = items ? extractIndented(items) : [];
    items.forEach(item => {
      if (item.kind === 'interface') {
        if (/[A-Z]/.test(item.verb[0]) && item.verb !== name) {
          error(`Verb ${item.verb} must start with a lower case character or be same as particle name.`);
        }
        verbs.push(item.verb);
        args = item.args;
        hasParticleArgument = true;
      } else if (item.kind === 'particle-argument') {
        args.push(item);
      } else if (item.kind === 'particle-slot') {
        slots.push(item);
      } else if (item.kind === 'description') {
        // TODO: Super hacks.
        description = {
          kind: 'description?',
          location: 'FIXME',
        };
        item.description.forEach(d => description[d.name] = d.pattern || d.patterns[0]);
      } else if (item.affordance) {
        affordance.push(item.affordance);
      } else {
        error(`Particle ${name} contains an unknown element: ${item.name}`);
      }
    });
    if (affordance.length === 0) {
      // Add default affordance
      affordance.push('dom');
    }
    affordance.push('mock');

    return {
      kind: 'particle',
      location: location(),
      name,
      implFile: optional(implFile, implFile => implFile[3], null),
      verbs,
      args,
      affordance,
      slots,
      description,
      hasParticleArgument
    } as Token.Particle;
  }

ParticleItem
  = ParticleInterface
  / ParticleHandle
  / ParticleAffordance
  / ParticleSlot
  / Description

ParticleInterface
  = verb:(upperIdent / lowerIdent) '(' args:ParticleArgumentList? ')' eolWhiteSpace
  {
    return {
      kind: 'interface',
      location: location(),
      verb,
      args: args || []
    } as Token.ParticleInterface;
  }

ParticleHandle
  = arg:ParticleArgument eolWhiteSpace dependentConnections:(Indent (SameIndent ParticleHandle)*)?
  {
    dependentConnections = optional(dependentConnections, extractIndented, []);
    arg.dependentConnections = dependentConnections;
    return arg as Token.ParticleArgument;
  }

ParticleArgumentList
  = head:ParticleArgument tail:(',' whiteSpace ParticleArgument)*
  {
    return [head].concat(tail.map(a => a[2])) as Token.ParticleArgument[];
  }

ParticleArgument
  = direction:ParticleArgumentDirection whiteSpace type:ParticleArgumentType isOptional:'?'? nametag:NameAndTagList
  {
    return {
      kind: 'particle-argument',
      location: location(),
      direction,
      type,
      isOptional: !!isOptional,
      dependentConnections: [],
      name: nametag.name,
      tags: nametag.tags,
    } as Token.ParticleArgument;
  }

ParticleArgumentDirection
  = 'inout' / 'in' / 'out' / 'host' / '`consume' / '`provide'
  {
    return text();
  }

ParticleArgumentType
  = VariableType
  / CollectionType
  / BigCollectionType
  / ReferenceType
  / SlotType
  / SchemaInline
  / TypeName

CollectionType
  = '[' type:ParticleArgumentType ']'
  {
    return {
      kind: 'collection-type',
      location: location(),
      type,
    } as Token.CollectionType;
  }

BigCollectionType
  = 'BigCollection<' type:ParticleArgumentType '>'
  {
    return {
      kind: 'big-collection-type',
      location: location(),
      type,
    } as Token.BigCollectionType;
  }

ReferenceType
  = 'Reference<' type:ParticleArgumentType '>'
  {
    return {
      kind: 'reference-type',
      location: location(),
      type,
    } as Token.ReferenceType;
  }

VariableType
  = '~' name:lowerIdent constraint:(whiteSpace 'with' whiteSpace type:ParticleArgumentType)?
  {
    return {
      kind: 'variable-type',
      location: location(),
      name,
      constraint: optional(constraint, constraint => constraint[3], null),
    } as Token.VariableType;
  }

SlotType
  = 'Slot' fields:(whiteSpace '{' (SlotField (',' whiteSpace SlotField)*)? '}')?
{
  fields = optional(fields, fields => {
    const data = fields[2];
    return [data[0], data[1].map(tail => tail[2])];
  }, []);

  return {
    kind: 'slot-type',
    location: location(),
    fields
  } as Token.SlotType;
}

SlotField
  = name:lowerIdent whiteSpace? ':' whiteSpace? value:lowerIdent
{
  return {
    kind: 'slot-field',
    location: location(),
    name,
    value
  } as Token.SlotField;
}

TypeName
  = name:upperIdent
  {
    return {
      kind: 'type-name',
      location: location(),
      name,
    } as Token.TypeName;
  }

VariableTypeList
  = head:VariableType tail:(',' whiteSpace VariableType)*
  {
    return [head, ...tail.map(a => a[2])] as Token.VariableType[];
  }

ParticleAffordance
  = 'affordance' whiteSpace affordance:('dom-touch' / 'dom' / 'vr' / 'voice') eolWhiteSpace
  {
    return {
      kind: 'particle-affordance',
      location: location(),
      affordance,
    } as Token.ParticleAffordance;
  }

ParticleSlot
  = isRequired:('must' whiteSpace)? 'consume' whiteSpace isSet:('set of' whiteSpace)? name:(lowerIdent) tags:(whiteSpace TagList)? eolWhiteSpace
    items:(Indent (SameIndent ParticleSlotItem)*)?
  {
    let formFactor = null;
    const providedSlots = [];
    items = optional(items, extractIndented, []);
    items.forEach(item => {
      if (item.kind === 'provided-slot') {
        providedSlots.push(item);
      } else if (item.kind === 'form-factor') {
        if (formFactor) {
          error('duplicate form factor for a slot');
        }
        formFactor = item.formFactor;
      } else {
        error('Unsupported particle slot item ', item);
      }
    });
    return {
      kind: 'particle-slot',
      location: location(),
      name,
      tags: optional(tags, tags => tags[1], []),
      isRequired: optional(isRequired, isRequired => isRequired[0] === 'must', false),
      isSet: !!isSet,
      formFactor,
      providedSlots
    } as Token.ParticleSlot;
  }

ParticleSlotItem
  = SlotFormFactor
  / ParticleProvidedSlot

SlotFormFactor
  = 'formFactor' whiteSpace formFactor:('fullscreen' / 'big' / 'medium' / 'small') eolWhiteSpace
  {
    return {
      kind: 'form-factor',
      location: location(),
      formFactor
    } as Token.SlotFormFactor;
  }

ParticleProvidedSlot
  = isRequired:('must' whiteSpace)? 'provide' whiteSpace isSet:('set of' whiteSpace)? name:(lowerIdent) tags:(whiteSpace TagList)? eolWhiteSpace items:(Indent (SameIndent ParticleProvidedSlotItem)*)?
  {
    let formFactor = null;
    const handles = [];
    items = items ? extractIndented(items) : [];
    items.forEach(item => {
      if (item.kind === 'form-factor') {
        if (formFactor) {
          error('duplicate form factor for a slot');
        }
        formFactor = item.formFactor;
      } else {
        handles.push(item.handle);
      }
    });
    return {
      kind: 'provided-slot',
      location: location(),
      name,
      tags: optional(tags, tags => tags[1], []),
      isRequired: optional(isRequired, isRequired => isRequired[0] === 'must', false),
      isSet: !!isSet,
      formFactor,
      handles
    } as Token.ParticleProvidedSlot;
  }

ParticleProvidedSlotItem
  = SlotFormFactor
  / ParticleProvidedSlotHandle

ParticleProvidedSlotHandle
  = 'handle' whiteSpace handle:lowerIdent eolWhiteSpace
  {
    return {
      kind: 'particle-provided-slot-handle',
      location: location(),
      handle,
    } as Token.ParticleProvidedSlotHandle;
  }

Description
  = 'description' whiteSpace pattern:backquotedString eolWhiteSpace handleDescriptions:(Indent (SameIndent ParticleHandleDescription)+)?
  {
    handleDescriptions = optional(handleDescriptions, extractIndented, []);
    const patterns = [];
    if (pattern) {
      patterns.push(pattern);
      handleDescriptions.filter(desc => desc.name === 'pattern').forEach(pattern => patterns.push(pattern));
      handleDescriptions = handleDescriptions.filter(desc => desc.name !== 'pattern');
    }
    return {
      kind: 'description',
      location: location(),
      description: [
        {
          // TODO: this should be stored in a different field.
          kind: 'default-description?',
          location: location(),
          name: 'pattern',
          patterns,
        },
        ...handleDescriptions,
      ],
    } as Token.Description;
  }

ParticleHandleDescription
  = name:lowerIdent whiteSpace pattern:backquotedString eolWhiteSpace
  {
    return {
      kind: 'handle-description',
      location: location(),
      name,
      pattern,
    } as Token.ParticleHandleDescription;
  }

Recipe
  = 'recipe' name:(whiteSpace TopLevelIdent)? verbs:(whiteSpace VerbList)? eolWhiteSpace items:(Indent (SameIndent RecipeItem)*)?
  {
    verbs = optional(verbs, parsedOutput => parsedOutput[1], []);
    return {
      kind: 'recipe',
      location: location(),
      name: optional(name, name => name[1], null),
      verbs,
      items: optional(items, extractIndented, []),
    } as Token.Recipe;
  }

RecipeItem
  = RecipeParticle
  / RecipeHandle
  / RecipeSlot
  / RecipeConnection
  / RecipeSearch
  / Description

LocalName
  = 'as' whiteSpace name:lowerIdent
  {
    return name;
  }

TopLevelAlias
  = 'as' whiteSpace name:upperIdent
  {
    return name;
  }

RecipeParticle
  = ref:ParticleRef name:(whiteSpace LocalName)? eolWhiteSpace connections:(Indent (SameIndent RecipeParticleItem)*)?
  {
    const handleConnections = [];
    const slotConnections = [];
    if (connections) {
      connections = extractIndented(connections);
      for (const conn of connections) {
        if (conn.kind === 'handle-connection') {
          handleConnections.push(conn);
        } else {
          slotConnections.push(conn);
        }
      }
    }
    return {
      kind: 'particle',
      location: location(),
      name: optional(name, name => name[1], null),
      ref,
      connections: handleConnections,
      slotConnections,
    } as Token.Particle;
  }

RecipeParticleItem = RecipeParticleConnection / RecipeParticleSlotConnection

RecipeParticleConnection
  = param:(lowerIdent / '*') whiteSpace dir:Direction target:(whiteSpace ParticleConnectionTargetComponents)? eolWhiteSpace
  {
    return {
      kind: 'handle-connection',
      location: location(),
      param,
      dir,
      target: optional(target, target => target[1], null),
    } as Token.RecipeParticleConnection;
  }

ParticleConnectionTargetComponents
  = param:(upperIdent / lowerIdent)? whiteSpace? tags:(TagList)?
  {
    param = optional(param, param => param, null);
    let name = null;
    let particle = null;
    if (param) {
      if (param[0].toUpperCase() === param[0]) {
        particle = param;
      } else {
        name = param;
      }
    }

    return {
      kind: 'handle-connection-components',
      location: location(),
      name,
      particle,
      tags: optional(tags, tags => tags, []),
    } as Token.ParticleConnectionTargetComponents;
  }

RecipeParticleSlotConnection
  = 'consume' whiteSpace ref:RecipeSlotConnectionRef name:(whiteSpace LocalName)? eolWhiteSpace providedSlots:(Indent (SameIndent RecipeParticleProvidedSlot)*)?
  {
    return {
      kind: 'slot-connection',
      location: location(),
      param: ref.param,
      tags: ref.tags,
      name: optional(name, name=>name[1], null),
      providedSlots: optional(providedSlots, extractIndented, [])
    } as Token.RecipeParticleSlotConnection;
  }

RecipeSlotConnectionRef
  = param:lowerIdent tags:SpaceTagList?
  {
    return {
      kind: 'slot-connection-ref',
      location: location(),
      param,
      tags,
    } as Token.RecipeSlotConnectionRef;
  }

RecipeParticleProvidedSlot
  = 'provide' whiteSpace param:lowerIdent name:(whiteSpace LocalName)? eolWhiteSpace
  {
    return {
      kind: 'provided-slot',
      location: location(),
      param,
      name: optional(name, name=>name[1], null)
    } as Token.ParticleProvidedSlot;
  }

RecipeConnection
  = from:ConnectionTarget whiteSpace direction:Direction whiteSpace to:ConnectionTarget eolWhiteSpace
  {
    return {
      kind: 'connection',
      location: location(),
      direction,
      from,
      to,
    } as Token.RecipeConnection;
  }

RecipeSearch
  = 'search' whiteSpace phrase:backquotedString eolWhiteSpace tokens:(Indent (SameIndent 'tokens' t:(whiteSpace backquotedString)+ eolWhiteSpace))?

  {
    return {
      kind: 'search',
      location: location(),
      phrase,
      tokens: optional(tokens, tokens => tokens[1][2].map(t => t[1]), null)
    } as Token.RecipeSearch;
  }

Direction
  = dir:('<-' / '->' / '=' / 'consume' / 'provide')

ConnectionTarget
  = VerbConnectionTarget / TagConnectionTarget / NameConnectionTarget / ParticleConnectionTarget

VerbConnectionTarget
  = verbs:VerbList components:ConnectionTargetHandleComponents?
  {
    const {param, tags} = optional(components, components => components, {param: null, tags: []});
    return {
      kind: 'connection-target',
      location: location(),
      targetType: 'verb',
      verbs,
      param,
      tags
    } as Token.ConnectionTarget;
  }

TagConnectionTarget
  = tags:TagList {
    return {
      kind: 'connection-target',
      location: location(),
      targetType: 'tag',
      tags
    } as Token.ConnectionTarget;
  }

NameConnectionTarget
  = name:lowerIdent components:ConnectionTargetHandleComponents?
  {
    const {param, tags} = optional(components, components => components, {param: null, tags: []});
    return {
      kind: 'connection-target',
      targetType: 'localName',
      location: location(),
      name,
      param,
      tags
    } as Token.ConnectionTarget;
  }

ParticleConnectionTarget
  = particle:upperIdent components:ConnectionTargetHandleComponents?
  {
    const {param, tags} = optional(components, components => components, {param: null, tags: []});
    return {
      kind: 'connection-target',
      targetType: 'particle',
      location: location(),
      particle,
      param,
      tags
    } as Token.ConnectionTarget;
  }

ConnectionTargetHandleComponents
  = '.' param:lowerIdent? tags:(whiteSpace? TagList)?
  {
    return {
      param: optional(param, param => param, null),
      tags: optional(tags, tags => tags[1], []),
    } as Token.ConnectionTargetHandleComponents;
  }

RecipeHandle
  = type:('?' / 'use' / 'map' / 'create' / 'copy' / '`slot') ref:(whiteSpace HandleOrSlotRef)? name:(whiteSpace LocalName)? eolWhiteSpace
  {
    return {
      kind: 'handle',
      location: location(),
      name: optional(name, name => name[1], null),
      ref: optional(ref, ref => ref[1], null),
      fate: type
    } as Token.RecipeHandle;
  }

Tag
  = '#' [a-zA-Z][a-zA-Z0-9_]* {return text().substring(1);}

TagList
  = head:Tag tail:(whiteSpace TagList)?
  { return [head, ...(tail && tail[1] || [])]; }

Verb
  = '&' [a-zA-Z][a-zA-Z0-9_]* {return text().substring(1);}

VerbList
  = head:Verb tail:(whiteSpace VerbList)?
  { return [head, ...(tail && tail[1] || [])]; }


SpaceTagList
  = whiteSpace tags:TagList
  { return tags; }

// Allow for an optional name followed by a TagList
// - If name is not specified the first tag is used for the name
// - Syntax error if no name or taglist are provided.
NameAndTagList
   = whiteSpace name:lowerIdent whiteSpace tags:TagList
   {
     return {
       name,
       tags
     } as Token.NameAndTag;
   }
   / whiteSpace name:lowerIdent
   {
     return {
       name,
       tags: []
     } as Token.NameAndTag;
   }
   / whiteSpace tags:TagList
   {
      return {
        name: tags[0],
        tags
      } as Token.NameAndTag;
   }

ParticleRef
  = name:upperIdent
  {
    return {
      kind: 'particle-ref',
      location: location(),
      name,
      verbs: [],
    } as Token.ParticleRef;
  }
  / verb:Verb
  {
    return {
      kind: 'particle-ref',
      location: location(),
      verbs: [verb],
    } as Token.ParticleRef;
  }

HandleOrSlotRef
  = id:id tags:SpaceTagList?
  {
    return {
      kind: 'handle-ref',
      location: location(),
      id,
      tags: tags || [],
    } as Token.HandleRef;
  }
  / name:upperIdent tags:SpaceTagList?
  {
    return {
      kind: 'handle-ref',
      location: location(),
      name,
      tags: tags || [],
    } as Token.HandleRef;
  }
  / tags:TagList
  {
    return {
      kind: 'handle-ref',
      location: location(),
      tags,
    } as Token.HandleRef;
  }

RecipeSlot
  = 'slot' ref:(whiteSpace HandleOrSlotRef)? name:(whiteSpace LocalName)? eolWhiteSpace
  {
    return {
      kind: 'slot',
      location: location(),
      ref: optional(ref, ref => ref[1], null),
      name: optional(name, name => name[1], '')
    } as Token.RecipeSlot;
  }

SchemaInline
  = names:((upperIdent / '*') whiteSpace)+ '{' fields:(SchemaInlineField (',' whiteSpace SchemaInlineField)*)? '}'
  {
    return {
      kind: 'schema-inline',
      location: location(),
      names: optional(names, names => names.map(name => name[0]).filter(name => name !== '*'), []),
      fields: optional(fields, fields => [fields[0], ...fields[1].map(tail => tail[2])], []),
    } as Token.SchemaInline;
  }

SchemaInlineField
  = type:(SchemaType whiteSpace)? name:lowerIdent
  {
    return {
      kind: 'schema-inline-field',
      location: location(),
      name,
      type: optional(type, type => type[0], null),
    } as Token.SchemaInlineField;
  }

SchemaSpec
  = 'schema' names:(whiteSpace ('*' / TopLevelIdent))+ parents:SchemaExtends?
  {
    return {
      names: names.map(name => name[1]).filter(name => name !== '*'),
      parents: optional(parents, parents => parents, []),
    } as Token.SchemaSpec;
  }

SchemaAlias
  = 'alias' whiteSpace spec:SchemaSpec whiteSpace alias:TopLevelAlias eolWhiteSpace items:(Indent (SameIndent SchemaItem)*)?
  {
    return Object.assign(spec, {
      kind: 'schema',
      location: location(),
      items: optional(items, extractIndented, []),
      alias,
    }) as Token.Schema;
  }

Schema
  = spec:SchemaSpec eolWhiteSpace items:(Indent (SameIndent SchemaItem)*)?
  {
    return Object.assign(spec, {
      kind: 'schema',
      location: location(),
      items: optional(items, extractIndented, []),
    }) as Token.Schema;
  }

SchemaExtends
  = whiteSpace 'extends' whiteSpace first:upperIdent rest:(whiteSpace? ',' whiteSpace upperIdent)*
{
  const list = [first];
  for (const item of rest) {
    list.push(item[3]);
  }
  return list;
}

SchemaItem
  = SchemaSection
  / SchemaField
  / Description

SchemaSection
  = sectionType:('normative' / 'optional') eolWhiteSpace fields:(Indent (SameIndent SchemaField)+)
  {
    return {
      kind: 'schema-section',
      location: location(),
      sectionType,
      fields: extractIndented(fields),
    } as Token.SchemaSection;
  }

SchemaField
  = type:SchemaType whiteSpace name:lowerIdent eolWhiteSpace
  {
    return {
      kind: 'schema-field',
      location: location(),
      type,
      name,
    } as Token.SchemaField;
  }

SchemaType
  = SchemaReferenceType / SchemaCollectionType / SchemaPrimitiveType / SchemaUnionType / SchemaTupleType

SchemaCollectionType = '[' whiteSpace* schema:SchemaType whiteSpace* ']'
  {
    return {
      kind: 'schema-collection',
      location: location(),
      schema
    } as Token.SchemaCollectionType;
  }

SchemaReferenceType = 'Reference<' whiteSpace* schema:(SchemaInline / TypeName) whiteSpace* '>'
  {
    return {
      kind: 'schema-reference',
      location: location(),
      schema
    } as Token.SchemaReferenceType;
  }

SchemaPrimitiveType
  = 'Text' / 'URL' / 'Number' / 'Boolean' / 'Bytes' / 'Object'

SchemaUnionType
  = '(' whiteSpace? first:SchemaPrimitiveType rest:(whiteSpace 'or' whiteSpace SchemaPrimitiveType)+ whiteSpace? ')'
  {
    const types = [first];
    for (const type of rest) {
      types.push(type[3]);
    }
    return {kind: 'schema-union', location: location(), types} as Token.SchemaUnionType;
  }

SchemaTupleType
  = '(' whiteSpace? first:SchemaPrimitiveType rest:(whiteSpace? ',' whiteSpace? SchemaPrimitiveType)* whiteSpace? ')'
  {
    const types = [first];
    for (const type of rest) {
      types.push(type[3]);
    }
    return {kind: 'schema-tuple', location: location(), types} as Token.SchemaTupleType;
  }

Version
  = '@' version:[0-9]+
  {
    return Number(version.join(''));
  }

Indent = &(i:" "+ &{
  i = i.join('');
  if (i.length > indent.length) {
    indents.push(indent);
    indent = i;
    return true;
  }
  return undefined;
})

SameIndent = &(i:" "* &{
  i = i.join('');
  if (i.length === indent.length) {
    return true;
  } else if (i.length < indent.length) {
    indent = indents.pop();
    return false;
  }
  return undefined;
}) " "*

SameOrMoreIndent = &(i:" "* &{
  i = i.join('');
  if (i.length >= indent.length) {
    return true;
  } else if (i.length < indent.length) {
    indent = indents.pop();
    return false;
  }
  return undefined;
}) " "* { return text(); }

TopLevelIdent
  = upperIdent

//TODO Add ParticleArgumentDirection (rewrite recipes to not use directions as identifiers.
ReservedWord
  = Direction

backquotedString = '`' pattern:([^`]+) '`' { return pattern.join(''); }
id = "'" id:[^']+ "'" { return id.join(''); }
upperIdent = ident:([A-Z][a-z0-9_]i*) { return text(); }
lowerIdent = ident:(!(ReservedWord (whiteSpace / eolWhiteSpace))[a-z][a-z0-9_]i*) {return text();}
whiteSpace
  = " "+
eolWhiteSpace
  = [ ]* !.
  / [ ]* '//' [^\n]* eolWhiteSpace
  / [ ]* eol eolWhiteSpace?
eol
  = "\r"? "\n" "\r"?
