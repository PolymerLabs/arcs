/**
 * @license
 * Copyright (c) 2017 Google Inc. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * Code distributed by Google as part of this project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

{
  const assert = require('assert');
  var typeLiteral = require('../type-literal.js');

  var indent = '';
  var indents = [];
  function extractIndented(items) {
    return items[1].map(item => item[1]);
  }
  function optional(result, extract, defaultValue) {
    if (result != null) {
      let value = extract(result);
      if (value != null) {
        return value;
      }
    }
    return defaultValue == null ? null : defaultValue;
  }
}

Manifest
  = eolWhiteSpace? Indent? items:(SameIndent ManifestItem)*
  {
    return items.map(item => item[1]);
  }

ManifestItem
  = Recipe
  / Particle
  / Import
  / Schema

Import
  = 'import' whiteSpace path:id eolWhiteSpace
  {
    return {
      kind: 'import',
      path,
    }
  }

Particle
  = 'particle' whiteSpace name:upperIdent implFile:(whiteSpace 'in' whiteSpace id)? eolWhiteSpace items:(Indent (SameIndent ParticleItem)*)? eolWhiteSpace?
  {
    let args = null;
    let affordance = [];
    let slots = [];
    let description = null;
    items = items ? extractIndented(items) : [];
    items.forEach(item => {
      if (item.name == name) {
        args = item.args;
      } else if (item.kind == 'particle-slot') {
        slots.push(item);
      } else if (item.kind == 'description') {
        description = {};
        item.description.forEach(d => { description[d.name] = d.pattern; });
      } else {
        affordance.push(item.affordance)
      }
    });

    return {
      kind: 'particle',
      name,
      implFile: optional(implFile, implFile => implFile[3], null),
      args,
      affordance,
      slots,
      description
    };
  }

ParticleItem
  = ParticleInterface
  / Affordance
  / ParticleSlot
  / ParticleDescription

ParticleInterface
  = name:upperIdent '(' args:ParticleArgumentList ')' eolWhiteSpace
  {
    return { name, args }
  }

ParticleArgumentList
  = head:ParticleArgument tail:(',' whiteSpace ParticleArgument)*
  {
    return [head].concat(tail.map(a => a[2]));
  }

ParticleArgument
  = direction:ParticleArgumentDirection whiteSpace tn:ParticleArgumentType whiteSpace name:(lowerIdent)
  {
    return {direction, type:tn, name};
  }

ParticleArgumentDirection
  = 'in' / 'out' / 'inout'
  {
     // Do we still need ephemeral?
     return {direction: dir};
  }

ParticleArgumentType
  = (VariableType / PrimitiveType / ListType)
ListType
  = '[' pt:ParticleArgumentType ']' { return typeLiteral.viewOf(pt); }
VariableType
  = '~' name: VariableTypeName { return typeLiteral.namedTypeVariable(name); }
VariableTypeName
  = [a-z][a-zA-Z0-9]* { return text() }
PrimitiveType
  = [A-Z][a-zA-Z0-9]* { return text() }

Affordance
  = 'affordance' whiteSpace affordance:('dom-touch' / 'dom' / 'vr' / 'voice') eolWhiteSpace
  { return {affordance}; }

ParticleSlot
  = isRequired:('must' whiteSpace)? 'consume' whiteSpace name:(lowerIdent) eolWhiteSpace
    items:(Indent (SameIndent ParticleSlotItem)*)?
  {
    let formFactor = null;
    let providedSlots = [];
    items = items ? extractIndented(items) : [];
    items.forEach(item => {
      if (item.kind == 'provided-slot') {
        providedSlots.push(item);
      } else if (item.kind == 'form-factor') {
        if (formFactor)
          assert ('duplicate form factor for a slot');
        formFactor = item.formFactor;
      } else {
        assert('Unsupported particle slot item ', item);
      }
    });
    return {
      kind: 'particle-slot',
      name,
      isRequired: optional(isRequired, isRequired => isRequired[0] == 'must', false),
      formFactor,
      providedSlots
    };
  }

ParticleSlotItem
  = SlotFormFactor
  / ParticleProvidedSlot

SlotFormFactor
  = 'formFactor' whiteSpace formFactor:('fullscreen' / 'big' / 'medium' / 'small' / 'interleaved') eolWhiteSpace
  {
    return {
      kind: 'form-factor',
      formFactor
    };
  }

ParticleProvidedSlot
  = 'provide' whiteSpace name:(lowerIdent) eolWhiteSpace items:(Indent (SameIndent ParticleProvidedSlotItem)*)?
  {
    let formFactor = null;
    let views = [];
    items = items ? extractIndented(items) : [];
    items.forEach(item => {
      if (item.kind == 'form-factor') {
        // TODO: assert this is the only form factor.
        formFactor = item.formFactor;
      } else {
        views.push(item.view);
      }
    });
    return {
      kind: 'provided-slot',
      name,
      formFactor,
      views
    };
  }

ParticleProvidedSlotItem
  = SlotFormFactor
  / ParticleProvidedSlotView

ParticleProvidedSlotView
  = 'view' whiteSpace view:lowerIdent eolWhiteSpace
  { return {view}; }

ParticleDescription
  = 'description' eolWhiteSpace tokens:(Indent (SameIndent ParticleDescriptionToken)+)
  {
    // assert(!tokens);
    tokens = extractIndented(tokens);
    assert(tokens[0].name == 'pattern', 'Description must start with pattern.');
    return {
      kind: 'description',
      description: tokens
    };
  }

ParticleDescriptionToken
  = name:lowerIdent whiteSpace '`' pattern:ParticleDescriptionPattern '`' eolWhiteSpace
  {
    return { name, pattern };
  }
ParticleDescriptionPattern = ([^`]+) { return text().trim() }

Recipe
  = 'recipe' name:(whiteSpace upperIdent)? tags:(whiteSpace TagList)? eolWhiteSpace items:(Indent (SameIndent RecipeItem)*)?
  {
    return {
      kind: 'recipe',
      name: optional(name, name => name[1], null),
      tags: optional(tags, tags => tags[1], []),
      items: optional(items, extractIndented, []),
    };
  }

RecipeItem
  = RecipeParticle
  / RecipeView
  / RecipeConnection

Name
  = 'as' whiteSpace name:lowerIdent
  {
    return name;
  }

RecipeParticle
  = ref:ParticleRef name:(whiteSpace Name)? eolWhiteSpace connections:(Indent (SameIndent RecipeParticleItem)*)?
  {
    let viewConnections = [];
    let slotConnections = [];
    if (connections) {
      connections = extractIndented(connections);
      for (let conn of connections) {
        if (conn.kind == 'view-connection')
          viewConnections.push(conn);
        else
          slotConnections.push(conn)
      }
    }
    return {
      kind: 'particle',
      name: optional(name, name => name[1], null),
      ref,
      connections: viewConnections,
      slotConnections: slotConnections,
    };
  }

RecipeParticleItem = RecipeParticleConnection / RecipeParticleSlotConnection

RecipeParticleConnection
  = param:(lowerIdent / '*') whiteSpace dir:Direction whiteSpace target:ConnectionTarget eolWhiteSpace
  {
    return {
      kind: 'view-connection',
      param,
      dir,
      target,
    };
  }

RecipeParticleSlotConnection
  = dir:('provide' / 'consume') whiteSpace param:(lowerIdent / '*') viewRef:(whiteSpace SlotViewRef)? name:(whiteSpace Name)? eolWhiteSpace
  {
    return {
      kind: 'slot-connection',
      param,
      dir,
      viewRef: optional(viewRef, viewRef => viewRef[1], null),
      name: optional(name, name=>name[1], null),
    };
  }

RecipeConnection
  = from:ConnectionTarget whiteSpace dir:Direction whiteSpace to:ConnectionTarget eolWhiteSpace
  {
    return {
      kind: 'connection',
      dir,
      from,
      to,
    };
  }

Direction
  = dir:('<-' / '->' / '=')

ConnectionTarget
  = ident:(upperIdent / lowerIdent) param:('.' lowerIdent)? tags:(whiteSpace TagList)?
  {
    let particle = null;
    let name = null;
    if (ident) {
      if (/^[A-Z]/.test(ident)) {
        particle = ident;
      } else {
        name = ident;
      }
    }

    return {
      particle,
      name,
      param: optional(param, param => param[1], null),
      tags: optional(tags, tags => tags[1], []),
    }
  }
  / tags:TagList
  { return {tags}; }

RecipeView
  = type:('map' / 'create') ref:(whiteSpace ViewRef)? name:(whiteSpace Name)? eolWhiteSpace
  {
    return {
      kind: 'view',
      name: optional(name, name => name[1], null),
      ref: optional(ref, ref => ref[1], {tags: []}),
      create: type === 'create' ? true : false
    }
  }

Tag
  = '#' [a-zA-Z][a-zA-Z0-9_]* {return text()}

TagList
  = head:Tag tail:(whiteSpace TagList)?
  { return [head, ...(tail && tail[1] || [])]; }

SpaceTagList
  = whiteSpace tags:TagList
  { return tags; }

ParticleRef
  = id:id tags:SpaceTagList?
  { return {id, tags: tags || []}; }
  / name:upperIdent tags:SpaceTagList?
  { return {name, tags: tags || []}; }
  / tags:TagList
  { return {tags}; }

ViewRef
  = id:id tags:SpaceTagList?
  { return {id, tags: tags || []}; }
  / tags:TagList
  { return {tags}; }

SlotViewRef
  = '(' name:lowerIdent? tags:TagList? ')'
  {
    return name ? {name, tags:[]} : {tags};
  }

Schema
  = 'schema' whiteSpace name:upperIdent parent:(whiteSpace 'extends' whiteSpace upperIdent)? eolWhiteSpace sections:(Indent (SameIndent SchemaSection)*)?
  {
    return {
      kind: 'schema',
      name: name,
      parent: optional(parent, parent => parent[3], null),
      sections: optional(sections, extractIndented, []),
    };
  }

SchemaSection
  = sectionType:('normative' / 'optional') eolWhiteSpace fields:(Indent (SameIndent SchemaField eolWhiteSpace)+)
  {
    let fieldDict = {};
    for (let field of extractIndented(fields)) {
      fieldDict[field.name] = field.type;
    }
    return {
      sectionType,
      fields: fieldDict,
    };
  }

SchemaField
  = type:SchemaType whiteSpace name:lowerIdent
  {
    return {
      type,
      name,
    };
  }

SchemaType
  = 'Text' / 'URL'

Indent = &(i:" "+ &{
  i = i.join('');
  if (i.length > indent.length) {
    indents.push(indent);
    indent = i;
    return true;
  }
})

SameIndent = &(i:" "* &{
  i = i.join('');
  if (i.length == indent.length) {
    return true;
  } else if (i.length < indent.length) {
    indent = indents.pop();
    return false;
  }
}) " "*

SameOrMoreIndent = &(i:" "* &{
  i = i.join('');
  if (i.length >= indent.length) {
    return true;
  } else if (i.length < indent.length) {
    indent = indents.pop();
    return false;
  }
}) " "*

id = "'" id:[^']+ "'" {return id.join('')}
upperIdent = ident:([A-Z][a-z0-9_]i*) {return text()}
lowerIdent = ident:([a-z][a-z0-9_]i*) {return text()}
whiteSpace
  = " "+
eolWhiteSpace
  = [ ]* !.
  / [ ]* '#' [^\n]* eolWhiteSpace
  / [ ]* '\n' eolWhiteSpace?
