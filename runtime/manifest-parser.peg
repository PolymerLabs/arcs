/**
 * @license
 * Copyright (c) 2017 Google Inc. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * Code distributed by Google as part of this project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

{
  var indent = '';
  var indents = [];
  function extractIndented(items) {
    return items[1].map(item => item[1]);
  }
  function optional(result, extract, defaultValue) {
    if (result != null) {
      let value = extract(result);
      if (value != null) {
        return value;
      }
    }
    return defaultValue == null ? null : defaultValue;
  }
}

Manifest
  = eolWhiteSpace? Indent? items:(SameIndent ManifestItem)*
  {
    return items.map(item => item[1]);
  }

ManifestItem
  = Recipe
  / Particle

Particle
  = "particle" whiteSpace name:upperIdent implFile:(whiteSpace "in" whiteSpace id)? eolWhiteSpace body:IndentedText?
  {
    return {
      kind: "particle",
      name,
      implFile: optional(implFile, implFile => implFile[3], null),
      body,
    };
  }

IndentedText
  = Indent (SameOrMoreIndent [^\n]+ eolWhiteSpace)*
  {
    return text();
  }

Recipe
  = "recipe" name:(whiteSpace upperIdent)? tags:(whiteSpace TagList)? eolWhiteSpace items:(Indent (SameIndent RecipeItem)*)?
  {
    return {
      kind: "recipe",
      name: optional(name, name => name[1], null),
      tags: optional(tags, tags => tags[1], []),
      items: optional(items, extractIndented, []),
    };
  }

RecipeItem
  = RecipeParticle
  / RecipeView
  / RecipeConnection

Name
  = "as" whiteSpace name:lowerIdent
  {
    return name;
  }

RecipeParticle
  = ref:ParticleRef name:(whiteSpace Name)? eolWhiteSpace connections:(Indent (SameIndent RecipeParticleConnection)*)?
  {
    if (connections) {
      connections = extractIndented(connections);
    }
    return {
      kind: 'particle',
      name: optional(name, name => name[1], null),
      ref,
      connections: connections || [],
    };
  }

RecipeParticleConnection
  = param:(lowerIdent / "*") whiteSpace dir:Direction whiteSpace target:ConnectionTarget eolWhiteSpace
  {
    return {
      param,
      dir,
      target,
    };
  }

RecipeConnection
  = from:ConnectionTarget whiteSpace dir:Direction whiteSpace to:ConnectionTarget eolWhiteSpace
  {
    return {
      kind: 'connection',
      dir,
      from,
      to,
    };
  }

Direction
  = dir:("<-" / "->" / "=")

ConnectionTarget
  = ident:(upperIdent / lowerIdent) param:("." lowerIdent)? tags:(whiteSpace TagList)?
  {
    let particle = null;
    let name = null;
    if (ident) {
      if (/^[A-Z]/.test(ident)) {
        particle = ident;
      } else {
        name = ident;
      }
    }

    return {
      particle,
      name,
      param: optional(param, param => param[1], null),
      tags: optional(tags, tags => tags[1], []),
    }
  }
  / tags:TagList
  { return {tags}; }

RecipeView
  = "map" ref:(whiteSpace ViewRef)? name:(whiteSpace Name)? eolWhiteSpace
  {
    return {
      kind: 'view',
      name: optional(name, name => name[1], null),
      ref: optional(ref, ref => ref[1], {tags: []})
    }
  }

Tag
  = "#" [a-zA-Z][a-zA-Z0-9_]* {return text()}

TagList
  = head:Tag tail:(whiteSpace TagList)?
  { return [head, ...(tail && tail[1] || [])]; }

SpaceTagList
  = whiteSpace tags:TagList
  { return tags; }

ParticleRef
  = id:id tags:SpaceTagList?
  { return {id, tags: tags || []}; }
  / name:upperIdent tags:SpaceTagList?
  { return {name, tags: tags || []}; }
  / tags:TagList
  { return {tags}; }

ViewRef
  = id:id tags:SpaceTagList?
  { return {id, tags: tags || []}; }
  / tags:TagList
  { return {tags}; }

Indent = &(i:" "+ &{
  i = i.join('');
  if (i.length > indent.length) {
    indents.push(indent);
    indent = i;
    return true;
  }
})

SameIndent = &(i:" "* &{
  i = i.join('');
  if (i.length == indent.length) {
    return true;
  } else if (i.length < indent.length) {
    indent = indents.pop();
    return false;
  }
}) " "*

SameOrMoreIndent = &(i:" "* &{
  i = i.join('');
  if (i.length >= indent.length) {
    return true;
  } else if (i.length < indent.length) {
    indent = indents.pop();
    return false;
  }
}) " "*

id = "'" id:[^']+ "'" {return id.join('')}
upperIdent = ident:([A-Z][a-z0-9_]i*) {return text()}
lowerIdent = ident:([a-z][a-z0-9_]i*) {return text()}
whiteSpace
  = " "+
eolWhiteSpace
  = [ ]* !.
  / [ ]* "\n" eolWhiteSpace?
