-----[header]-----
Kotlin Refinement Generator

Expectations can be updated with:
$ ./tools/sigh updateCodegenUnitTests
-----[end_header]-----

-----[name]-----
creates queries from refinement expressions involving math expressions
-----[input]-----
particle Foo
  input: reads Something {a: Number [ a > 3 and a != 100 ], b: Number [b > 20 and b < 100] } [a + b/3 > 100]
-----[results]-----
(300.asExpr() lt (CurrentScope<Number>(mutableMapOf())["b"] + (CurrentScope<Number>(mutableMapOf())["a"] * 3.asExpr()))) and ((CurrentScope<Number>(mutableMapOf())["a"] gt 3.asExpr()) and (CurrentScope<Number>(mutableMapOf())["a"] neq 100.asExpr())) and ((CurrentScope<Number>(mutableMapOf())["b"] gt 20.asExpr()) and (CurrentScope<Number>(mutableMapOf())["b"] lt 100.asExpr()))
-----[end]-----

-----[name]-----
creates queries from refinement expressions involving boolean expressions
-----[input]-----
particle Foo
  input: reads Something {uuid: Text, value: Number} [uuid == 'test-uuid']
-----[results]-----
(CurrentScope<String>(mutableMapOf())["uuid"] eq "test-uuid".asExpr())
-----[end]-----

-----[name]-----
creates queries from refinement expressions involving text expressions
-----[input]-----
particle Foo
  input: reads Something {a: Number [ a > 3 and a != 100 ], b: Number [b > 20 and b < 100] } [a + b/3 > 100]
-----[results]-----
(300.asExpr() lt (CurrentScope<Number>(mutableMapOf())["b"] + (CurrentScope<Number>(mutableMapOf())["a"] * 3.asExpr()))) and ((CurrentScope<Number>(mutableMapOf())["a"] gt 3.asExpr()) and (CurrentScope<Number>(mutableMapOf())["a"] neq 100.asExpr())) and ((CurrentScope<Number>(mutableMapOf())["b"] gt 20.asExpr()) and (CurrentScope<Number>(mutableMapOf())["b"] lt 100.asExpr()))
-----[end]-----

-----[name]-----
creates queries where field refinement is null
-----[input]-----
particle Foo
  input: reads Something {a: Boolean, b: Boolean} [a and b]
-----[results]-----
(CurrentScope<Boolean>(mutableMapOf())["b"] and CurrentScope<Boolean>(mutableMapOf())["a"])
-----[end]-----

-----[name]-----
creates queries where schema refinement is null
-----[input]-----
particle Foo
  input: reads Something {a: Boolean [not a], b: Boolean [b]}
-----[results]-----
(!CurrentScope<Boolean>(mutableMapOf())["a"]) and CurrentScope<Boolean>(mutableMapOf())["b"]
-----[end]-----

-----[name]-----
creates queries where there is no refinement
-----[input]-----
particle Foo
  input: reads Something {a: Boolean, b: Boolean}
-----[results]-----
true.asExpr()
-----[end]-----

-----[name]-----
escapes text in queries from refinement expressions
-----[input]-----
particle Foo
  input: reads Something {str: Text} [str == '\t\b\n\r\'\"$']
-----[results]-----
(CurrentScope<String>(mutableMapOf())["str"] eq "\t\b\n\r\'\"\$".asExpr())
-----[end]-----
