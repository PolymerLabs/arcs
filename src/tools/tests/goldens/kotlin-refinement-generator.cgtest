-----[header]-----
Kotlin Refinement Generator

Expectations can be updated with:
$ ./tools/sigh updateCodegenUnitTests
-----[end_header]-----

-----[name]-----
creates queries from refinement expressions involving math expressions
-----[input]-----
particle Foo
  input: reads Something {a: Number [ a > 3 and a != 100 ], b: Number [b > 20 and b < 100] } [a + b/3 > 100]
-----[results]-----
(300.asExpr() lt (lookup<Number>("b") + (lookup<Number>("a") * 3.asExpr()))) and ((lookup<Number>("a") gt 3.asExpr()) and (lookup<Number>("a") neq 100.asExpr())) and ((lookup<Number>("b") gt 20.asExpr()) and (lookup<Number>("b") lt 100.asExpr()))
-----[end]-----

-----[name]-----
creates queries from refinement expressions involving boolean expressions
-----[input]-----
particle Foo
  input: reads Something {uuid: Text, value: Number} [uuid == 'test-uuid']
-----[results]-----
(lookup<String>("uuid") eq "test-uuid".asExpr())
-----[end]-----

-----[name]-----
creates queries from refinement expressions involving text expressions
-----[input]-----
particle Foo
  input: reads Something {a: Number [ a > 3 and a != 100 ], b: Number [b > 20 and b < 100] } [a + b/3 > 100]
-----[results]-----
(300.asExpr() lt (lookup<Number>("b") + (lookup<Number>("a") * 3.asExpr()))) and ((lookup<Number>("a") gt 3.asExpr()) and (lookup<Number>("a") neq 100.asExpr())) and ((lookup<Number>("b") gt 20.asExpr()) and (lookup<Number>("b") lt 100.asExpr()))
-----[end]-----

-----[name]-----
creates queries where field refinement is null
-----[input]-----
particle Foo
  input: reads Something {a: Boolean, b: Boolean} [a and b]
-----[results]-----
(lookup<Boolean>("b") and lookup<Boolean>("a"))
-----[end]-----

-----[name]-----
creates queries where schema refinement is null
-----[input]-----
particle Foo
  input: reads Something {a: Boolean [not a], b: Boolean [b]}
-----[results]-----
(!lookup<Boolean>("a")) and lookup<Boolean>("b")
-----[end]-----

-----[name]-----
creates queries where there is no refinement
-----[input]-----
particle Foo
  input: reads Something {a: Boolean, b: Boolean}
-----[results]-----
true.asExpr()
-----[end]-----

-----[name]-----
escapes text in queries from refinement expressions
-----[input]-----
particle Foo
  input: reads Something {str: Text} [str == '\t\b\n\r\'\"$']
-----[results]-----
(lookup<String>("str") eq "\t\b\n\r\'\"\$".asExpr())
-----[end]-----

-----[name]-----
appropriately handles refinement built in function: now()
-----[input]-----
particle Foo
  input: reads Something {start: Instant} [start < now()]
-----[results]-----
(lookup<Number>("start") lt now())
-----[end]-----

-----[name]-----
appropriately handles refinement built in function: creationTime()
-----[input]-----
particle Foo
  input: reads Something {start: Long} [start < creationTime()]
-----[results]-----
(lookup<Number>("start") lt lookup<Number>("creationTime()"))
-----[end]-----

-----[name]-----
appropriately handles refinement built in function: expirationTime()
-----[input]-----
particle Foo
  input: reads Something {start: Long} [start < expirationTime()]
-----[results]-----
(lookup<Number>("start") lt lookup<Number>("expirationTime()"))
-----[end]-----
