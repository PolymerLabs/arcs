-----[header]-----
Kotlin Plan Generation - Particles

Expectations can be updated with:
$ ./tools/sigh updateCodegenUnitTests
-----[end_header]-----

-----[name]-----
reuses schemas generated for particles in handle connection types
-----[input]-----
particle A
  data: writes [Person Friend {a: Text, b: Text, c: Text}]

recipe R
  h: create
  A
    data: h
-----[results]-----
HandleConnection(
    R_Handle0,
    HandleMode.Write,
    arcs.core.data.CollectionType(arcs.core.data.EntityType(A_Data.SCHEMA)),
    emptyList()
)
-----[end]-----

-----[name]-----
generates schemas for resolved type variable collections
-----[input]-----
particle A
  data: writes [Person Friend {a: Text, b: Text, c: Text}]
particle B
  data: writes [Employer Person {a: Text, b: Text, d: Text}]
particle C
  data: reads [~a with {a: Text, b: Text}]

recipe R
  h: create
  A
    data: h
  B
    data: h
  C
    data: h
-----[results]-----
HandleConnection(
    R_Handle0,
    HandleMode.Write,
    arcs.core.data.CollectionType(arcs.core.data.EntityType(A_Data.SCHEMA)),
    emptyList()
)
-----[next]-----
HandleConnection(
    R_Handle0,
    HandleMode.Write,
    arcs.core.data.CollectionType(arcs.core.data.EntityType(B_Data.SCHEMA)),
    emptyList()
)
-----[next]-----
HandleConnection(
    R_Handle0,
    HandleMode.Read,
    arcs.core.data.CollectionType(
        arcs.core.data.EntityType(
            arcs.core.data.Schema(
                setOf(),
                arcs.core.data.SchemaFields(
                    singletons = mapOf(
                        "a" to arcs.core.data.FieldType.Text,
                        "b" to arcs.core.data.FieldType.Text
                    ),
                    collections = emptyMap()
                ),
                "2228d43340f80adae10eeb7c6a6fa4dac2d9a1be",
                refinementExpression = true.asExpr(),
                queryExpression = true.asExpr()
            )
        )
    ),
    emptyList()
)
-----[end]-----

-----[name]-----
generates schemas for resolved type variable singletons
-----[input]-----
particle A
  data: writes Person Friend {a: Text, b: Text, c: Text}
particle B
  data: writes Employer Person {a: Text, b: Text, d: Text}
particle C
  data: reads ~a with {a: Text, b: Text}

recipe R
  h: create
  A
    data: h
  B
    data: h
  C
    data: h
-----[results]-----
HandleConnection(
    R_Handle0,
    HandleMode.Write,
    arcs.core.data.SingletonType(arcs.core.data.EntityType(A_Data.SCHEMA)),
    emptyList()
)
-----[next]-----
HandleConnection(
    R_Handle0,
    HandleMode.Write,
    arcs.core.data.SingletonType(arcs.core.data.EntityType(B_Data.SCHEMA)),
    emptyList()
)
-----[next]-----
HandleConnection(
    R_Handle0,
    HandleMode.Read,
    arcs.core.data.SingletonType(
        arcs.core.data.EntityType(
            arcs.core.data.Schema(
                setOf(),
                arcs.core.data.SchemaFields(
                    singletons = mapOf(
                        "a" to arcs.core.data.FieldType.Text,
                        "b" to arcs.core.data.FieldType.Text
                    ),
                    collections = emptyMap()
                ),
                "2228d43340f80adae10eeb7c6a6fa4dac2d9a1be",
                refinementExpression = true.asExpr(),
                queryExpression = true.asExpr()
            )
        )
    ),
    emptyList()
)
-----[end]-----

-----[name]-----
parses Paxel expression on handle connections
-----[input]-----
particle Foo
  person: reads Person {name: Text}
  friend: writes Friend {nickname: Text} =
    new Friend {nickname: person.name}

recipe R
  a: create
  b: create
  Foo
    person: a
    friend: b
-----[results]-----
HandleConnection(
    R_Handle0,
    HandleMode.Write,
    arcs.core.data.SingletonType(arcs.core.data.EntityType(Foo_Friend.SCHEMA)),
    emptyList(),
    PaxelParser.parse("""new Friend {nickname: person.name}""")
)
-----[next]-----
HandleConnection(
    R_Handle1,
    HandleMode.Read,
    arcs.core.data.SingletonType(arcs.core.data.EntityType(Foo_Person.SCHEMA)),
    emptyList()
)
-----[end]-----
