[header]
Kotlin Handles Class Declarations

Expectations can be updated with:
$ ./tools/sigh updateCodegenUnitTests
[end_header]

[name]
single read handle
[input]
particle P
  h1: reads Person {name: Text}
[results]
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf("h1" to setOf(Person))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<Person> by handles
    }
[end]

[name]
conflicting schema names
[input]
particle P
  h1: reads Person {name: Text}
  h2: reads Person {age: Number}
[results]
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf("h1" to setOf(P_H1), "h2" to setOf(P_H2))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<P_H1> by handles
        val h2: arcs.sdk.ReadSingletonHandle<P_H2> by handles
    }
[end]

[name]
read, write and query handles
[input]
particle P
  h1: reads Person {name: Text}
  h2: writes Person {name: Text}
  h3: reads [Person {name: Text} [name == ?]]
[results]
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf("h1" to setOf(P_H1), "h2" to setOf(P_H2), "h3" to setOf(P_H3))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<P_H1> by handles
        val h2: arcs.sdk.WriteSingletonHandle<P_H2> by handles
        val h3: arcs.sdk.ReadQueryCollectionHandle<P_H3, String> by handles
    }
[end]

[name]
handle with references
[input]
particle P
  h1: reads Person {
    name: Text,
    home: &Accommodation {
      squareFootage: Number,
      address: &Address {
        streetAddress: Text,
        postCode: Text
      }
    }
  }
[results]
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf("h1" to setOf(Person))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<Person> by handles
    }
[end]

[name]
handle with a tuple
[input]
particle P
  h1: reads (
    &Person {name: Text},
    &Accommodation {squareFootage: Number},
    &Address {streetAddress: Text, postCode: Text}
  )
[results]
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf("h1" to setOf(Person, Accommodation, Address))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<
    arcs.core.entity.Tuple3<arcs.sdk.Reference<Person>, arcs.sdk.Reference<Accommodation>, arcs.sdk.Reference<Address>>
> by handles
    }
[end]

[name]
progressively constrained variable handles
[input]
particle T
  h1: reads ~a
  h2: writes ~a with {amt: Number}
  h3: reads writes ~a with {name: Text, age: Number}
[results]
class Handles : arcs.sdk.HandleHolderBase(
        "T",
        mapOf("h1" to setOf(T_H1), "h2" to setOf(T_H2), "h3" to setOf(T_H3))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<T_H1> by handles
        val h2: arcs.sdk.WriteSingletonHandle<T_H2> by handles
        val h3: arcs.sdk.ReadWriteSingletonHandle<T_H3> by handles
    }
[end]
