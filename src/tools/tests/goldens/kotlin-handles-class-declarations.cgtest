-----[header]-----
Kotlin Handles Class Declarations

Expectations can be updated with:
$ ./tools/sigh updateCodegenUnitTests
-----[end_header]-----

-----[name]-----
single read handle
-----[input]-----
particle P
  h1: reads Person {name: Text}
-----[results]-----
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf("h1" to setOf(Person))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<Person> by handles
    }
-----[end]-----

-----[name]-----
conflicting schema names
-----[input]-----
particle P
  h1: reads Person {name: Text}
  h2: reads Person {age: Number}
-----[results]-----
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf("h1" to setOf(P_H1), "h2" to setOf(P_H2))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<P_H1> by handles
        val h2: arcs.sdk.ReadSingletonHandle<P_H2> by handles
    }
-----[end]-----

-----[name]-----
read, write and query entity handles
-----[input]-----
particle P
  h1: reads Person {name: Text}
  h2: writes Person {name: Text}
  h3: reads writes Person {name: Text}

  h4: reads [Person {name: Text}]
  h5: writes [Person {name: Text}]
  h6: reads writes [Person {name: Text}]

  h7: reads [Person {name: Text} [name == ?]]
  h8: writes [Person {name: Text} [name == ?]]
  h9: reads writes [Person {name: Text} [name == ?]]
-----[results]-----
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf(
            "h1" to setOf(P_H1),
            "h2" to setOf(P_H2),
            "h3" to setOf(P_H3),
            "h4" to setOf(P_H4),
            "h5" to setOf(P_H5),
            "h6" to setOf(P_H6),
            "h7" to setOf(P_H7),
            "h8" to setOf(P_H8),
            "h9" to setOf(P_H9)
        )
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<P_H1> by handles
        val h2: arcs.sdk.WriteSingletonHandle<P_H2_Slice> by handles
        val h3: arcs.sdk.ReadWriteSingletonHandle<P_H3, P_H3_Slice> by handles
        val h4: arcs.sdk.ReadCollectionHandle<P_H4> by handles
        val h5: arcs.sdk.WriteCollectionHandle<P_H5_Slice> by handles
        val h6: arcs.sdk.ReadWriteCollectionHandle<P_H6, P_H6_Slice> by handles
        val h7: arcs.sdk.ReadQueryCollectionHandle<P_H7, String> by handles
        val h8: arcs.sdk.WriteQueryCollectionHandle<P_H8_Slice, String> by handles
        val h9: arcs.sdk.ReadWriteQueryCollectionHandle<P_H9, P_H9_Slice, String> by handles
    }
-----[end]-----

-----[name]-----
read and write reference handles
-----[input]-----
particle P
  h1: reads &{name: Text}
  h2: writes &{name: Text}
  h3: reads writes &{name: Text}

  h4: reads [&{name: Text}]
  h5: writes [&{name: Text}]
  h6: reads writes [&{name: Text}]
-----[results]-----
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf(
            "h1" to setOf(PInternal1),
            "h2" to setOf(PInternal1),
            "h3" to setOf(PInternal1),
            "h4" to setOf(PInternal1),
            "h5" to setOf(PInternal1),
            "h6" to setOf(PInternal1)
        )
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<arcs.sdk.Reference<PInternal1>> by handles
        val h2: arcs.sdk.WriteSingletonHandle<arcs.sdk.Reference<PInternal1>> by handles
        val h3: arcs.sdk.ReadWriteSingletonHandle<arcs.sdk.Reference<PInternal1>, arcs.sdk.Reference<PInternal1>> by handles
        val h4: arcs.sdk.ReadCollectionHandle<arcs.sdk.Reference<PInternal1>> by handles
        val h5: arcs.sdk.WriteCollectionHandle<arcs.sdk.Reference<PInternal1>> by handles
        val h6: arcs.sdk.ReadWriteCollectionHandle<arcs.sdk.Reference<PInternal1>, arcs.sdk.Reference<PInternal1>> by handles
    }
-----[end]-----

-----[name]-----
handle with references
-----[input]-----
particle P
  h1: reads Person {
    name: Text,
    home: &Accommodation {
      squareFootage: Number,
      address: &Address {
        streetAddress: Text,
        postCode: Text
      }
    }
  }
-----[results]-----
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf("h1" to setOf(Person))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<Person> by handles
    }
-----[end]-----

-----[name]-----
handle with a tuple
-----[input]-----
particle P
  h1: reads writes (
    &Person {name: Text},
    &Accommodation {squareFootage: Number},
    Address {streetAddress: Text, postCode: Text}
  )
-----[results]-----
class Handles : arcs.sdk.HandleHolderBase(
        "P",
        mapOf("h1" to setOf(Person, Accommodation, Address))
    ) {
        val h1: arcs.sdk.ReadWriteSingletonHandle<
    arcs.core.entity.Tuple3<arcs.sdk.Reference<Person>, arcs.sdk.Reference<Accommodation>, Address>,
    arcs.core.entity.Tuple3<arcs.sdk.Reference<Person>, arcs.sdk.Reference<Accommodation>, AddressSlice>
> by handles
    }
-----[end]-----

-----[name]-----
progressively constrained variable handles
-----[input]-----
particle T
  h1: reads ~a
  h2: writes ~a with {amt: Number}
  h3: reads writes ~a with {name: Text, age: Number}
-----[results]-----
class Handles : arcs.sdk.HandleHolderBase(
        "T",
        mapOf("h1" to setOf(T_H1), "h2" to setOf(T_H2), "h3" to setOf(T_H3))
    ) {
        val h1: arcs.sdk.ReadSingletonHandle<T_H1> by handles
        val h2: arcs.sdk.WriteSingletonHandle<T_H2_Slice> by handles
        val h3: arcs.sdk.ReadWriteSingletonHandle<T_H3, T_H3_Slice> by handles
    }
-----[end]-----
