-----[header]-----
Kotlin Schema Generation

Expectations can be updated with:
$ ./tools/sigh updateCodegenUnitTests
-----[end_header]-----

-----[name]-----
generates empty schema
-----[input]-----
particle P
  h1: reads {}
-----[results]-----
arcs.core.data.Schema.EMPTY
-----[end]-----

-----[name]-----
generates a schema with multiple names
-----[input]-----
particle P
  h1: reads Person Friend Parent {}
-----[results]-----
arcs.core.data.Schema(
    setOf(
    arcs.core.data.SchemaName("Person"),
    arcs.core.data.SchemaName("Friend"),
    arcs.core.data.SchemaName("Parent")
),
    arcs.core.data.SchemaFields(
        singletons = emptyMap(),
        collections = emptyMap()
    ),
    "af9927bce7e5dedef7877e6a81df9d87d5a412d3",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
generates a schema with primitive fields
-----[input]-----
particle P
  h1: reads Person {name: Text, age: Number, friendNames: [Text]}
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Person")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "name" to arcs.core.data.FieldType.Text,
            "age" to arcs.core.data.FieldType.Number
        ),
        collections = mapOf("friendNames" to arcs.core.data.FieldType.Text)
    ),
    "02875f13260de54ccd1dae50582a65feb7da921a",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
generates a schema with Kotlin types
-----[input]-----
particle P
  h1: reads Data {
    bt: Byte,
    shrt: Short,
    nt: Int,
    lng: Long,
    chr: Char,
    flt: Float,
    dbl: Double,
    bi: BigInt,
    inst: Instant,
    dur: Duration,
  }
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Data")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "bt" to arcs.core.data.FieldType.Byte,
            "shrt" to arcs.core.data.FieldType.Short,
            "nt" to arcs.core.data.FieldType.Int,
            "lng" to arcs.core.data.FieldType.Long,
            "chr" to arcs.core.data.FieldType.Char,
            "flt" to arcs.core.data.FieldType.Float,
            "dbl" to arcs.core.data.FieldType.Double,
            "bi" to arcs.core.data.FieldType.BigInt,
            "inst" to arcs.core.data.FieldType.Instant,
            "dur" to arcs.core.data.FieldType.Duration
        ),
        collections = emptyMap()
    ),
    "d2595c159a3537931c9e3981fbad224e2875970d",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
generates a schema with lists of primitive fields
-----[input]-----
particle P
  h1: reads Person {names: List<Text>, favNumbers: List<Number>}
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Person")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "names" to arcs.core.data.FieldType.ListOf(arcs.core.data.FieldType.Text),
            "favNumbers" to arcs.core.data.FieldType.ListOf(arcs.core.data.FieldType.Number)
        ),
        collections = emptyMap()
    ),
    "4cc315c84282f9001422973369ff2b52d461080c",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
generates schemas for a reference
-----[input]-----
particle P
  h1: reads Person {address: &Address {streetAddress: Text}}
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Person")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "address" to arcs.core.data.FieldType.EntityRef("49e02f34cdd2f418f88b3f327fab919b072276c4")
        ),
        collections = emptyMap()
    ),
    "07cb330c47db1ac9f13eb92addaf1cafa452d55c",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Address")),
    arcs.core.data.SchemaFields(
        singletons = mapOf("streetAddress" to arcs.core.data.FieldType.Text),
        collections = emptyMap()
    ),
    "49e02f34cdd2f418f88b3f327fab919b072276c4",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
generates schemas for a collection of references
-----[input]-----
particle P
  h1: reads Person {address: [&Address {streetAddress: Text}]}
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Person")),
    arcs.core.data.SchemaFields(
        singletons = emptyMap(),
        collections = mapOf(
            "address" to arcs.core.data.FieldType.EntityRef("49e02f34cdd2f418f88b3f327fab919b072276c4")
        )
    ),
    "b128a31d27670898591516aff0c78796956d3f29",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Address")),
    arcs.core.data.SchemaFields(
        singletons = mapOf("streetAddress" to arcs.core.data.FieldType.Text),
        collections = emptyMap()
    ),
    "49e02f34cdd2f418f88b3f327fab919b072276c4",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
generates schemas for a nested entity
-----[input]-----
particle P
  h1: reads Person {address: inline Address {streetAddress: Text}}
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Person")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "address" to arcs.core.data.FieldType.InlineEntity("49e02f34cdd2f418f88b3f327fab919b072276c4")
        ),
        collections = emptyMap()
    ),
    "319b13f3e4791563769cb73b4325e021dda73d08",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Address")),
    arcs.core.data.SchemaFields(
        singletons = mapOf("streetAddress" to arcs.core.data.FieldType.Text),
        collections = emptyMap()
    ),
    "49e02f34cdd2f418f88b3f327fab919b072276c4",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[require]-----
results[0].match(/InlineEntity\("([a-f0-9]+)"\)/)[1] == results[1].match(/\n *"([a-f0-9]+)",\n/m)[1];
-----[end]-----

-----[name]-----
generates schemas for a nested entity referencing an external schema
-----[input]-----
schema External
  name: Text

particle P
  h1: reads Thing {
    other: inline External
  }
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Thing")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "other" to arcs.core.data.FieldType.InlineEntity("7903e19cf5c4d79450f55d46a49fc0d30e474f61")
        ),
        collections = emptyMap()
    ),
    "0ffde0a68a76019b85af30e9d48f8ac0b987424f",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("External")),
    arcs.core.data.SchemaFields(
        singletons = mapOf("name" to arcs.core.data.FieldType.Text),
        collections = emptyMap()
    ),
    "7903e19cf5c4d79450f55d46a49fc0d30e474f61",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[require]-----
results[0].match(/InlineEntity\("([a-f0-9]+)"\)/)[1] == results[1].match(/\n *"([a-f0-9]+)",\n/m)[1];
-----[end]-----

-----[name]-----
generates schemas for a double nested entity
-----[input]-----
particle P
  h1: reads Person {
    address: inline Address {
      streetAddress: Text,
      city: inline City {name: Text}
    }
  }
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Person")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "address" to arcs.core.data.FieldType.InlineEntity("6ec719089db997234de1fd0177a5c2a0772548ef")
        ),
        collections = emptyMap()
    ),
    "4974ed33f92e227be84924b50e3e5ea8942b589a",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Address")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "streetAddress" to arcs.core.data.FieldType.Text,
            "city" to arcs.core.data.FieldType.InlineEntity("1161dd3e1964193b92f029b0caca748c3a7360f3")
        ),
        collections = emptyMap()
    ),
    "6ec719089db997234de1fd0177a5c2a0772548ef",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("City")),
    arcs.core.data.SchemaFields(
        singletons = mapOf("name" to arcs.core.data.FieldType.Text),
        collections = emptyMap()
    ),
    "1161dd3e1964193b92f029b0caca748c3a7360f3",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[require]-----
results[0].match(/InlineEntity\("([a-f0-9]+)"\)/)[1] == results[1].match(/\n *"([a-f0-9]+)",\n/m)[1];
results[1].match(/InlineEntity\("([a-f0-9]+)"\)/)[1] == results[2].match(/\n *"([a-f0-9]+)",\n/m)[1];
-----[end]-----

-----[name]-----
generates a schema with a refinement
-----[input]-----
particle P
  h1: reads Person {name: Text, age: Number} [age >= 21]
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Person")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "name" to arcs.core.data.FieldType.Text,
            "age" to arcs.core.data.FieldType.Number
        ),
        collections = emptyMap()
    ),
    "16dbea0a3ed84f178d3bcba2286f36aa249f1618",
    refinementExpression =         ((lookup<Number>("age") gt 21.asExpr()) or (lookup<Number>("age") eq 21.asExpr())),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
generates a schema with a query
-----[input]-----
particle P
  h1: reads Person {name: Text, age: Number} [age >= ?]
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Person")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "name" to arcs.core.data.FieldType.Text,
            "age" to arcs.core.data.FieldType.Number
        ),
        collections = emptyMap()
    ),
    "16dbea0a3ed84f178d3bcba2286f36aa249f1618",
    refinementExpression = true.asExpr(),
    queryExpression =         ((lookup<Number>("age") gt query<Number>("queryArgument")) or (lookup<Number>("age") eq query<Number>("queryArgument")))
)
-----[end]-----

-----[name]-----
generates schemas for a tuple connection
-----[input]-----
particle P
  h1: reads (&Person {name: Text}, &Product {sku: Text})
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Person")),
    arcs.core.data.SchemaFields(
        singletons = mapOf("name" to arcs.core.data.FieldType.Text),
        collections = emptyMap()
    ),
    "347c92d970a845a1db6299bdeb8c34be1766067b",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Product")),
    arcs.core.data.SchemaFields(
        singletons = mapOf("sku" to arcs.core.data.FieldType.Text),
        collections = emptyMap()
    ),
    "30f90b49d6d9833ab0378df44e034766d2fcaab9",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
Hard reference annotation.
-----[input]-----
schema Package
schema Thing
    apppackage: &Package @hardRef
particle T
  h1: reads Thing
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Thing")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "apppackage" to arcs.core.data.FieldType.EntityRef("99f5f734da8e5d5bcf2fb14dbce79aaf15478f34", listOf(Annotation("hardRef", emptyMap())))
        ),
        collections = emptyMap()
    ),
    "d355c0ea4fa0cfc5bae39cc1ef6d4d05017cb928",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Package")),
    arcs.core.data.SchemaFields(
        singletons = emptyMap(),
        collections = emptyMap()
    ),
    "99f5f734da8e5d5bcf2fb14dbce79aaf15478f34",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
Hard reference annotation on collection fields.
-----[input]-----
schema Package
schema Thing
    apppackage: [&Package] @hardRef
particle T
  h1: reads Thing
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Thing")),
    arcs.core.data.SchemaFields(
        singletons = emptyMap(),
        collections = mapOf(
            "apppackage" to arcs.core.data.FieldType.EntityRef("99f5f734da8e5d5bcf2fb14dbce79aaf15478f34", listOf(Annotation("hardRef", emptyMap())))
        )
    ),
    "1189933bc2c1fc1c3d46a9e74a712abc2a1c1712",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Package")),
    arcs.core.data.SchemaFields(
        singletons = emptyMap(),
        collections = emptyMap()
    ),
    "99f5f734da8e5d5bcf2fb14dbce79aaf15478f34",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----

-----[name]-----
Hard reference annotation on list fields.
-----[input]-----
schema Package
schema Thing
    apppackage: List<&Package> @hardRef
particle T
  h1: reads Thing
-----[results]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Thing")),
    arcs.core.data.SchemaFields(
        singletons = mapOf(
            "apppackage" to arcs.core.data.FieldType.ListOf(arcs.core.data.FieldType.EntityRef("99f5f734da8e5d5bcf2fb14dbce79aaf15478f34", listOf(Annotation("hardRef", emptyMap()))))
        ),
        collections = emptyMap()
    ),
    "b9565e2e3c9c2ca38920a8074ba440caa6d192e6",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[next]-----
arcs.core.data.Schema(
    setOf(arcs.core.data.SchemaName("Package")),
    arcs.core.data.SchemaFields(
        singletons = emptyMap(),
        collections = emptyMap()
    ),
    "99f5f734da8e5d5bcf2fb14dbce79aaf15478f34",
    refinementExpression = true.asExpr(),
    queryExpression = true.asExpr()
)
-----[end]-----
