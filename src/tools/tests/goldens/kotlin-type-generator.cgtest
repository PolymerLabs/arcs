-----[header]-----
Kotlin Type Generation

Expectations can be updated with:
$ ./tools/sigh updateCodegenUnitTests
-----[end_header]-----

-----[name]-----
generates an entity type
-----[input]-----
particle Module
  data: reads {count: Number}
-----[results]-----
arcs.core.data.EntityType(
    arcs.core.data.Schema(
        setOf(),
        arcs.core.data.SchemaFields(
            singletons = mapOf("count" to arcs.core.data.FieldType.Number),
            collections = emptyMap()
        ),
        "8b6960f4292158f9030013e5ea375a189ae6d349",
        refinementExpression = true.asExpr(),
        queryExpression = true.asExpr()
    )
)
-----[end]-----

-----[name]-----
generates a collection of entities
-----[input]-----
particle Module
  data: reads [Thing {name: Text}]
-----[results]-----
arcs.core.data.CollectionType(
    arcs.core.data.EntityType(
        arcs.core.data.Schema(
            setOf(arcs.core.data.SchemaName("Thing")),
            arcs.core.data.SchemaFields(
                singletons = mapOf("name" to arcs.core.data.FieldType.Text),
                collections = emptyMap()
            ),
            "503ee2172e4a0ec16b2c7245ae8b7dd30fe9315b",
            refinementExpression = true.asExpr(),
            queryExpression = true.asExpr()
        )
    )
)
-----[end]-----

-----[name]-----
generates a reference type
-----[input]-----
particle Module
  data: reads &Thing {name: Text}
-----[results]-----
arcs.core.data.ReferenceType(
    arcs.core.data.EntityType(
        arcs.core.data.Schema(
            setOf(arcs.core.data.SchemaName("Thing")),
            arcs.core.data.SchemaFields(
                singletons = mapOf("name" to arcs.core.data.FieldType.Text),
                collections = emptyMap()
            ),
            "503ee2172e4a0ec16b2c7245ae8b7dd30fe9315b",
            refinementExpression = true.asExpr(),
            queryExpression = true.asExpr()
        )
    )
)
-----[end]-----
