#ifndef _ARCS_ENTITY_CLASS_H
#define _ARCS_ENTITY_CLASS_H

// This is a reference for the entity classes generated by schema2pkg, based on the schema:
//
// schema Data
//   Number num
//   Text txt
//   URL lnk
//   Boolean flg

namespace arcs {

class Data {
public:
  // Entities must be copied with arcs::clone_entity(), which will exclude the internal id.
  // Move operations are ok (and will include the internal id).
  Data() = default;
  Data(Data&&) = default;
  Data& operator=(Data&&) = default;

  double num() const { return num_; }
  void set_num(double value) { num_ = value; num_valid_ = true; }
  void clear_num() { num_ = double(); num_valid_ = false; }
  bool has_num() const { return num_valid_; }

  const std::string& txt() const { return txt_; }
  void set_txt(const std::string& value) { txt_ = value; txt_valid_ = true; }
  void clear_txt() { txt_ = std::string(); txt_valid_ = false; }
  bool has_txt() const { return txt_valid_; }

  const URL& lnk() const { return lnk_; }
  void set_lnk(const URL& value) { lnk_ = value; lnk_valid_ = true; }
  void clear_lnk() { lnk_ = URL(); lnk_valid_ = false; }
  bool has_lnk() const { return lnk_valid_; }

  bool flg() const { return flg_; }
  void set_flg(bool value) { flg_ = value; flg_valid_ = true; }
  void clear_flg() { flg_ = bool(); flg_valid_ = false; }
  bool has_flg() const { return flg_valid_; }

  // Equality ops compare internal ids and all data fields.
  // Use arcs::fields_equal() to compare only the data fields.
  bool operator==(const Data& other) const;
  bool operator!=(const Data& other) const { return !(*this == other); }

  // For STL containers.
  friend bool operator<(const Data& a, const Data& b) {
    int cmp = a._internal_id_.compare(b._internal_id_);
    if (cmp != 0) return cmp < 0;
    if (a.num_valid_ != b.num_valid_) {
      return !a.num_valid_;
    } else if (a.num_ != b.num_) {
      return a.num_ < b.num_;
    }
    if (a.txt_valid_ != b.txt_valid_) {
      return !a.txt_valid_;
    } else {
      cmp = a.txt_.compare(b.txt_);
      if (cmp != 0) return cmp < 0;
    }
    if (a.lnk_valid_ != b.lnk_valid_) {
      return !a.lnk_valid_;
    } else {
      cmp = a.lnk_.compare(b.lnk_);
      if (cmp != 0) return cmp < 0;
    }
    if (a.flg_valid_ != b.flg_valid_) {
      return !a.flg_valid_;
    } else if (a.flg_ != b.flg_) {
      return a.flg_ < b.flg_;
    };
    return false;
  }

private:
  // Allow private copying for use in Handles.
  Data(const Data&) = default;
  Data& operator=(const Data&) = default;

  double num_ = double();
  bool num_valid_ = false;

  std::string txt_ = std::string();
  bool txt_valid_ = false;

  URL lnk_ = URL();
  bool lnk_valid_ = false;

  bool flg_ = bool();
  bool flg_valid_ = false;

  std::string _internal_id_;
  static const int _FIELD_COUNT = 4;

  friend class Singleton<Data>;
  friend class Collection<Data>;
  friend class internal::Accessor;
};

template<>
inline Data internal::Accessor::clone_entity(const Data& entity) {
  Data clone;
  clone.num_ = entity.num_;
  clone.num_valid_ = entity.num_valid_;
  clone.txt_ = entity.txt_;
  clone.txt_valid_ = entity.txt_valid_;
  clone.lnk_ = entity.lnk_;
  clone.lnk_valid_ = entity.lnk_valid_;
  clone.flg_ = entity.flg_;
  clone.flg_valid_ = entity.flg_valid_;
  return clone;
}

template<>
inline size_t internal::Accessor::hash_entity(const Data& entity) {
  size_t h = 0;
  internal::hash_combine(h, entity._internal_id_);
  if (entity.num_valid_)
    internal::hash_combine(h, entity.num_);
  if (entity.txt_valid_)
    internal::hash_combine(h, entity.txt_);
  if (entity.lnk_valid_)
    internal::hash_combine(h, entity.lnk_);
  if (entity.flg_valid_)
    internal::hash_combine(h, entity.flg_);
  return h;
}

template<>
inline bool internal::Accessor::fields_equal(const Data& a, const Data& b) {
  return (a.num_valid_ ? (b.num_valid_ && a.num_ == b.num_) : !b.num_valid_) &&
         (a.txt_valid_ ? (b.txt_valid_ && a.txt_ == b.txt_) : !b.txt_valid_) &&
         (a.lnk_valid_ ? (b.lnk_valid_ && a.lnk_ == b.lnk_) : !b.lnk_valid_) &&
         (a.flg_valid_ ? (b.flg_valid_ && a.flg_ == b.flg_) : !b.flg_valid_);
}

inline bool Data::operator==(const Data& other) const {
  return _internal_id_ == other._internal_id_ && fields_equal(*this, other);
}

template<>
inline std::string internal::Accessor::entity_to_str(const Data& entity, const char* join) {
  internal::StringPrinter printer;
  printer.addId(entity._internal_id_);
  if (entity.num_valid_)
    printer.add("num: ", entity.num_);
  if (entity.txt_valid_)
    printer.add("txt: ", entity.txt_);
  if (entity.lnk_valid_)
    printer.add("lnk: ", entity.lnk_);
  if (entity.flg_valid_)
    printer.add("flg: ", entity.flg_);
  return printer.result(join);
}

template<>
inline void internal::Accessor::decode_entity(Data* entity, const char* str) {
  if (str == nullptr) return;
  internal::StringDecoder decoder(str);
  decoder.decode(entity->_internal_id_);
  decoder.validate("|");
  for (int i = 0; !decoder.done() && i < Data::_FIELD_COUNT; i++) {
    std::string name = decoder.upTo(':');
    if (0) {
    } else if (name == "num") {
      decoder.validate("N");
      decoder.decode(entity->num_);
      entity->num_valid_ = true;
    } else if (name == "txt") {
      decoder.validate("T");
      decoder.decode(entity->txt_);
      entity->txt_valid_ = true;
    } else if (name == "lnk") {
      decoder.validate("U");
      decoder.decode(entity->lnk_);
      entity->lnk_valid_ = true;
    } else if (name == "flg") {
      decoder.validate("B");
      decoder.decode(entity->flg_);
      entity->flg_valid_ = true;
    }
    decoder.validate("|");
  }
}

template<>
inline std::string internal::Accessor::encode_entity(const Data& entity) {
  internal::StringEncoder encoder;
  encoder.encode("", entity._internal_id_);
  if (entity.num_valid_)
    encoder.encode("num:N", entity.num_);
  if (entity.txt_valid_)
    encoder.encode("txt:T", entity.txt_);
  if (entity.lnk_valid_)
    encoder.encode("lnk:U", entity.lnk_);
  if (entity.flg_valid_)
    encoder.encode("flg:B", entity.flg_);
  return encoder.result();
}

}  // namespace arcs

// For STL unordered associative containers. Entities will need to be std::move()-inserted.
template<>
struct std::hash<arcs::Data> {
  size_t operator()(const arcs::Data& entity) const {
    return arcs::hash_entity(entity);
  }
};

#endif
