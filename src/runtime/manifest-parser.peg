/**
 * @license
 * Copyright (c) 2017 Google Inc. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * Code distributed by Google as part of this project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

// WARNING: To ensure that the typechecking is valid the types and the list of
// checked parsers must be kept up to date.
// These can be found in src/runtime/manifest-ast-nodes.ts.
// Pegjs (with ts-pegjs) use these to transpile this file into TypeScript in
// src/gen/runtime/manifest-parser.ts and then into JavaScript in
// build/gen/runtime/manifest-parser.js.
//
// TODO(jopra): Remove this requirement (i.e. autogenerate the list of types).

{
  let indent = '';
  let startIndent = '';
  const indents: string[] = [];

  const preSlandlesSyntaxLocations = [];

  const emptyRef = () => ({kind: 'handle-ref', id: null, name: null, tags: [], location: location()}) as AstNode.HandleRef;

  function extractIndented(items) {
    return items[1].map(item => item[1]);
  }
  function optional<S, R>(result: S, extract: (source: S) => R, defaultValue: R): R {
    if (result !== null) {
      const value = extract(result);
      if (value !== null) {
        return value;
      }
    }
    return defaultValue === null ? null : defaultValue;
  }
  function checkNormal(result, path: string = '') {
    if (['string', 'number', 'boolean'].includes(typeof result) || result === null) {
      return;
    }
    if (result === undefined) {
      error(`Internal Parser Error: result was undefined at ${path}`);
    }
    if (Array.isArray(result)) {
      let i = 0;
      for (const item of result) {
        checkNormal(item, `${path}/${i}`);
        i++;
      }
      return;
    }
    if (result.model) {
      error(`Internal Parser Error: unexpected 'model' in ${JSON.stringify(result)} at ${path}`);
    }
    if (!result.location) {
      error(`Internal Parser Error: no 'location' in ${JSON.stringify(result)} at ${path}`);
    }
    if (!result.kind) {
      error(`Internal Parser Error: no 'kind' in ${JSON.stringify(result)} at ${path}`);
    }
    for (const key of Object.keys(result)) {
      if (['location', 'kind'].includes(key)) {
        continue;
      }
      checkNormal(result[key], `${path}/${key}`);
    }
  }

  function toAstNode<T extends {location: IFileRange} & Omit<T, 'location'>>(data: Omit<T, 'location'>): T {
    return {...data, location: location()} as T;
  }

  function requireUsePreSlandleSyntax(tag: number) {
    if (!Flags.parseBothSyntaxes && !Flags.defaultToPreSlandlesSyntax) {
      error(`using pre slandles syntax (disabled by flag) #${tag}`);
    }
    preSlandlesSyntaxLocations.push(location());
  }

  function requireUsePostSlandleSyntax(tag: number) {
    if (!Flags.parseBothSyntaxes && Flags.defaultToPreSlandlesSyntax) {
      error(`using post slandles syntax (disabled by flag) #${tag}`);
    }
  }

  function buildInterfaceArgument(name: string, direction: AstNode.Direction, type: AstNode.ParticleHandleConnectionType) {
    requireUsePostSlandleSyntax(2);
    if (direction === 'host') {
      error(`Interface cannot have arguments with a 'host' direction.`);
    }
    return toAstNode<AstNode.InterfaceArgument>({
      kind: 'interface-argument',
      direction,
      type,
      name
    });
  }
}

Manifest
  = eolWhiteSpace? Indent? items:(Annotation SameIndent ManifestItem)*
  {
    const result: AstNode.ManifestItem[] = items.map(item => {
      const annotations = item[0];
      const manifestItem = item[2];
      manifestItem.triggers = annotations.triggerSet;
      manifestItem.annotation = annotations.simpleAnnotation;
      return manifestItem;
    });
    checkNormal(result);
    if (preSlandlesSyntaxLocations.length > 0 && !Flags.defaultToPreSlandlesSyntax) {
      if (typeof global !== 'undefined' && !global['testFlags'].quiet) {
        console.warn('WARNING: Pre-Slandles Syntax is deprecated. Contact jopra@google.com for more information.');
        console.warn(`WARNING: Used in \n  ${
          preSlandlesSyntaxLocations.map(loc => `line ${loc.start.line} column ${loc.start.column}`).join("\n  ")
        }`);
      }
    }
    return result;
  }

ManifestItem
  = RecipeNode
  / Particle
  / Import
  / Schema
  / SchemaAlias
  / ManifestStorage
  / Interface
  / Meta
  / Resource

Annotation = triggerSet:(SameIndent Trigger eolWhiteSpace)* simpleAnnotation:(SameIndent SimpleAnnotation eolWhiteSpace)?
  {
    return toAstNode<AstNode.Annotation>({
      kind: 'annotation',
      triggerSet: triggerSet.map(trigger => trigger[1]),
      simpleAnnotation: optional(simpleAnnotation, s => s[1], null),
    });
  }

Trigger "a trigger for a recipe"
  = '@trigger' eolWhiteSpace Indent pairs:(eolWhiteSpace? SameIndent simpleName whiteSpace dottedName)+ {
  return pairs.map(pair => {
    return [pair[2], pair[4]];
  });
}


SimpleAnnotation "an annotation (e.g. @foo)"
  = '@' annotation:lowerIdent { return annotation; }

Resource = 'resource' whiteSpace name:upperIdent eolWhiteSpace Indent SameIndent ResourceStart body:ResourceBody eolWhiteSpace? {
  return toAstNode<AstNode.Resource>({
    kind: 'resource',
    name,
    data: body
  });
}

ResourceStart = 'start' eol { startIndent = indent; }

ResourceBody = lines:(SameOrMoreIndent ResourceLine)+ {
  return lines.map(line => line[0].substring(startIndent.length) + line[1]).join('');
}

ResourceLine = [^\n]* eol { return text(); }

// TODO: Entity syntax.
ManifestStorage
  = 'store' whiteSpace name:upperIdent whiteSpace 'of' whiteSpace type:ManifestStorageType id:(whiteSpace id)? originalId:('!!' id)?
    version:(whiteSpace Version)? tags:(whiteSpace TagList)? whiteSpace source:ManifestStorageSource eolWhiteSpace
    items:(Indent (SameIndent ManifestStorageItem)+)?
  {
    items = optional(items, extractIndented, []);
    let description: string | null = null;
    let claim: AstNode.ManifestStorageClaim | null = null;

    for (const item of items) {
      if (item[0] === 'description') {
        if (description) {
          error('You cannot provide more than one description.');
        }
        description = item[2];
      } else if (item['kind'] === 'manifest-storage-claim') {
        if (claim) {
          error('You cannot provide more than one claim.');
        }
        claim = item;
      } else {
        error(`Unknown ManifestStorageItem: ${item}`);
      }
    }

    return toAstNode<AstNode.ManifestStorage>({
      kind: 'store',
      name,
      type,
      id: optional(id, id => id[1], null),
      originalId: optional(originalId, originalId => originalId[1], null),
      version: optional(version, version => version[1], null),
      tags: optional(tags, tags => tags[1], null),
      source: source.source,
      origin: source.origin,
      storageKey: source['storageKey'] || null,
      description,
      claim,
    });
  }

ManifestStorageType
  = SchemaInline / SingletonType / CollectionType / BigCollectionType / TypeName

ManifestStorageSource
  = ManifestStorageFileSource / ManifestStorageResourceSource / ManifestStorageStorageSource

ManifestStorageFileSource
  = 'in' whiteSpace source:id { return toAstNode<AstNode.ManifestStorageFileSource>({kind: 'manifest-storage-source', origin: 'file', source }); }

ManifestStorageResourceSource
  = 'in' whiteSpace source:upperIdent storageKey:(whiteSpace 'at' whiteSpace id)?
  {
    return toAstNode<AstNode.ManifestStorageResourceSource>({
      kind: 'manifest-storage-source',
      origin: 'resource',
      source,
      storageKey: optional(storageKey, sk => sk[3], null)
    });
  }

ManifestStorageStorageSource
  = 'at' whiteSpace source:id { return toAstNode<AstNode.ManifestStorageStorageSource>({kind: 'manifest-storage-source', origin: 'storage', source }); }

ManifestStorageItem
  = ManifestStorageDescription
  / ManifestStorageClaim

ManifestStorageDescription
  = 'description' whiteSpace backquotedString eolWhiteSpace

ManifestStorageClaim
  = 'claim' whiteSpace 'is' whiteSpace tag:lowerIdent rest:(whiteSpace 'and' whiteSpace 'is' whiteSpace lowerIdent)* eolWhiteSpace
  {
    return toAstNode<AstNode.ManifestStorageClaim>({
      kind: 'manifest-storage-claim',
      tags: [tag, ...rest.map(item => item[5])],
    });
  }

Import
  = 'import' whiteSpace path:id eolWhiteSpace
  {
    return toAstNode<AstNode.Import>({
      kind: 'import',
      path,
    });
  }

Interface "an interface"
  = 'interface' whiteSpace name:upperIdent typeVars:(whiteSpace? '<' whiteSpace? TypeVariableList whiteSpace? '>')? eolWhiteSpace items:(Indent (SameIndent InterfaceItem)*)? eolWhiteSpace?
  {
    return toAstNode<AstNode.Interface>({
      kind: 'interface',
      name,
      args: optional(items, extractIndented, []).filter(item => item.kind === 'interface-argument'),
      slots: optional(items, extractIndented, []).filter(item => item.kind === 'interface-slot'),
    });
  }

InterfaceItem
  = InterfaceSlot
  / InterfaceArgument

InterfaceArgument
  = InterfaceArgumentUnified
  / InterfaceArgumentPreSlandlesSyntax

InterfaceArgumentPreSlandlesSyntax
  = direction:(DirectionPreSlandles whiteSpace)? type:(ParticleHandleConnectionType whiteSpace)? name:(lowerIdent / '*') eolWhiteSpace
  {
    requireUsePreSlandleSyntax(1);
    direction = optional(direction, dir => dir[0], 'any');
    if (direction === 'host') {
      error(`Interface cannot have arguments with a 'host' direction.`);
    }
    return toAstNode<AstNode.InterfaceArgument>({
      kind: 'interface-argument',
      direction,
      type: optional(type, ty => ty[0], null),
      name,
    });
  }

InterfaceArgumentUnified
  = name:NameWithColon direction:DirectionUnified? type:(whiteSpace? ParticleHandleConnectionType)? eolWhiteSpace
  { return buildInterfaceArgument(name, direction || 'any', optional(type, t => t[1], null)); }
  / direction:DirectionUnified type:(whiteSpace? ParticleHandleConnectionType)? eolWhiteSpace
  { return buildInterfaceArgument('*', direction || 'any', optional(type, t => t[1], null)); }
  / type:(whiteSpace? ParticleHandleConnectionType) eolWhiteSpace
  { return buildInterfaceArgument('*', 'any', type); }

InterfaceSlot
  = InterfaceSlotPreSlandles
  / InterfaceSlotUnified


InterfaceSlotPreSlandles
  = isRequired:('must' whiteSpace)? direction:('consume' / 'provide') isSet:(whiteSpace 'set of')? name:(whiteSpace lowerIdent)? eolWhiteSpace
  {
    requireUsePreSlandleSyntax(3);
    return toAstNode<AstNode.InterfaceSlot>({
      kind: 'interface-slot',
      name: optional(name, isRequired => name[1], null),
      isRequired: optional(isRequired, isRequired => isRequired[0] === 'must', false),
      direction,
      isSet: !!isSet,
    });
  }

InterfaceSlotUnified
  = name:NameWithColon? direction:('consumes' / 'provides') isOptional:'?'? type:(whiteSpace SlandleType)? eolWhiteSpace
  {
    requireUsePostSlandleSyntax(4);
    let isSet = false;
    if (type) {
      type = type[1]; // remove the whitespace.
      isSet = type.isSet;
      type.fields.forEach(({name, value}) => {
        error(`interface slots do not currently support fields`);
      });
    }
    if (direction === 'consumes') {
      direction = 'consume';
    }
    if (direction === 'provides') {
      direction = 'provide';
    }
    return toAstNode<AstNode.InterfaceSlot>({
      kind: 'interface-slot',
      name,
      isRequired: !isOptional,
      direction,
      isSet,
    });
  }

Meta
  = 'meta' eolWhiteSpace items:(Indent (SameIndent MetaItem)*)? eolWhiteSpace?
{
  items = items ? extractIndented(items): [];
  return toAstNode<AstNode.Meta>({kind: 'meta', items: items});
}

MetaItem = MetaStorageKey / MetaName

MetaName = 'name' whiteSpace? ':' whiteSpace? name:id eolWhiteSpace
{
  return toAstNode<AstNode.MetaName>({ key: 'name', value: name, kind: 'name' });
}

MetaStorageKey = 'storageKey' whiteSpace? ':' whiteSpace? key:id eolWhiteSpace
{
  return toAstNode<AstNode.MetaStorageKey>({key: 'storageKey', value: key, kind: 'storageKey' });
};

Particle
  = external:('external' whiteSpace)? 'particle' whiteSpace name:upperIdent verbs:(whiteSpace VerbList)? implFile:(whiteSpace 'in' whiteSpace id)? eolWhiteSpace items:(Indent (SameIndent ParticleItem)*)? eolWhiteSpace?
  {
    const args: AstNode.ParticleHandleConnection[] = [];
    const modality: string[] = [];
    const slotConnections: AstNode.RecipeParticleSlotConnection[] = [];
    const trustClaims: AstNode.ParticleClaimStatement[] = [];
    const trustChecks: AstNode.ParticleCheckStatement[] = [];
    let description: AstNode.Description | null = null;
    let hasParticleHandleConnection = false;
    verbs = optional(verbs, parsedOutput => parsedOutput[1], []);
    external = !!external;
    implFile = optional(implFile, implFile => implFile[3], null);
    if (external && implFile) {
      error('Particles marked external cannot have an implementation file.');
    }
    items = optional(items, extractIndented, []);
    items.forEach(item => {
      if (item.kind === 'particle-interface') {
        if (/[A-Z]/.test(item.verb[0]) && item.verb !== name) {
          error(`Verb ${item.verb} must start with a lower case character or be same as particle name.`);
        }
        verbs.push(item.verb);
        args.push(...item.args);
        hasParticleHandleConnection = true;
      } else if (item.kind === 'particle-argument') {
        args.push(item);
      } else if (item.kind === 'particle-slot') {
        slotConnections.push(item);
      } else if (item.kind === 'description') {
        description = {
          kind: 'description',
          location: location() // TODO: FIXME Get the locations of the item descriptions.
        } as AstNode.Description;
        item.description.forEach(d => description[d.name] = d.pattern || d.patterns[0]);
      } else if (item.kind === 'particle-trust-claim') {
        trustClaims.push(item);
      } else if (item.kind === 'particle-trust-check') {
        trustChecks.push(item);
      } else if (item.modality) {
        modality.push(item.modality);
      } else {
        error(`Particle ${name} contains an unknown element: ${item.name} / ${item.kind}`);
      }
    });
    if (modality.length === 0) {
      // Add default modality
      modality.push('dom');
    }    

    return  toAstNode<AstNode.Particle>({
      kind: 'particle',
      name,
      external,
      implFile,
      verbs,
      args,
      modality,
      slotConnections,
      description,
      hasParticleHandleConnection,
      trustClaims,
      trustChecks,
    });
  }

ParticleItem "a particle item"
  = ParticleModality
  / ParticleSlotConnection
  / Description
  / ParticleHandleConnection
  / ParticleClaimStatement
  / ParticleCheckStatement

ParticleClaimStatement
  = 'claim' whiteSpace handle:lowerIdent whiteSpace expression:ParticleClaimExpression eolWhiteSpace
  {
    return toAstNode<AstNode.ParticleClaimStatement>({
      kind: 'particle-trust-claim',
      handle,
      expression,
    });
  }

ParticleClaimExpression
  = first:ParticleClaim rest:(whiteSpace 'and' whiteSpace ParticleClaim)*
  {
    return [first, ...rest.map(item => item[3])] as AstNode.ParticleClaimExpression;
  }

ParticleClaim
  = ParticleClaimIsTag
  / ParticleClaimDerivesFrom

ParticleClaimIsTag
  = 'is' whiteSpace not:('not' whiteSpace)? tag:lowerIdent
  {
    return toAstNode<AstNode.ParticleClaimIsTag>({
      kind: 'particle-trust-claim-is-tag',
      claimType: ClaimType.IsTag,
      isNot: not != null,
      tag,
    });
  }

ParticleClaimDerivesFrom
  = 'derives from' whiteSpace handle:lowerIdent
  {
    return toAstNode<AstNode.ParticleClaimDerivesFrom>({
      kind: 'particle-trust-claim-derives-from',
      claimType: ClaimType.DerivesFrom,
      parentHandle: handle,
    });
  }

ParticleCheckStatement
  = 'check' whiteSpace target:ParticleCheckTarget whiteSpace expression:ParticleCheckExpressionBody eolWhiteSpace
  {
    return toAstNode<AstNode.ParticleCheckStatement>({
      kind: 'particle-trust-check',
      target,
      expression,
    });
  }

ParticleCheckTarget
  = name:lowerIdent isSlot:(whiteSpace 'data')?
  {
    return toAstNode<AstNode.ParticleCheckTarget>({
      kind: 'particle-check-target',
      targetType: isSlot ? 'slot' : 'handle',
      name,
    });
  }

// A series of check conditions using `and`/`or` operations (doesn't need to be surrounded by parentheses).
ParticleCheckExpressionBody
  = left:ParticleCheckExpression rest:(whiteSpace ('or'/'and') whiteSpace ParticleCheckExpression)*
  {
    if (rest.length === 0) {
      return left;
    }
    const operators: Set<string> = new Set(rest.map(item => item[1]));
    if (operators.size > 1) {
      expected(`You cannot combine 'and' and 'or' operations in a single check expression. You must nest them inside parentheses.`);
    }
    const operator = rest[0][1];
    return toAstNode<AstNode.ParticleCheckBooleanExpression>({
      kind: 'particle-trust-check-boolean-expression',
      operator,
      children: [left, ...rest.map(item => item[3])],
    });
  }

// Can be either a single check condition, or a series of conditions using `and`/`or` operations surrounded by parentheses.
ParticleCheckExpression
  = condition:ParticleCheckCondition { return condition; }
  / '(' whiteSpace? condition:ParticleCheckExpressionBody whiteSpace? ')' { return condition; }

ParticleCheckCondition
  = ParticleCheckIsFromHandle
  / ParticleCheckIsFromStore
  / ParticleCheckIsFromOutput
  / ParticleCheckHasTag

ParticleCheckHasTag
  = 'is' isNot:(whiteSpace 'not')? whiteSpace tag:lowerIdent
  {
    return toAstNode<AstNode.ParticleCheckHasTag>({
      kind: 'particle-trust-check-has-tag',
      checkType: CheckType.HasTag,
      isNot: !!isNot,
      tag,
    });
  }

ParticleCheckIsFromHandle
  = 'is' isNot:(whiteSpace 'not')? whiteSpace 'from' whiteSpace 'handle' whiteSpace parentHandle:lowerIdent
  {
    return toAstNode<AstNode.ParticleCheckIsFromHandle>({
      kind: 'particle-trust-check-is-from-handle',
      checkType: CheckType.IsFromHandle,
      isNot: !!isNot,
      parentHandle,
    });
  }

ParticleCheckIsFromOutput
  = 'is' isNot:(whiteSpace 'not')? whiteSpace 'from' whiteSpace 'output' whiteSpace output:lowerIdent
  {
    return toAstNode<AstNode.ParticleCheckIsFromOutput>({
      kind: 'particle-trust-check-is-from-output',
      checkType: CheckType.IsFromOutput,
      isNot: !!isNot,
      output,
    });
  }

ParticleCheckIsFromStore
  = 'is' isNot:(whiteSpace 'not')? whiteSpace 'from' whiteSpace 'store' whiteSpace storeRef:StoreReference
  {
    return toAstNode<AstNode.ParticleCheckIsFromStore>({
      kind: 'particle-trust-check-is-from-store',
      checkType: CheckType.IsFromStore,
      isNot: !!isNot,
      storeRef,
    });
  }

StoreReference
  = name:upperIdent { return toAstNode<AstNode.StoreReference>({kind: 'store-reference', type: 'name', store: name}); }
  / id:id { return toAstNode<AstNode.StoreReference>({kind: 'store-reference', type: 'id', store: id}); }

ParticleHandleConnection
  = arg:ParticleHandleConnectionBody eolWhiteSpace dependentConnections:(Indent (SameIndent ParticleHandleConnection)*)?
  {
    arg.dependentConnections = optional(dependentConnections, extractIndented, []);
    return arg;
  }

ParticleHandleConnectionBody
  = ParticleHandleConnectionBodyPreSlandle
  / ParticleHandleConnectionBodyUnified

ParticleHandleConnectionBodyPreSlandle
  = direction:DirectionPreSlandles isOptional:'?'? whiteSpace type:ParticleHandleConnectionType whiteSpace nametag:NameAndTagList
  {
    requireUsePreSlandleSyntax(5);
    return toAstNode<AstNode.ParticleHandleConnection>({
      kind: 'particle-argument',
      direction,
      type: type,
      isOptional: !!isOptional,
      dependentConnections: [],
      name: nametag.name,
      tags: nametag.tags,
    });
  }

NameWithColon
  = &(unsafeLowerIdent whiteSpace? ':') name:lowerIdent whiteSpace? ':' whiteSpace?
  {
    return name;
  }

ParticleHandleConnectionBodyUnified
  = name:NameWithColon? direction:(DirectionUnified '?'?)? whiteSpace type:ParticleHandleConnectionType maybeTags:SpaceTagList?
  {
    requireUsePostSlandleSyntax(6);
    return toAstNode<AstNode.ParticleHandleConnection>({
      kind: 'particle-argument',
      direction: optional(direction, d => d[0], 'any'),
      type,
      isOptional: optional(direction, d => !!d[1], false),
      dependentConnections: [],
      name: name || (maybeTags && maybeTags[0]) || expected(`either a name or tags to be supplied ${name} ${maybeTags}`),
      tags: maybeTags || []
    });
  }

DirectionPreSlandles "a direction (e.g. inout, in, out, host, `consume, `provide, any)"
  = ('inout' / 'in' / 'out' / 'host' / '`consume' / '`provide' / 'any') &([^a-zA-Z0-9] / !.)
  {
    requireUsePreSlandleSyntax(7);
    return text() as AstNode.Direction;
  }

DirectionUnified "a direction (e.g. reads writes, reads, writes, hosts, `consumes, `provides, any')"
  = (('reads' ('?'?) ' writes') / 'reads' / 'writes' / 'hosts' / '`consumes' / '`provides') &([^a-zA-Z0-9] / !.)
  {
    // TODO(jopra): Parse optionality properly.
    requireUsePostSlandleSyntax(8);
    return AstNode.directionToPreSlandlesDirection(text() as AstNode.DirectionUnified);
  }

// TODO(jopra): Remove when syntax is updated to not use arrows.
DirectionArrow "a direction arrow (e.g. <-, ->, <->, =, `consume, `provide)"
  = '<->' / '<-' / '->' / '=' / '`consume' / '`provide'

ParticleHandleConnectionType
  = TypeVariable
  / SingletonType
  / CollectionType
  / BigCollectionType
  / ReferenceType
  / SlotType
  / SchemaInline
  / TypeName

SingletonType
 = '![' type:ParticleHandleConnectionType ']'
 {
   return toAstNode<AstNode.SingletonType>({
     kind: 'singleton-type',
     type
   });
 }

CollectionType
  = '[' type:ParticleHandleConnectionType ']'
  {
    return toAstNode<AstNode.CollectionType>({
      kind: 'collection-type',
      type,
    });
  }

BigCollectionType
  = 'BigCollection<' type:ParticleHandleConnectionType '>'
  {
    return toAstNode<AstNode.BigCollectionType>({
      kind: 'big-collection-type',
      type,
    });
  }

ReferenceType
  = 'Reference<' type:ParticleHandleConnectionType '>'
  {
    return toAstNode<AstNode.ReferenceType>({
      kind: 'reference-type',
      type,
    });
  }

TypeVariable "a type variable (e.g. ~foo)"
  = '~' name:lowerIdent constraint:(whiteSpace 'with' whiteSpace type:ParticleHandleConnectionType)?
  {
    return toAstNode<AstNode.TypeVariable>({
      kind: 'variable-type',
      name,
      constraint: optional(constraint, constraint => constraint[3], null),
    });
  }

SlotType
  = 'Slot' &(!. / [^a-z0-9_]i) fields:(whiteSpace? '{' (SlotField (',' whiteSpace SlotField)*)? '}')?
{
  fields = optional(fields, fields => {
    const data = fields[2];
    if (data) {
      return [data[0]].concat(data[1].map(tail => tail[2]));
    } else {
      return [];
    }
  }, []);

  // TODO(jopra): Check for duplicate field names.

  return toAstNode<AstNode.SlotType>({
    kind: 'slot-type',
    fields,
  });
}

SlotField
  = name:fieldName whiteSpace? ':' whiteSpace? value:lowerIdent
{
  return toAstNode<AstNode.SlotField>({
    kind: 'slot-field',
    name,
    value
  });
}

TypeName
  = name:upperIdent
  {
    return toAstNode<AstNode.TypeName>({
      kind: 'type-name',
      name,
    });
  }

TypeVariableList
  = head:TypeVariable tail:(',' whiteSpace TypeVariable)*
  {
    return [head, ...tail.map(a => a[2])];
  }

ParticleModality
  = 'modality' whiteSpace modality:fieldName eolWhiteSpace
  {
    return toAstNode<AstNode.ParticleModality>({
      kind: 'particle-modality',
      modality,
    });
  }

ParticleSlotConnection
 = ParticleSlotConnectionUnified
 / ParticleSlotConnectionPreSlandles

ParticleSlotConnectionPreSlandles
  = isRequired:('must' whiteSpace)? 'consume' whiteSpace isSet:('set of' whiteSpace)? name:lowerIdent tags:(whiteSpace TagList)? eolWhiteSpace
    items:(Indent (SameIndent ParticleSlotConnectionItem)*)?
  {
    requireUsePreSlandleSyntax(9);
    let formFactor: AstNode.SlotFormFactor|null = null;
    const provideSlotConnections: AstNode.ParticleProvidedSlot[] = [];
    items = optional(items, extractIndented, []);
    items.forEach(item => {
      if (item.kind === 'provided-slot') {
        provideSlotConnections.push(item);
      } else if (item.kind === 'form-factor') {
        if (formFactor) {
          error('duplicate form factor for a slot');
        }
        formFactor = item.formFactor;
      } else {
        error('Unsupported particle slot item ', item);
      }
    });
    return toAstNode<AstNode.ParticleSlotConnection>({
      kind: 'particle-slot',
      name,
      tags: optional(tags, tags => tags[1], []),
      isRequired: optional(isRequired, isRequired => isRequired[0] === 'must', false),
      isSet: !!isSet,
      formFactor,
      provideSlotConnections
    });
  }

SlandleType = type:SlotType {
    type.isSet = false;
    return type;
  }
  / type:('[' SlotType ']')
  {
    type = type[1];
    type.isSet = true;
    return type;
  }

ParticleSlotConnectionUnified
  = name:NameWithColon? 'consumes' isOptional:'?'? type:(whiteSpace SlandleType)? maybeTags:SpaceTagList? eolWhiteSpace
    items:(Indent (SameIndent ParticleSlotConnectionItem)*)?
  {
    requireUsePostSlandleSyntax(10);
    const provideSlotConnections: AstNode.ParticleProvidedSlot[] = [];
    items = optional(items, extractIndented, []);
    items.forEach(item => {
      if (item.kind === 'provided-slot') {
        provideSlotConnections.push(item);
      } else {
        error('Unsupported particle slot item ', item);
      }
    });
    let formFactor: AstNode.SlotFormFactor|null = null;
    let isSet = false;
    if (type) {
      type = type[1]; // remove the whitespace.
      isSet = type.isSet;
      type.fields.forEach(({name, value}) => {
        if (name === 'formFactor') {
          if (!formFactor) {
            formFactor = value;
          } else {
            error('duplicate form factor for a slot');
          }
        } else {
          error(`unknown slot field named ${name} with value ${value}`);
        }
      });
    }

    return toAstNode<AstNode.ParticleSlotConnection>({
      kind: 'particle-slot',
      name,
      tags: maybeTags || [],
      isRequired: !isOptional,
      isSet,
      formFactor,
      provideSlotConnections
    });
  }

ParticleSlotConnectionItem
  = SlotFormFactor
  / ParticleProvidedSlot

SlotFormFactor
  = 'formFactor' whiteSpace formFactor:('fullscreen' / 'big' / 'medium' / 'small') eolWhiteSpace
  {
    return toAstNode<AstNode.SlotFormFactor>({
      kind: 'form-factor',
      formFactor
    });
  }

ParticleProvidedSlot
  = ParticleProvidedSlotPreSlandles
  / ParticleProvidedSlotUnified

ParticleProvidedSlotPreSlandles
  = isRequired:('must' whiteSpace)? 'provide' whiteSpace? isSet:('set of' whiteSpace)? name:lowerIdent tags:(whiteSpace TagList)? eolWhiteSpace items:(Indent (SameIndent ParticleProvidedSlotItem)*)?
  {
    requireUsePreSlandleSyntax(11);
    let formFactor: AstNode.SlotFormFactor|null = null;
    const handles: AstNode.ParticleProvidedSlotHandle[] = [];
    items = items ? extractIndented(items) : [];
    items.forEach(item => {
      if (item.kind === 'form-factor') {
        if (formFactor) {
          error('duplicate form factor for a slot');
        }
        formFactor = item.formFactor;
      } else {
        handles.push(item.handle);
      }
    });
    return toAstNode<AstNode.ParticleProvidedSlot>({
      kind: 'provided-slot',
      name,
      tags: optional(tags, tags => tags[1], []),
      isRequired: optional(isRequired, isRequired => isRequired[0] === 'must', false),
      isSet: !!isSet,
      formFactor,
      handles
    });
  }

ParticleProvidedSlotUnified
  = name:NameWithColon? 'provides' isOptional:'?'? type:(whiteSpace SlandleType)? maybeTags:SpaceTagList? eolWhiteSpace?
  {
    requireUsePostSlandleSyntax(12);
    const provideSlotConnections: AstNode.ParticleProvidedSlot[] = [];
    let formFactor: AstNode.SlotFormFactor|null = null;
    const handles: AstNode.ParticleProvidedSlotHandle[] = [];
    let isSet = false;
    if (type) {
      type = type[1]; // remove the whitespace.
      isSet = type.isSet;
      type.fields.forEach(({name, value}) => {
        if (name === 'formFactor') {
          if (!formFactor) {
            formFactor = value;
          } else {
            error('duplicate form factor for a slot');
          }
        } else if (name === 'handle') {
          handles.push(value);
        } else {
          error(`unknown slot field named ${name} with value ${value}`);
        }
      });
    }

    return toAstNode<AstNode.ParticleProvidedSlot>({
      kind: 'provided-slot',
      name,
      tags: maybeTags || [],
      isRequired: !isOptional,
      isSet,
      formFactor,
      handles
    });
  }


ParticleProvidedSlotItem
  = SlotFormFactor
  / ParticleProvidedSlotHandle

ParticleProvidedSlotHandle
  = 'handle' whiteSpace handle:lowerIdent eolWhiteSpace
  {
    return toAstNode<AstNode.ParticleProvidedSlotHandle>({
      kind: 'particle-provided-slot-handle',
      handle,
    });
  }

Description
  = 'description' whiteSpace pattern:backquotedString eolWhiteSpace handleDescriptions:(Indent (SameIndent ParticleHandleDescription)+)?
  {
    handleDescriptions = optional(handleDescriptions, extractIndented, []);
    const patterns = [];
    if (pattern) {
      patterns.push(pattern);
    }
    handleDescriptions.filter(desc => desc.name === 'pattern').forEach(p => patterns.push(p));
    handleDescriptions = handleDescriptions.filter(desc => desc.name !== 'pattern');
    return {
      kind: 'description',
      location: location(),
      description: [
        {
          // TODO: this should be stored in a different field.
          // TODO: FIXME
          kind: 'default-description?',
          location: location(),
          name: 'pattern',
          patterns: patterns,
        },
        ...handleDescriptions,
      ],
    } as AstNode.Description;
  }

ParticleHandleDescription
  = name:lowerIdent whiteSpace pattern:backquotedString eolWhiteSpace
  {
    return toAstNode<AstNode.ParticleHandleDescription>({
      kind: 'handle-description',
      name,
      pattern,
    });
  }

RecipeNode
  = 'recipe' name:(whiteSpace upperIdent)? verbs:(whiteSpace VerbList)? eolWhiteSpace items:(Indent (SameIndent RecipeItem)*)?
  {
    verbs = optional(verbs, parsedOutput => parsedOutput[1], []);
    return toAstNode<AstNode.RecipeNode>({
      kind: 'recipe',
      name: optional(name, name => name[1], null),
      verbs,
      items: optional(items, extractIndented, []),
    });
  }

// RequireHandleSection is intended to replace RecipeHandle but for now we allow for both ways to create a handle.
RecipeItem
  = RecipeParticle
  / RecipeHandle
  / RequireHandleSection
  / RecipeRequire
  / RecipeSlot
  / RecipeSearch
  / RecipeConnection
  / Description

LocalName
  = 'as' whiteSpace name:(lowerIdent / [a-zA-Z0-9]* { expected(`lower identifier`); })
  {
    return name;
  }

TopLevelAlias
  = 'as' whiteSpace name:upperIdent
  {
    return name;
  }

RecipeParticle
  = ref:(ParticleRef / '*') name:(whiteSpace LocalName)? eolWhiteSpace connections:(Indent (SameIndent RecipeParticleItem)*)?
  {
    const handleConnections: AstNode.RecipeParticleConnection[]  = [];
    const slotConnections: AstNode.RecipeParticleSlotConnection[] = [];
    if (connections) {
      connections = extractIndented(connections);
      for (const conn of connections) {
        if (conn.kind === 'handle-connection') {
          handleConnections.push(conn);
        } else {
          slotConnections.push(conn);
        }
      }
    }
    return toAstNode<AstNode.RecipeParticle>({
      kind: 'recipe-particle',
      name: optional(name, name => name[1], null),
      ref,
      connections: handleConnections,
      slotConnections: slotConnections,
    });
  }

RecipeParticleItem = RecipeParticleSlotConnection / RecipeParticleConnection

RecipeParticleConnection
  = RecipeParticleConnectionUnified
  / RecipeParticleConnectionPreSlandle

RecipeParticleConnectionUnified
  = param:NameWithColon? dir:DirectionUnified target:(whiteSpace ParticleConnectionTargetComponents)? eolWhiteSpace dependentConnections:(Indent (SameIndent RecipeParticleConnection)*)?
  {
    requireUsePostSlandleSyntax(13);
    return toAstNode<AstNode.RecipeParticleConnection>({
      kind: 'handle-connection',
      param: param || '*',
      dir,
      target: optional(target, t => t[1], null),
      dependentConnections: optional(dependentConnections, extractIndented, []),
    });
  }
  / param:NameWithColon? target:ParticleConnectionTargetComponents eolWhiteSpace dependentConnections:(Indent (SameIndent RecipeParticleConnection)*)?
  {
    requireUsePostSlandleSyntax(13);
    return toAstNode<AstNode.RecipeParticleConnection>({
      kind: 'handle-connection',
      param: param || '*',
      dir: 'any',
      target,
      dependentConnections: optional(dependentConnections, extractIndented, []),
    });
  }

// TODO(jopra): Remove after unification
RecipeParticleConnectionPreSlandle
  = param:(lowerIdent / '*') whiteSpace dir:DirectionArrow target:(whiteSpace ParticleConnectionTargetComponents)? eolWhiteSpace dependentConnections:(Indent (SameIndent RecipeParticleConnection)*)?
  {
    requireUsePreSlandleSyntax(14);
    return toAstNode<AstNode.RecipeParticleConnection>({
      kind: 'handle-connection',
      param,
      dir: AstNode.arrowToDirection(dir),
      target: optional(target, target => target[1], null),
      dependentConnections: optional(dependentConnections, extractIndented, []),
    });
  }

ParticleConnectionTargetComponents
  = param:(upperIdent / lowerIdent) tags:(whiteSpace TagList)?
  {
    param = optional(param, param => param, null);
    let name: string|null = null;
    let particle = null;
    if (param) {
      if (param[0].toUpperCase() === param[0]) {
        particle = param;
      } else {
        name = param;
      }
    }

    return toAstNode<AstNode.ParticleConnectionTargetComponents>({
      kind: 'handle-connection-components',
      name,
      particle,
      tags: optional(tags, t => t[1], []),
    });
  }
  / tags:TagList
  {
    return toAstNode<AstNode.ParticleConnectionTargetComponents>({
      kind: 'handle-connection-components',
      name: null,
      particle: null,
      tags
    });
  }

RecipeParticleSlotConnection
  = RecipeParticleSlotConnectionUnified
  / RecipeParticleSlotConnectionPreSlandle

RecipeParticleSlotConnectionPreSlandle
  = direction:SlotDirectionPreSlandle whiteSpace ref:RecipeSlotConnectionRef name:(whiteSpace LocalName)? eolWhiteSpace dependentSlotConnections:(Indent (SameIndent RecipeParticleSlotConnection)*)?
  {
    requireUsePreSlandleSyntax(15);
    return toAstNode<AstNode.RecipeParticleSlotConnection>({
      kind: 'slot-connection',
      direction,
      param: ref.param,
      tags: ref.tags,
      name: optional(name, name=>name[1], null),
      dependentSlotConnections: optional(dependentSlotConnections, extractIndented, []),
    });
  }
RecipeParticleSlotConnectionUnified
  = param: NameWithColon? direction:SlotDirectionUnified name:(whiteSpace lowerIdent)? tags:SpaceTagList? eolWhiteSpace dependentSlotConnections:(Indent (SameIndent RecipeParticleSlotConnection)*)?
  {
    requireUsePostSlandleSyntax(16);
    return toAstNode<AstNode.RecipeParticleSlotConnection>({
      kind: 'slot-connection',
      direction,
      param,
      tags: tags || [],
      name: optional(name, name=>name[1], null),
      dependentSlotConnections: optional(dependentSlotConnections, extractIndented, []),
    });
  }

RecipeSlotConnectionRef
  = param:lowerIdent tags:SpaceTagList?
  {
    return toAstNode<AstNode.RecipeSlotConnectionRef>({
      kind: 'slot-connection-ref',
      param,
      tags: tags || [],
    });
  }

SlotDirectionPreSlandle
  = 'provide' / 'consume'
SlotDirectionUnified
  = 'provides' { return 'provide'; }
  / 'consumes' { return 'consume'; }

RecipeConnection
  = RecipeConnectionUnified / RecipeConnectionPreSlandle

RecipeConnectionUnified
  = from:ConnectionTargetWithColon? direction:(DirectionUnified whiteSpace)? to:ConnectionTarget eolWhiteSpace
  {
    const anyTarget = toAstNode<AstNode.NameConnectionTarget>({
      kind: 'connection-target',
      targetType: 'localName',
      name: undefined,
      param: '*',
      tags: [],
    });
    requireUsePostSlandleSyntax(17);
    return toAstNode<AstNode.RecipeConnection>({
      kind: 'connection',
      direction: optional(direction, d => d[0], 'any'),
      from: from || anyTarget,
      to,
    });
  }

ConnectionTargetWithColon
  = target:ConnectionTarget ':' whiteSpace?
  {
    return target;
  }

RecipeConnectionPreSlandle
  = from:ConnectionTarget whiteSpace direction:DirectionArrow whiteSpace to:ConnectionTarget eolWhiteSpace
  {
    requireUsePreSlandleSyntax(18);
    return toAstNode<AstNode.RecipeConnection>({
      kind: 'connection',
      direction: AstNode.arrowToDirection(direction),
      from,
      to,
    });
  }

RecipeSearch
  = 'search' whiteSpace phrase:backquotedString eolWhiteSpace tokens:(Indent (SameIndent 'tokens' t:(whiteSpace backquotedString)+ eolWhiteSpace))?

  {
    return toAstNode<AstNode.RecipeSearch>({
      kind: 'search',
      phrase,
      tokens: optional(tokens, tokens => tokens[1][2].map(t => t[1]), null)
    });
  }

ConnectionTarget
  = VerbConnectionTarget / TagConnectionTarget / ParticleConnectionTarget / NameConnectionTarget

VerbConnectionTarget
  = verbs:VerbList components:ConnectionTargetHandleComponents?
  {
    const {param, tags} = components || {param: null, tags: []};
    return toAstNode<AstNode.VerbConnectionTarget>({
      kind: 'connection-target',
      targetType: 'verb',
      verbs,
      param,
      tags
    });
  }

TagConnectionTarget
  = tags:TagList {
    return toAstNode<AstNode.TagConnectionTarget>({
      kind: 'connection-target',
      targetType: 'tag',
      tags
    });
  }

NameConnectionTarget
  = name:lowerIdent components:ConnectionTargetHandleComponents?
  {
    const {param, tags} = components || {param: null, tags: []};
    return toAstNode<AstNode.NameConnectionTarget>({
      kind: 'connection-target',
      targetType: 'localName',
      name,
      param,
      tags
    });
  }

ParticleConnectionTarget
  = particle:upperIdent components:ConnectionTargetHandleComponents?
  {
    const {param, tags} = components || {param: null, tags: []};
    return toAstNode<AstNode.ParticleConnectionTarget>({
      kind: 'connection-target',
      targetType: 'particle',
      particle,
      param,
      tags
    });
  }

ConnectionTargetHandleComponents
  = '.' param:lowerIdent? tags:(whiteSpace? TagList)?
  {
    return toAstNode<AstNode.ConnectionTargetHandleComponents>({
      kind: 'connection-target-handle-components',
      param: optional(param, param => param, null),
      tags: optional(tags, tags => tags[1], []),
    });
  }

RecipeHandleFate
  = '?'
  / 'use'
  / 'map'
  / 'create'
  / 'copy'
  / '`slot'

RecipeHandle
  = name:NameWithColon? fate:RecipeHandleFate ref:(whiteSpace HandleRef)? namePreSlandles:(whiteSpace LocalName)? eolWhiteSpace
  {
    if (name && namePreSlandles) {
      error('cannot provide both name and localName for RecipeHandle.');
    }
    if (name) {
      requireUsePostSlandleSyntax(19);
    }
    if (namePreSlandles) {
      requireUsePreSlandleSyntax(20);
      name = optional(namePreSlandles, n => n[1], null);
    }
    return toAstNode<AstNode.RecipeHandle>({
      kind: 'handle',
      name,
      ref: optional(ref, ref => ref[1], emptyRef()) as AstNode.HandleRef,
      fate
    });
  }

RecipeRequire
  = 'require' eolWhiteSpace items:(Indent (SameIndent (RecipeParticle / RequireHandleSection / RecipeSlot))*)?
  {
    return toAstNode<AstNode.RecipeRequire>({
      kind: 'require',
      items: extractIndented(items),
    });
  }

RequireHandleSection
  = 'handle' name:(whiteSpace LocalName)? ref:(whiteSpace HandleRef)? eolWhiteSpace
  {
    return toAstNode<AstNode.RequireHandleSection>({
      kind: 'requireHandle',
      name: optional(name, name => name[1], null),
      ref: optional(ref, ref => ref[1], emptyRef()) as AstNode.HandleRef,
    });
  }

Tag
  = '#' tag:simpleName {return tag;}

TagList
  = head:Tag tail:(whiteSpace TagList)?
  { return [head, ...(tail && tail[1] || [])]; }

Verb "a verb (e.g. &Verb)"
  = '&' verb:simpleName {return verb;}

VerbList
  = head:Verb tail:(whiteSpace VerbList)?
  { return [head, ...(tail && tail[1] || [])]; }


SpaceTagList
  = whiteSpace tags:TagList
  { return tags; }

// Allow for an optional name followed by a TagList
// - If name is not specified the first tag is used for the name
// - Syntax error if no name or taglist are provided.
NameAndTagList
   = name:lowerIdent tags:(whiteSpace TagList)?
   {
     return toAstNode<AstNode.NameAndTagList>({
       kind: 'name-and-tag-list',
       name: name,
       tags: tags = optional(tags, list => list[1], [])
     });
   }
   / whiteSpace name:lowerIdent
   {
     // TODO(jopra): Likely covered by previous case.
     return toAstNode<AstNode.NameAndTagList>({
       kind: 'name-and-tag-list',
       name: name,
       tags: []
     });
   }
   / whiteSpace tags:TagList
   {
      return toAstNode<AstNode.NameAndTagList>({
       kind: 'name-and-tag-list',
        name: tags[0],
        tags: tags
      });
   }

ParticleRef
  = name:upperIdent
  {
    return toAstNode<AstNode.ParticleRef>({
      kind: 'particle-ref',
      name,
      verbs: [],
      tags: []
    });
  }
  / verb:Verb
  {
    return toAstNode<AstNode.ParticleRef>({
      kind: 'particle-ref',
      verbs: [verb],
      tags: []
    });
  }

HandleRef
  = id:id tags:SpaceTagList?
  {
    return toAstNode<AstNode.HandleRef>({
      kind: 'handle-ref',
      id,
      tags: tags || [],
    });
  }
  / name:upperIdent tags:SpaceTagList?
  {
    return toAstNode<AstNode.HandleRef>({
      kind: 'handle-ref',
      name,
      tags: tags || [],
    });
  }
  / '*' tags:SpaceTagList?
  {
    return toAstNode<AstNode.HandleRef>({
      kind: 'handle-ref',
      tags: tags || [],
    });
  }
  / tags:TagList
  {
    return toAstNode<AstNode.HandleRef>({
      kind: 'handle-ref',
      tags,
    });
  }

RecipeSlot
  = RecipeSlotPreSlandles
  / RecipeSlotUnified

RecipeSlotPreSlandles
  = 'slot' ref:(whiteSpace HandleRef)? name:(whiteSpace LocalName)? eolWhiteSpace
  {
    requireUsePreSlandleSyntax(21);
    return toAstNode<AstNode.RecipeSlot>({
      kind: 'slot',
      ref: optional(ref, ref => ref[1], emptyRef()) as AstNode.HandleRef,
      name: optional(name, name => name[1], '')
    });
  }

RecipeSlotUnified
  = name:NameWithColon? 'slot' ref:(whiteSpace HandleRef)? eolWhiteSpace
  {
    requireUsePostSlandleSyntax(22);
    return toAstNode<AstNode.RecipeSlot>({
      kind: 'slot',
      ref: optional(ref, ref => ref[1], emptyRef()) as AstNode.HandleRef,
      name,
    });
  }

SchemaInline
  = names:((upperIdent / '*') whiteSpace)+ '{' whiteSpace? fields:(SchemaInlineField (',' whiteSpace? SchemaInlineField)*)? whiteSpace? '}'
  {
    return toAstNode<AstNode.SchemaInline>({
      kind: 'schema-inline',
      names: optional(names, names => names.map(name => name[0]).filter(name => name !== '*'), []),
      fields: optional(fields, fields => [fields[0], ...fields[1].map(tail => tail[2])], []),
    });
  }

SchemaInlineField
  = preSlandlesType:(SchemaType whiteSpace)? name:fieldName type:(':' whiteSpace? SchemaType)?
  {
    if (type && preSlandlesType) {
      error('cannot provide a type using both preslandles syntax and unification syntax for SchemaInlineField.');
    }
    if (preSlandlesType) {
      requireUsePreSlandleSyntax(23);
      type = optional(preSlandlesType, ty => ty[0], null);
    } else if (type) {
      requireUsePostSlandleSyntax(24);
      type = optional(type, ty => ty[2], null);
    }
    return toAstNode<AstNode.SchemaInlineField>({
      kind: 'schema-inline-field',
      name,
      type
    });
  }

SchemaSpec
  = 'schema' names:(whiteSpace ('*' / upperIdent))+ parents:SchemaExtends?
  {
    return toAstNode<AstNode.SchemaSpec>({
      kind: 'schema',
      names: names.map(name => name[1]).filter(name => name !== '*'),
      parents: optional(parents, parents => parents, []),
    });
  }

SchemaAlias
  = 'alias' whiteSpace spec:SchemaSpec whiteSpace alias:TopLevelAlias eolWhiteSpace items:(Indent (SameIndent SchemaItem)*)?
  {
    return toAstNode<AstNode.SchemaAlias>({
      ...spec,
      kind: 'schema',
      items: optional(items, extractIndented, []),
      alias
    });
  }

Schema
  = spec:SchemaSpec eolWhiteSpace items:(Indent (SameIndent SchemaItem)*)?
  {
    return toAstNode<AstNode.Schema>({
      ...spec,
      kind: 'schema',
      items: optional(items, extractIndented, [])
    });
  }

SchemaExtends
  = whiteSpace 'extends' whiteSpace first:upperIdent rest:(whiteSpace? ',' whiteSpace upperIdent)*
{
  return [first, ...(rest.map(item => item[3]))] as string[];
}

SchemaItem
  = SchemaField
  / Description

SchemaField
  = field:SchemaInlineField eolWhiteSpace
  {
    if (!field.type) {
      expected('a type (required for schema fields)');
    }
    field.kind = 'schema-field';
    return toAstNode<AstNode.SchemaField>(field);
  }

SchemaType
  = SchemaReferenceType / SchemaCollectionType / SchemaPrimitiveType / SchemaUnionType / SchemaTupleType

SchemaCollectionType = '[' whiteSpace* schema:SchemaReferenceType whiteSpace* ']'
  {
    return toAstNode<AstNode.SchemaCollectionType>({
      kind: 'schema-collection',
      schema
    });
  }

SchemaReferenceType = 'Reference<' whiteSpace* schema:(SchemaInline / TypeName) whiteSpace* '>'
  {
    return toAstNode<AstNode.SchemaReferenceType>({
      kind: 'schema-reference',
      schema
    });
  }

SchemaPrimitiveType
  = type:('Text' / 'URL' / 'Number' / 'Boolean' / 'Bytes')
  {
    return toAstNode<AstNode.SchemaPrimitiveType>({
      kind: 'schema-primitive',
      type
    });
  }

SchemaUnionType
  = '(' whiteSpace? first:SchemaPrimitiveType rest:(whiteSpace 'or' whiteSpace SchemaPrimitiveType)+ whiteSpace? ')'
  {
    const types = [first];
    for (const type of rest) {
      types.push(type[3]);
    }
    return toAstNode<AstNode.SchemaUnionType>({kind: 'schema-union', types});
  }

SchemaTupleType
  = '(' whiteSpace? first:SchemaPrimitiveType rest:(whiteSpace? ',' whiteSpace? SchemaPrimitiveType)* whiteSpace? ')'
  {
    const types = [first];
    for (const type of rest) {
      types.push(type[3]);
    }
    return toAstNode<AstNode.SchemaTupleType>({kind: 'schema-tuple', types});
  }

Version "a version number (e.g. @012)"
  = '@' version:[^ ]+
  {
    return version.join('');
  }

Indent "indentation" = &(i:" "+ &{
  i = i.join('');
  if (i.length > indent.length) {
    indents.push(indent);
    indent = i;
    return true;
  }
  return false;
})

SameIndent "same indentation" = &(i:" "* &{
  i = i.join('');
  if (i.length === indent.length) {
    return true;
  } else if (i.length < indent.length) {
    indent = indents.pop();
    return false;
  }
  return false;
}) " "*

SameOrMoreIndent "same or more indentation" = &(i:" "* &{
  i = i.join('');
  if (i.length >= indent.length) {
    return true;
  } else if (i.length < indent.length) {
    indent = indents.pop();
    return false;
  }
  return undefined;
}) " "* { return text(); }

// Should only be used as a negative match.
ReservedWord
  = keyword:(DirectionArrow
  / DirectionPreSlandles
  / DirectionUnified
  / SlotDirectionUnified
  / SlotDirectionPreSlandle
  / RecipeHandleFate
  / 'particle'
  / 'recipe'
  / 'import'
  / 'in'
  / 'interface'
  / 'schema'
  / 'require'
  / 'handle'
  / 'external'
  ) ([^a-zA-Z0-9_] / !.)  // '!.' matches end-of-input
{
  expected(`identifier`);
}

backquotedString "a `backquoted string`"
  = '`' pattern:([^`]+) '`' { return pattern.join(''); }
id "an identifier (e.g. 'id')"
  = "'" id:[^'\n]+ ("'" / . { expected('\' at the end of an identifier'); }) { return id.join(''); }
upperIdent "an uppercase identifier (e.g. Foo)"
  = [A-Z][a-z0-9_]i* { return text(); }
lowerIdent "a lowercase identifier (e.g. foo)"
  = !ReservedWord unsafeLowerIdent { return text(); }
unsafeLowerIdent "a lowercase identifier or keyword"
  = [a-z][a-z0-9_]i* &([^a-zA-Z0-9_] / !.)  // '!.' matches end-of-input
  { return text(); }
fieldName "a field name (e.g. foo9)" // Current handle, formFactor or any entity field.
  = [a-z][a-z0-9_]i* { return text(); }
dottedName "a name conforming to the rules of an android app name, per https://developer.android.com/guide/topics/manifest/manifest-element.html#package"
  = $ (simpleName ("." simpleName)*) // Note that a single simpleName matches too
simpleName "a name starting with a letter and containing letters, digits and underscores"
  = [a-zA-Z][a-zA-Z0-9_]* {return text();}
whiteSpace "one or more whitespace characters"
  = " "+
eolWhiteSpace "a group of new lines (and optionally comments)"
  = [ ]* !.
  / [ ]* '//' [^\n]* eolWhiteSpace
  / [ ]* eol eolWhiteSpace?
eol "a new line"
  = "\r"? "\n" "\r"?
