/**
 * @license
 * Copyright (c) 2019 Google Inc. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * Code distributed by Google as part of this project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

assertion                = name separator quantifiedFilteredObject separator predicate (separator quantifiedFilteredObject)?
name                     = character name / character
separator                = opt_whitespace ":" opt_whitespace
quantifiedFilteredObject = quantifier separator object (filterPredicate)?
quantifier               = "0" / "any" / "1" / "all"
object                   =
  "particle" ("s")? /
  "trusted particle" ("s")? /
  "untrusted particle" ("s")? /
  "handle" ("s")? /
  "recipe" ("s")? /
  "side channel" ("s")? /
  "sensitive data" /
  "nonsensitive data"
filterPredicate          = req_whitespace "that" req_whitespace predicate
predicate                =  negator? simplePredicate (separator "and" req_whitespace simplePredicate)?
negator                  = ("does not" / "do not" / "is not" / "are not") req_whitespace
simplePredicate          = (relation separator quantifiedFilteredObject) / attribute
relation                 =
  "see" ("s")? /
  ("is" / "are") req_whitespace "seen" req_whitespace "by" /
  ("is" / "are") req_whitespace "written" req_whitespace "to by" /
  "write" ("s")? req_whitespace "to" /
  "read" ("s")? req_whitespace "from" /
  ("is" / "are") req_whitespace "read" req_whitespace "by" /
  ("is" / "are") req_whitespace "reachable" req_whitespace "from"
attribute                =
  "resolve" ("s")? (req_whitespace "exactly")? /
  "exist" ("s")? /
  ("is" / "are") req_whitespace "written" /
  "write" ("s")? /
  "read" ("s")? /
  ("is" / "are") req_whitespace "read" /
  ("is" / "are") req_whitespace "reachable"
opt_whitespace           = " "*
req_whitespace           = " "+
line_end                 = opt_whitespace "\n"
letter                   = "A" / "B" / "C" / "D" / "E" / "F" / "G" / "H" / "I" / "J" / "K" / "L" / "M" / "N" / "O" / "P" / "Q" / "R" / "S" / "T" / "U" / "V" / "W" / "X" / "Y" / "Z" / "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" / "j" / "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" / "s" / "t" / "u" / "v" / "w" / "x" / "y" / "z"
digit                    = "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9"
/* This allowable-punctuation list could be extended, but these seem enough. */
punctuation              = " " / "_" / "." / "-" / "!" / "?"
character                = letter / digit / punctuation