// Copyright (c) 2018 Google Inc. All rights reserved.
// This code may only be used under the BSD style license found at
// http://polymer.github.io/LICENSE.txt
// Code distributed by Google as part of this project is also
// subject to an additional IP rights grant found at
// http://polymer.github.io/PATENTS.txt

import '../Common/List.manifest'
import '../Common/Description.schema'
import '../Places/ExtractLocation.manifest'
import '../Things/GeoCoordinates.schema'
import '../Pipes/PopCollectionItem.manifest'
import '../Showcase/ShowcaseArtist.schema'
import '../Showcase/ShowcasePlayRecord.schema'
import 'Playlist.schema'

store Store2 of [Playlist] 'playlists' in 'playlists.json'

particle ShowArtist in 'source/ShowArtist.js'
  in ShowcaseArtist artist
  in [ShowcasePlayRecord] artistPlayHistory
  out [Description] descriptions
  consume root
    provide nearbyShows
      handle artist
    provide nowPlayingList
      handle artistPlayHistory
    provide extrasForArtist
      handle artist
  description `Learn more about ${artist}`

particle ShowArtistSimple in 'source/ShowArtistSimple.js'
  in Artist artist
  consume item

particle FilterToArtist in 'source/FilterToArtist.js'
  in ShowcaseArtist artist
  in [ShowcasePlayRecord] fullPlayHistory
  inout [ShowcasePlayRecord] artistPlayHistory

particle ExtractArtists in 'source/ExtractArtists.js'
  in [PlayRecord] fullPlayHistory
  inout [RankedArtist {Text name, Number score}] artists

particle PlayRecordRenderer in 'source/PlayRecordRenderer.js'
  in ShowcasePlayRecord playRecord
  consume item

recipe
  map 'myNowPlayingHistory' as fullPlayHistory
  create as artists
  create as shows
  use as location
  ExtractArtists
    artists = artists
    fullPlayHistory <- fullPlayHistory
  FindShowsMultipleArtists
    artists <- artists
    location <- location
    shows = shows
    consume root
      provide listing as slot0
  List
    items = shows
    consume root as slot0
  ItemMultiplexer
    list = shows
    hostedParticle = ShowRenderer
  description `${FindShowsMultipleArtists}`

// Feed the artist and play records to Arcs by invoking
// below in the Chrome console when in Arcs Launcher:
// ShellApi.receiveEntity('{"type": "artist", "name": "Led Zeppelin"}');
// ShellApi.receiveEntity(`{"type": "play_record", "artist": "Led Zeppelin", "song": "Kashmir", "dateTime": "${String(Date.now())}"}`);
recipe ShowcaseArtistDemo
  map 'PROFILE_piped-showcase_artist' as artists
  create as artist
  map 'PROFILE_all_piped-all_showcase_play_record' as fullPlayHistory
  create as artistPlayHistory
  PopCollectionItem
    collection = artists
    item = artist
  FilterToArtist
    artist <- artist
    fullPlayHistory <- fullPlayHistory
    artistPlayHistory = artistPlayHistory
  ShowArtist
    artist <- artist
    artistPlayHistory <- artistPlayHistory
    consume root
      provide nowPlayingList as slot0
  List
    items = artistPlayHistory
    consume root as slot0
  ItemMultiplexer
    list = artistPlayHistory
    hostedParticle = PlayRecordRenderer
  description `${ShowArtist}`

schema Show
  Text name
  Text venue
  Text date
  Text time
  Text imageUrl

particle FindShowsMultipleArtists in 'source/FindShowsMultipleArtists.js'
  in [RankedArtist {Text name, Number score}] artists
  in GeoCoordinates location
  inout [Show] shows
  out [Description] descriptions
  consume root
    provide listing
      handle shows
  description `Find nearby shows`


particle FindShows in 'source/FindShows.js'
  in ShowcaseArtist artist
  in GeoCoordinates location
  inout [Show] shows
  out [Description] descriptions
  consume nearbyShows
    provide listing
      handle shows
  description `Find nearby shows by ${artist}`

particle ShowRenderer in 'source/ShowRenderer.js'
  in Show show
  consume item

recipe
  use as artist
  create as shows
  use as location
  FindShows
    location <- location
    artist <- artist
    shows = shows
    consume nearbyShows
      provide listing as slot0
  List
    items = shows
    consume root as slot0
  ItemMultiplexer
    list = shows
    hostedParticle = ShowRenderer
  description `${FindShows}`

particle FilterPlaylists in 'source/FilterPlaylists.js'
  in ShowcaseArtist artist
  in [Playlist] allPlaylists
  inout [Playlist] artistsPlaylists
  consume extrasForArtist
    provide playlistsListing

particle PlaylistRenderer in 'source/PlaylistRenderer.js'
  in Playlist playlist
  consume item

recipe ArtistsPlaylists
  use as artist
  map 'playlists' as allPlaylists
  create as artistsPlaylists
  FilterPlaylists
    artist <- artist
    allPlaylists <- allPlaylists
    artistsPlaylists = artistsPlaylists
    consume extrasForArtist
      provide playlistsListing as slot0
  List
    items = artistsPlaylists
    consume root as slot0
  ItemMultiplexer
    list = artistsPlaylists
    hostedParticle = PlaylistRenderer
  description `Listen to ${FilterPlaylists.artist} on ${FilterPlaylists.artistsPlaylists}`
