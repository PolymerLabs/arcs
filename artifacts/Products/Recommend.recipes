// @license
// Copyright (c) 2018 Google Inc. All rights reserved.
// This code may only be used under the BSD style license found at
// http://polymer.github.io/LICENSE.txt
// Code distributed by Google as part of this project is also
// subject to an additional IP rights grant found at
// http://polymer.github.io/PATENTS.txt

// TODO(sjmiles):
// Generally we want to drive the association of Claire in the product recipes
// against a Person of interest.
// In particular `wishlist` implies a person (it's "Claire's Wishlist").
// In some way the 'wishlist' should be produced relative to a person, but today it's
// just static data.
// I need a spot to bind a Person record to make the Suggestions appear correct,
// even if the particles aren't using that record. This is why there is
// `in Person person` in the `Chooser` particle (it's just convenient for now).
// Note that the `addFromWishlist` recipe requires an active user with `use as person`
// (i.e. it will not pull from context).

import 'Product.schema'
import '../People/Person.schema'
import '../Common/Multiplexer.manifest'

particle Recommend in 'source/Recommend.js'
  in [Product] known
  in [Product] population
  out [Product] recommendations
  description `recommend products from ${known} and ${population}`
    //recommendations `products recommended based on ${known}._name_ and ${population}._name_`
    recommendations `${population}._name_`

particle Chooser in 'source/Chooser.js'
  in Person person
  in [~a] choices
  inout [~a] resultList
  consume action
    provide set of annotation
      handle choices
  description `add items from ${person}'s ${choices}`

particle AlsoOn in 'source/AlsoOn.js'
  in Thing product
  in [Thing] choices
  consume annotation

recipe &addFromWishlist
  // TODO(sjmiles): chooser won't render if `person.name !== 'Claire'`, but that's
  // not enough to prevent non-Claire suggestions from appearing (ask, file ticket).
  // I cannot tag the person (ask), nor copy tags via `copy` fate (ask, file ticket).
  use as person
  use as shoplist
  map #wishlist as wishlist
  create as choices
  Recommend
    population = wishlist
    known = shoplist
    recommendations = choices
  Chooser
    choices = choices
    resultList = shoplist
  Multiplexer2
    list = shoplist
    others = choices
    hostedParticle = AlsoOn
    consume annotation as annotationSlot

