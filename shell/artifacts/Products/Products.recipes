// @license
// Copyright (c) 2017 Google Inc. All rights reserved.
// This code may only be used under the BSD style license found at
// http://polymer.github.io/LICENSE.txt
// Code distributed by Google as part of this project is also
// subject to an additional IP rights grant found at
// http://polymer.github.io/PATENTS.txt

import '../Common/Multiplexer.manifest'
import '../Common/ShowCollection.manifest'
import '../Common/CopyCollection.manifest'
import 'Product.schema'
import 'Recommend.manifest'
import 'Chooser.manifest'
import 'GiftList.manifest'
import 'Interests.manifest'
import 'AlsoOn.manifest'
import 'Arrivinator.manifest'
import 'AlternateShipping.manifest'
import 'ManufacturerInfo.manifest'
import 'ShowProduct.manifest'
import 'ShopFor.manifest'

// show a list
recipe showList
  ShowCollection.collection -> Multiplexer.list
  ShowCollection
    consume master
      provide item as itemSlot
  Multiplexer
    hostedParticle = ShowProduct
    consume annotation as itemSlot

// See [person]'s wishlist
recipe 
  map #wishlist as wishlist
  particle can showList

// // Create shortlist with [product, ...] and suggest similar products from [person]'s wish list
// recipe
//   // Chooser.choices -> Recommend.recommendations
//   Chooser.resultList -> ShowCollection.collection
//   // Chooser.resultList -> Recommend.known
//   Chooser.resultList -> Multiplexer2.list
//   Chooser.choices -> Multiplexer2.others
//   map #wishlist as wishlist
//   copy #shortlist as shortlist
//   // Recommend
//   //   population <- wishlist
//   ShowCollection
//     collection <- shortlist
//     consume master
//       provide item as itemSlot
//       provide annotation as annotationSlot
//   Multiplexer
//     list <- shortlist
//     hostedParticle = ShowProduct
//     consume annotation as itemSlot
//   Multiplexer2
//     hostedParticle = AlsoOn
//     consume annotation as annotationSlot
// 
// // Buying for [person]'s [occasion] in [timeframe]? Product [X] arrives too late.
// recipe
//   map as view1
//   use #shortlist as view2
//   use as view3
//   GiftList
//     person <- view1
//   Multiplexer
//     list <- view2
//     hostedParticle = Arrivinator
//   Multiplexer
//     list <- view3
//     hostedParticle = Arrivinator

recipe
  copy #browser as shortlist
  copy #giftsforclaire as giftsforclaire
  map as person
  create #desiredShipping as desiredShipping
 
  ShopFor
    choices <- shortlist
    basket = giftsforclaire
    person <- person
    desiredShipping = desiredShipping

// TODO this could eventually read not from a hardcoded wishlist but from
// Claire's shared wishlist (which in turn was populated from browser
// context).
recipe
  use #browser as shortlist
  map #wishlist as wishlist

  CopyCollection
    input <- wishlist
    output -> shortlist

  description `pull in Claire's wishlist`



// Check manufacturer information for products.
recipe
  use #browser as shortlist
  Multiplexer
    list <- shortlist
    hostedParticle <- ManufacturerInfo

// Check arrival information for products
recipe
  use #browser as shortlist
  use #desiredShipping as desiredShipping

  FixedOtherMultiplexer
    list <- shortlist
    other <- desiredShipping
    hostedParticle <- Arrivinator

// If the shipping date won't work, look for extra products
recipe
  use #browser as shortlist
  use #desiredShipping as desiredShipping

  FixedOtherMultiplexer
    list <- shortlist
    other <- desiredShipping
    hostedParticle <- AlternateShipping

// Recommendations based on Claire's interest in field hockey.
// TODO - transition to annotation?
recipe
  map #wishlist as wishlist
  Interests
    list <- wishlist

view ClairesWishlist of [Product] #wishlist in 'data/wishlist.json'
  description `Claire's wishlist`
view GiftsForClaire of [Product] #giftsforclaire in 'data/empty.json'
  description `Gifts for Claire`
view APerson of Person in 'data/people.json'
//view ThePeople of Person in 'data/people.json'
