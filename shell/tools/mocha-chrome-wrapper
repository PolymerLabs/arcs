#!/usr/bin/env node

// Copyright (c) 2017 Google Inc. All rights reserved.
// This code may only be used under the BSD style license found at
// http://polymer.github.io/LICENSE.txt
// Code distributed by Google as part of this project is also
// subject to an additional IP rights grant found at
// http://polymer.github.io/PATENTS.txt

'use strict';
const MochaChrome = require('mocha-chrome');
const fs = require('fs');

const server = process.argv[2];
const promises = process.argv.slice(3).map(testScript => {
  if (!fs.existsSync(testScript)) {
    throw Error(`no test file found at path ${testScript}.`);
  }

  const url = `http://${server}/${testScript}`;
  const options = Object.assign({
    url: url
  });

  const mochaChrome = new MochaChrome(options);

  const promise = new Promise(async resolve => {
    // 'ended' seems like the preferred event, but let's catch everything
    // that the mocha-chrome cli does.
    mochaChrome.on('ended', stats => {
      resolve({ url: url, failures: stats.failures });
    });
    mochaChrome.on('failure', message => {
      resolve({ url: url, failures: 1 });
    });

    console.log('running tests at: ' + options.url);
    await mochaChrome.connect();
    await mochaChrome.run();
  });
  return promise;
});
Promise.all(promises).then(results => {
  results.forEach(results => {
    console.log(
      `${results.failures ? 'failed' : 'succeeded'} for tests at url ${
        results.url
      }`
    );
  });
  const exitCode = results
    .map(result => result.failures)
    .reduce((accumulator, currentValue) => accumulator || currentValue);
  console.log(
    `overall run ${
      exitCode ? 'failed some tests' : 'passed all tests'
    } (code ${exitCode})`
  );
  process.exit(exitCode);
});
