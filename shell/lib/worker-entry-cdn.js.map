{"version":3,"sources":["webpack:///webpack/bootstrap 453f9be5f845b17e0bd2","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/platform/assert-web.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/type.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/entity.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/particle-spec.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/schema.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/symbols.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/dom-particle.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/particle.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/platform/fs-web.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/relation.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/shape.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/transformation-dom-particle.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/type-variable.js","webpack:///./source/browser-cdn-loader.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/inner-PEC.js","webpack:///./source/worker-entry-cdn.js","webpack:///../~/process/browser.js","webpack:///../~/webpack/buildin/global.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/converters/jsonldToManifest.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/platform/devtools-channel-web.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/platform/vm-web.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/api-channel.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/browser/lib/xen-state.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/debug/abstract-devtools-channel.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/debug/devtools-channel-provider.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/debug/outer-port-attachment.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/fetch-web.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/handle.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/identifier.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/loader.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/runtime.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/runtime/tuple-fields.js","webpack:////Users/sjmiles/Sites/projects/arcs/arcs/tracelib/trace.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACZA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,oCAAoC,KAAK;AACzC;AACA;AACA,MAAM;AACN;AACA,2CAA2C,UAAU,EAAE,SAAS;AAChE;AACA,gHAAuB,KAAK,MAAM,EAAE,SAAS,IAAI,WAAW,kBAAkB,KAAK;AACnF;AACA,MAAM;AACN,6CAA6C,KAAK;AAClD;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,mCAAmC,MAAM,KAAK,OAAO;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,sCAAsC;AACtD;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;;;;ACxQA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,OAAO,sBAAsB;AAC3D;AACA,cAAc,gBAAgB,GAAG,uBAAuB;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC9DA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS,uEAAuE;AAChF;AACA,WAAW,kCAAkC;AAC7C;AACA,cAAc;AACd,KAAK;AACL,YAAY;AACZ;;AAEA;AACA,SAAS,uEAAuE;AAChF,sBAAsB,kCAAkC,OAAO,+GAA0D;AACzH,6BAA6B,uEAAuE;AACpG;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8MAAqH,EAAE;AACvH,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,UAAU,OAAO,cAAc;AAC5D,gDAAgD,aAAa,GAAG,mBAAmB,EAAE,yBAAyB,GAAG,QAAQ;AACzH,sBAAsB,iBAAiB,GAAG,mBAAmB;AAC7D,uFAAuF,EAAE;AACzF;AACA;AACA,sBAAsB,4BAA4B,UAAU,yBAAyB,EAAE,OAAO;AAC9F;AACA,oCAAoC,0BAA0B,EAAE,QAAQ;AACxE;AACA,2DAA2D,IAAI;AAC/D,OAAO;AACP,KAAK;AACL;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA,8BAA8B,QAAQ,KAAK,WAAW;AACtD;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AC1LA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uHAA8B,sBAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,GAAG,SAAS,KAAK,iBAAiB,UAAU;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK,SAAS,UAAU,cAAc,MAAM,SAAS,cAAc;AAC/F;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,qCAAqC,KAAK,SAAS,UAAU,aAAa,MAAM,SAAS,cAAc;AACvG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,iBAAiB;AAC3D,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,UAAU,mCAAmC,iBAAiB;;AAEzF;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA,gGAAgG,8BAA8B;AAC9H,8BAA8B,WAAW,GAAG,KAAK;AACjD,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAAgB;;;;;;;;;;ACThB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAIC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uDAAuD;AACvD,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,cAAc;AACrC;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACxIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA+B,+DAA+D,0BAA0B;AACxH,6HAAiE,qDAAqD,yBAAyB;AAC/I;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uIAA8C,SAAS;AACvD;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,oCAAoC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH,EAAE,0BAA0B;AAC5B;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yCAAyC,KAAK,EAAE;;AAEhF;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA,0DAAgB;;;;;;;;ACvOhB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACPA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC7BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,cAAc;AACd,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;;AAEnD;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC,sGAAsG;AAC/I,yCAAyC,mJAAmJ;AAC5L;AACA;;AAEA;AACA,yCAAyC,gGAAgG;AACzI,yCAAyC,2IAA2I;AACpL,YAAY;AACZ;;AAEA;AACA,iCAAiC,sBAAsB,OAAO,sBAAsB;AACpF,iCAAiC,mCAAmC,OAAO,mCAAmC;AAC9G;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,8GAA8G;AACxI;AACA,4BAA4B,4FAA4F;AACxH,OAAO;AACP,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;AC1KA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,8BAA8B,EAAE,sBAAsB;AACrE,QAAQ,yCAAyC,gBAAgB;AACjE;AACA;AACA;AACA,2CAA2C,YAAY,qBAAqB,YAAY,UAAU;AAClG;AACA;;AAEA;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACxCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wFAAwF,SAAS,kBAAkB,OAAO,cAAc,0BAA0B,oBAAoB;AACtL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,KAAK,MAAM,IAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gaAAmG;AAC/H;AACA;AAAA;AAAA;;;;;;;;;;;;;AC3EA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB;AACqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,gEAAgE;AAC5F;;AAEA;AACA;AACA,4BAA4B,oDAAoD;AAChF;;AAEA;AACA;AACA,+BAA+B,oDAAoD;AACnF;;AAEA;AACA,0BAA0B,uCAAuC;AACjE;;AAEA;AACA,4BAA4B,uCAAuC;AACnE;;AAEA;AACA,6BAA6B,yCAAyC;AACtE;;AAEA;AACA,4BAA4B,yBAAyB;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gCAAgC;AACrE;AACA;;AAEA,6CAA6C,yBAAyB;AACtE;AACA;AACA;AACA;;AAEA,0CAA0C,aAAa;AACvD;AACA;AACA;;AAEA,2CAA2C,uBAAuB;AAClE;AACA;AACA;;AAEA,uCAAuC,sEAAsE;AAC7G;AACA;;AAEA,uCAAuC,qCAAqC;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,kBAAkB;;AAE1B,uCAAuC,eAAe;;AAEtD,6CAA6C,cAAc;;AAE3D,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA,0BAA0B,qBAAqB,mCAAmC,EAAE,EAAE;AACtF,OAAO;;AAEP,gCAAgC,0BAA0B;;AAE1D,oCAAoC,iCAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C,wBAAwB,uBAAuB;AAC/C,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA;AACA,qCAAqC,4BAA4B;;AAEjE,+CAA+C,yCAAyC,EAAE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mCAAmC,mBAAmB;AACtD;AACA,2CAA2C,cAAc,QAAQ,SAAS;AAC1E;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA,cAAc,aAAa,GAAG,oBAAoB;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,YAAY;AACZ,OAAO;AACP;AACA;AACA,qCAAqC;AACrC;AACA,YAAY;AACZ,OAAO;AACP;AACA;AACA,sCAAsC;AACtC;AACA,YAAY;AACZ,OAAO;AACP;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,oBAAoB,kDAAkD,WAAW;AAC5H;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACrUA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6EAA6E,cAAc,0BAA0B,oBAAoB;;AAEzI;AACA;AACA,OAAO,SAAS;AAChB;AACA;AACA;;;;;;;AClBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;ACvLtC;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yCAAyC,UAAU;;AAEnD,mBAAmB,UAAU;AAC7B;AACA,uBAAuB,sBAAsB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK,GAAG,cAAc;AAC5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC3GA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AAAA;AAAA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACPA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oJAA2D,MAAM;AACjE;AACA;;AAEA;AACA,wIAA+C,GAAG;AAClD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,yDAAyD,mBAAmB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,oBAAoB;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA,OAAO,kEAAkE;AACzE,uDAAuD,mGAA8C;AACrG;AACA,OAAO,uJAAiG;;AAExG,kCAAkC,iEAAiE;AACnG,yCAAyC,yCAAyC;AAClF,oCAAoC,qBAAqB;AACzD,sCAAsC,mFAAmF;AACzH,qCAAqC,6CAA6C;;AAElF,oCAAoC,mEAAmE;AACvG,yCAAyC;AACzC;AACA,wFAAwF;AACxF,uCAAuC,oEAAoE;AAC3G,0CAA0C,oEAAoE;AAC9G,uCAAuC,gEAAgE;AACvG,yCAAyC,gEAAgE;AACzG,0CAA0C,uCAAuC;AACjF,yCAAyC,oBAAoB;AAC7D,kCAAkC,oEAAoE;;AAEtG,+CAA+C,6CAA6C;AAC5F,+CAA+C,6CAA6C;;AAE5F,6CAA6C,iJAA4F;AACzI,sDAAsD,2IAAsF;;AAE5I,0CAA0C,kEAAkE;AAC5G,mDAAmD,uCAAuC;;AAE1F;AACA,OAAO,qLAAqL;AAC5L,oDAAoD,iDAAiD;AACrG,yCAAyC,0HAA0H;;AAEnK,2CAA2C,kEAAkE;AAC7G;AACA;;AAEA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,OAAO,+DAA+D;AACtE,qDAAqD,mGAA8C;AACnG;AACA,OAAO,uJAAiG;;AAExG,qCAAqC,iEAAiE;AACtG,4CAA4C,8CAA8C;AAC1F,uCAAuC,qBAAqB;AAC5D,yCAAyC,wEAAwE;AACjH,wCAAwC,6CAA6C;;AAErF,iCAAiC,mEAAmE;AACpG,sCAAsC;AACtC;AACA,0FAA0F;AAC1F,oCAAoC,yEAAyE;AAC7G,uCAAuC,yEAAyE;AAChH,oCAAoC,gEAAgE;AACpG,sCAAsC,gEAAgE;AACtG,uCAAuC,uCAAuC;AAC9E,sCAAsC,oBAAoB;AAC1D,+BAA+B,oEAAoE;;AAEnG,4CAA4C,kDAAkD;AAC9F,kDAAkD,6CAA6C;;AAE/F,0CAA0C,iJAA4F;AACtI,6DAA6D,gJAA2F;AACxJ,uCAAuC,kEAAkE;AACzG,0DAA0D,4CAA4C;AACtG;AACA,OAAO,qLAAqL;AAC5L,2DAA2D,sDAAsD;AACjH,4CAA4C,0HAA0H;;AAEtK,wCAAwC,kEAAkE;AAC1G;AACA;;AAEQ;AACR,2EAAgB;;;;;;;;ACtVhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACnCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,kBAAkB;AACnD;AACA;;AAEA,kBAAkB,eAAe;AACjC;AACA;AACA;AACA,wCAAwC;AACxC;AACA;;AAEA,iBAAiB,0DAA0D;AAC3E;AACA,OAAO,iBAAiB,KAAK,sBAAsB;AACnD;AACA,OAAO,4CAA4C;AACnD;;AAEA,eAAe,6BAA6B;AAC5C;AACA,OAAO,qCAAqC;AAC5C;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA,OAAO,wCAAwC;AAC/C;;AAEA,eAAe,yBAAyB;AACxC,yBAAyB,2CAA2C;AACpE;;AAEA,iBAAiB,yBAAyB;AAC1C,yBAAyB,6CAA6C;AACtE;;AAEA,iBAAiB,mBAAmB;AACpC,yBAAyB,uCAAuC;AAChE;;AAEA,kBAAkB,yBAAyB;AAC3C,yBAAyB,8CAA8C;AACvE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+FAAwC,qCAAqC;AAC7E;;AAEA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe,GAAG,0CAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACPA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,YAAY;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxgB;;;;;;;;;ACtNhB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC5BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,KAAK;AAC7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA,+QAA+H,sBAAsB;AACrJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uGAAqC,wCAAwC;AAC7E;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oFAAoF,EAAE;AACtF;AACA,kCAAkC,wCAAwC;AAC1E,mNAA0H,SAAS;AACnI;AACA;;AAEA;AACA,4BAA4B,uVAA8E;AAC1G;;AAEA;;AAEA;;;;;;;;;;;;;AC5FA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,KAAK;AACL;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;;;;;;;ACzCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;+CCtCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA","file":"././lib/worker-entry-cdn.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 453f9be5f845b17e0bd2","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nexport default function assert(test, message) {\n  if (!test) {\n    debugger;\n    throw new Error(message);\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/platform/assert-web.js\n// module id = 0\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport assert from '../platform/assert-web.js';\n\nlet nextVariableId = 0;\n\nfunction addType(name, arg) {\n  let lowerName = name[0].toLowerCase() + name.substring(1);\n  Object.defineProperty(Type, `new${name}`, {\n    value: function(arg) {\n      return new Type(name, arg);\n    }});\n  let upperArg = arg ? arg[0].toUpperCase() + arg.substring(1) : '';\n  Object.defineProperty(Type.prototype, `${lowerName}${upperArg}`, {\n    get: function() {\n      assert(this[`is${name}`], `{${this.tag}, ${this.data}} is not of type ${name}`);\n      return this.data;\n    }});\n  Object.defineProperty(Type.prototype, `is${name}`, {\n    get: function() {\n      return this.tag == name;\n    }});\n}\n\nclass Type {\n  constructor(tag, data) {\n    assert(typeof tag == 'string');\n    assert(data);\n    if (tag == 'Entity') {\n      assert(data instanceof Schema);\n    }\n    if (tag == 'SetView') {\n      if (!(data instanceof Type) && data.tag && data.data) {\n        data = new Type(data.tag, data.data);\n      }\n    }\n    this.tag = tag;\n    this.data = data;\n  }\n\n  static newView(type) {\n    console.warn('Type.newView is deprecated. Please use Type.newSetView instead');\n    return Type.newSetView(type);\n  }\n\n  get isView() {\n    console.warn('Type.isView is deprecated. Please use Type.isSetView instead');\n    return this.isSetView;\n  }\n\n  get viewType() {\n    console.warn('Type.viewType is deprecated. Please use Type.setViewType isntead');\n    return this.setViewType;\n  }\n\n  viewOf() {\n    console.warn('Type.viewOf is deprecated. Please use Type.setViewOf instead');\n    return this.setViewOf();\n  }\n\n  get manifestReferenceName() {\n    console.warn('Type.manifestReferenceName is deprecated. Please use Type.manifestReference instead');\n    return this.manifestReference;\n  }\n\n  get variableReferenceName() {\n    console.warn('Type.variableReferenceName is deprecated. Please use Type.variableReference instead');\n    return this.variableReference;\n  }\n\n  get variableVariable() {\n    console.warn('Type.variableVariable is deprecated. Please use Type.variable instead');\n    return this.variable;\n  }\n\n  // Replaces variableReference types with variable types .\n  assignVariableIds(variableMap) {\n    if (this.isVariableReference) {\n      let name = this.data;\n      let sharedVariable = variableMap.get(name);\n      if (sharedVariable == undefined) {\n        let id = nextVariableId++;\n        sharedVariable = new TypeVariable(name, id);\n        variableMap.set(name, sharedVariable);\n      }\n      return Type.newVariable(sharedVariable);\n    }\n\n    if (this.isSetView) {\n      return this.primitiveType().assignVariableIds(variableMap).setViewOf();\n    }\n\n    if (this.isInterface) {\n      let shape = this.interfaceShape.clone();\n      shape._typeVars.map(({object, field}) => object[field] = object[field].assignVariableIds(variableMap));\n      return Type.newInterface(shape);\n    }\n\n    return this;\n  }\n\n  // Replaces manifestReference types with resolved schemas.\n  resolveReferences(resolve) {\n    if (this.isManifestReference) {\n      let resolved = resolve(this.data);\n      if (resolved.schema) {\n        return Type.newEntity(resolved.schema);\n      } else if (resolved.shape) {\n        return Type.newInterface(resolved.shape);\n      } else {\n        throw new Error('Expected {shape} or {schema}');\n      }\n    }\n\n    if (this.isSetView) {\n      return this.primitiveType().resolveReferences(resolve).setViewOf();\n    }\n\n    return this;\n  }\n\n  static unwrapPair(type1, type2) {\n    assert(type1 instanceof Type);\n    assert(type2 instanceof Type);\n    if (type1.tag != type2.tag) {\n      return null;\n    }\n    if (type1.isEntity || type1.isInterface || type1.isVariableReference || type1.isManifestReference) {\n      return [type1, type2];\n    }\n    return Type.unwrapPair(type1.data, type2.data);\n  }\n\n  equals(type) {\n    if (this.tag !== type.tag)\n      return false;\n    if (this.tag == 'Entity') {\n      return this.data.equals(type.data);\n    }\n    if (this.isSetView) {\n      return this.data.equals(type.data);\n    }\n    if (this.isInterface) {\n      return this.data.equals(type.data);\n    }\n    if (this.isVariable) {\n      return this.data.equals(type.data);\n    }\n    // TODO: this doesn't always work with the way the parser keeps kind\n    // information around\n    return JSON.stringify(this.data) == JSON.stringify(type.data);\n  }\n\n  get isValid() {\n    return !this.variableReference;\n  }\n\n  primitiveType() {\n    let type = this.setViewType;\n    return new Type(type.tag, type.data);\n  }\n\n  resolvedType() {\n    if (this.isTypeVariable && this.data.isResolved)\n      return this.data.resolution.resolvedType();\n\n    return this;\n  }\n\n  toLiteral() {\n    if (this.data.toLiteral)\n      return {tag: this.tag, data: this.data.toLiteral()};\n    return this;\n  }\n\n  static _deliteralizer(tag) {\n    switch (tag) {\n      case 'Interface':\n        return Shape.fromLiteral;\n      case 'Entity':\n        return Schema.fromLiteral;\n      case 'SetView':\n        return Type.fromLiteral;\n      case 'Tuple':\n        return TupleFields.fromLiteral;\n      default:\n        return a => a;\n    }\n  }\n\n  static fromLiteral(literal) {\n    return new Type(literal.tag, Type._deliteralizer(literal.tag)(literal.data));\n  }\n\n  setViewOf() {\n    return Type.newSetView(this);\n  }\n\n  hasProperty(property) {\n    if (property(this))\n      return true;\n    if (this.isSetView)\n      return this.setViewType.hasProperty(property);\n    return false;\n  }\n\n  toString() {\n    if (this.isSetView)\n      return `[${this.primitiveType().toString()}]`;\n    if (this.isEntity)\n      return this.entitySchema.name;\n    if (this.isInterface)\n      return 'Interface';\n    if (this.isTuple)\n      return this.tupleFields.toString();\n    assert('Add support to serializing type:', this);\n  }\n\n  toPrettyString() {\n    if (this.isRelation)\n      return JSON.stringify(this.data);\n    if (this.isSetView) {\n      return `${this.primitiveType().toPrettyString()} List`;\n    }\n    if (this.isVariable)\n      return `[${this.variableName}]`;\n    if (this.isVariableReference)\n      return `[${this.variableReferenceName}]`;\n    if (this.isEntity) {\n      // Spit MyTypeFOO to My Type FOO\n      if (this.entitySchema.name) {\n        return this.entitySchema.name.replace(/([^A-Z])([A-Z])/g, '$1 $2').replace(/([A-Z][^A-Z])/g, ' $1').trim();\n      } \n      return JSON.stringify(this.entitySchema._model);\n    }\n    if (this.isTuple)\n      return this.tupleFields.toString();\n    if (this.isManifestReference)\n      return this.manifestReferenceName;\n    if (this.isInterface)\n      return this.interfaceShape.toPrettyString();\n  }\n}\n\naddType('ManifestReference');\naddType('Entity', 'schema');\naddType('VariableReference');\naddType('Variable');\naddType('SetView', 'type');\naddType('Relation', 'entities');\naddType('Interface', 'shape');\naddType('Tuple', 'fields');\n\nexport default Type;\n\nimport Shape from './shape.js';\nimport Schema from './schema.js';\nimport TypeVariable from './type-variable.js';\nimport TupleFields from './tuple-fields.js';\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/type.js\n// module id = 1\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport Symbols from './symbols.js';\nimport Type from './type.js';\n\nclass Entity {\n  constructor(userIDComponent) {\n    assert(!userIDComponent || userIDComponent.indexOf(':') == -1, 'user IDs must not contain the \\':\\' character');\n    this[Symbols.identifier] = undefined;\n    this._userIDComponent = userIDComponent;\n  }\n  get data() {\n    return undefined;\n  }\n\n  getUserID() {\n    return this._userIDComponent;\n  }\n\n  isIdentified() {\n    return this[Symbols.identifier] !== undefined;\n  }\n  // TODO: entity should not be exposing its IDs.\n  get id() {\n    assert(!!this.isIdentified());\n    return this[Symbols.identifier];\n  }\n  identify(identifier) {\n    assert(!this.isIdentified());\n    this[Symbols.identifier] = identifier;\n    let components = identifier.split(':');\n    if (components[components.length - 2] == 'uid')\n      this._userIDComponent = components[components.length - 1];\n  }\n  createIdentity(components) {\n    assert(!this.isIdentified());\n    let id;\n    if (this._userIDComponent)\n      id = `${components.base}:uid:${this._userIDComponent}`;\n    else\n      id = `${components.base}:${components.component()}`;\n    this[Symbols.identifier] = id;\n  }\n  toLiteral() {\n    return this.rawData;\n  }\n\n  static get type() {\n    // TODO: should the entity's key just be its type?\n    // Should it just be called type in that case?\n    return Type.newEntity(this.key.schema);\n  }\n}\n\nexport default Entity;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/entity.js\n// module id = 2\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport Type from './type.js';\nimport TypeVariable from './type-variable.js';\nimport Shape from './shape.js';\nimport assert from '../platform/assert-web.js';\n\nclass ConnectionSpec {\n  constructor(rawData, typeVarMap) {\n    this.rawData = rawData;\n    this.direction = rawData.direction;\n    this.name = rawData.name;\n    this.type = rawData.type.assignVariableIds(typeVarMap);\n    this.isOptional = rawData.isOptional;\n  }\n\n  get isInput() {\n    // TODO: we probably don't really want host to be here.\n    return this.direction == 'in' || this.direction == 'inout' || this.direction == 'host';\n  }\n\n  get isOutput() {\n    return this.direction == 'out' || this.direction == 'inout';\n  }\n}\n\nclass SlotSpec {\n  constructor(slotModel) {\n    this.name = slotModel.name;\n    this.isRequired = slotModel.isRequired;\n    this.isSet = slotModel.isSet;\n    this.formFactor = slotModel.formFactor;\n    this.providedSlots = [];\n    slotModel.providedSlots.forEach(ps => {\n      this.providedSlots.push(new ProvidedSlotSpec(ps.name, ps.isSet, ps.formFactor, ps.views));\n    });\n  }\n}\n\nclass ProvidedSlotSpec {\n  constructor(name, isSet, formFactor, views) {\n    this.name = name;\n    this.isSet = isSet;\n    this.formFactor = formFactor;\n    this.views = views;\n  }\n}\n\nclass ParticleSpec {\n  constructor(model) {\n    this._model = model;\n    this.name = model.name;\n    this.verbs = model.verbs;\n    let typeVarMap = new Map();\n    this.connections = model.args.map(a => new ConnectionSpec(a, typeVarMap));\n    this.connectionMap = new Map();\n    this.connections.forEach(a => this.connectionMap.set(a.name, a));\n    this.inputs = this.connections.filter(a => a.isInput);\n    this.outputs = this.connections.filter(a => a.isOutput);\n    this.transient = model.transient;\n\n    // initialize descriptions patterns.\n    model.description = model.description || {};\n    this.validateDescription(model.description);\n    this.pattern = model.description['pattern'];\n    this.connections.forEach(connectionSpec => {\n      connectionSpec.pattern = model.description[connectionSpec.name];\n    });\n\n    this.implFile = model.implFile;\n    this.affordance = model.affordance;\n    this.slots = new Map();\n    if (model.slots)\n      model.slots.forEach(s => this.slots.set(s.name, new SlotSpec(s)));\n    // Verify provided slots use valid view connection names.\n    this.slots.forEach(slot => {\n      slot.providedSlots.forEach(ps => {\n        ps.views.forEach(v => assert(this.connectionMap.has(v), 'Cannot provide slot for nonexistent view constraint ', v));\n      });\n    });\n  }\n\n  isInput(param) {\n    for (let input of this.inputs) if (input.name == param) return true;\n  }\n\n  isOutput(param) {\n    for (let outputs of this.outputs) if (outputs.name == param) return true;\n  }\n\n  getSlotSpec(slotName) {\n    return this.slots.get(slotName);\n  }\n\n  get primaryVerb() {\n    if (this.verbs.length > 0) {\n      return this.verbs[0];\n    }\n  }\n\n  matchAffordance(affordance) {\n    return this.slots.size <= 0 || this.affordance.includes(affordance);\n  }\n\n  toLiteral() {\n    let {args, name, verbs, transient, description, implFile, affordance, slots} = this._model;\n    args = args.map(a => {\n      let {type, direction, name, isOptional} = a;\n      type = type.toLiteral();\n      return {type, direction, name, isOptional};\n    });\n    return {args, name, verbs, transient, description, implFile, affordance, slots};\n  }\n\n  static fromLiteral(literal) {\n    let {args, name, verbs, transient, description, implFile, affordance, slots} = literal;\n    args = args.map(({type, direction, name, isOptional}) => ({type: Type.fromLiteral(type), direction, name, isOptional}));\n    return new ParticleSpec({args, name, verbs, transient, description, implFile, affordance, slots});\n  }\n\n  clone() {\n    return ParticleSpec.fromLiteral(this.toLiteral());\n  }\n\n  equals(other) {\n    return JSON.stringify(this.toLiteral()) === JSON.stringify(other.toLiteral());\n  }\n\n  validateDescription(description) {\n    Object.keys(description || []).forEach(d => {\n      assert(['kind', 'location', 'pattern'].includes(d) || this.connectionMap.has(d), `Unexpected description for ${d}`);\n    });\n  }\n\n  toInterface() {\n    return Type.newInterface(this._toShape());\n  }\n\n  _toShape() {\n    const views = this._model.args;\n    // TODO: wat do?\n    assert(!this.slots.length, 'please implement slots toShape');\n    const slots = [];\n    return new Shape(views, slots);\n  }\n\n  toString() {\n    let results = [];\n    results.push(`particle ${this.name} in '${this.implFile}'`);\n    let connRes = this.connections.map(cs => `${cs.direction} ${cs.type.toString()}${cs.isOptional ? '?' : ''} ${cs.name}`);\n    results.push(`  ${this.primaryVerb}(${connRes.join(', ')})`);\n    this.affordance.filter(a => a != 'mock').forEach(a => results.push(`  affordance ${a}`));\n    // TODO: support form factors\n    this.slots.forEach(s => {\n    results.push(`  ${s.isRequired ? 'must ' : ''}consume ${s.isSet ? 'set of ' : ''}${s.name}`);\n      s.providedSlots.forEach(ps => {\n        results.push(`    provide ${ps.isSet ? 'set of ' : ''}${ps.name}`);\n        // TODO: support form factors\n        ps.views.forEach(psv => results.push(`      view ${psv}`));\n      });\n    });\n    // Description\n    if (!!this.pattern) {\n      results.push(`  description \\`${this.pattern}\\``);\n      this.connections.forEach(cs => {\n        if (!!cs.pattern) {\n          results.push(`    ${cs.name} \\`${cs.pattern}\\``);\n        }\n      });\n    }\n    return results.join('\\n');\n  }\n\n  toManifestString() {\n    return this.toString();\n  }\n}\n\nexport default ParticleSpec;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/particle-spec.js\n// module id = 3\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\n\nclass Schema {\n  constructor(model) {\n    this._model = model;\n    this.name = model.name;\n    this.parents = (model.parents || []).map(parent => new Schema(parent));\n    this._normative = {};\n    this._optional = {};\n\n    assert(model.sections, `${JSON.stringify(model)} should have sections`);\n    for (let section of model.sections) {\n      let into = section.sectionType == 'normative' ? this._normative : this._optional;\n      for (let field in section.fields) {\n        // TODO normalize field types here?\n        into[field] = section.fields[field];\n      }\n    }\n  }\n\n  toLiteral() {\n    return this._model;\n  }\n\n  static fromLiteral(data) {\n    return new Schema(data);\n  }\n\n  equals(otherSchema) {\n    return this === otherSchema || (this.name == otherSchema.name\n       // TODO: Check equality without calling contains.\n       && this.contains(otherSchema)\n       && otherSchema.contains(this));\n  }\n\n  contains(otherSchema) {\n    if (!this.containsAncestry(otherSchema)) {\n      return false;\n    }\n    for (let section of ['normative', 'optional']) {\n      let thisSection = this[section];\n      let otherSection = otherSchema[section];\n      for (let field in otherSection) {\n        if (thisSection[field] != otherSection[field]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  containsAncestry(otherSchema) {\n    if (this.name == otherSchema.name || otherSchema.name == null) {\n      nextOtherParent: for (let otherParent of otherSchema.parents) {\n        for (let parent of this.parents) {\n          if (parent.containsAncestry(otherParent)) {\n            continue nextOtherParent;\n          }\n        }\n        return false;\n      }\n      return true;\n    } else {\n      for (let parent of this.parents) {\n        if (parent.containsAncestry(otherSchema)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  get type() {\n    return Type.newEntity(this);\n  }\n\n  get normative() {\n    let normative = {};\n    for (let parent of this.parents)\n      Object.assign(normative, parent.normative);\n    Object.assign(normative, this._normative);\n    return normative;\n  }\n\n  get optional() {\n    let optional = {};\n    for (let parent of this.parents)\n      Object.assign(optional, parent.optional);\n    Object.assign(optional, this._optional);\n    return optional;\n  }\n\n  entityClass() {\n    let schema = this;\n    let className = this.name;\n    let normative = this.normative;\n    let optional = this.optional;\n    let classJunk = ['toJSON', 'prototype', 'toString', 'inspect'];\n\n    let checkFieldIsValidAndGetTypes = (name, op) => {\n      let fieldType = normative[name] || optional[name];\n      switch (fieldType) {\n        case undefined:\n          throw new Error(`Can't ${op} field ${name} not in schema ${className}`);\n        case 'Number':\n          return [fieldType, 'number'];\n        case 'Boolean':\n          return [fieldType, 'boolean'];\n        case 'Object':\n          return [fieldType, 'object'];\n        default:\n          // Text, URL\n          return [fieldType, 'string'];\n      }\n    };\n\n    let clazz = class extends Entity {\n      constructor(data, userIDComponent) {\n        super(userIDComponent);\n        this.rawData = new Proxy({}, {\n          get: (target, name) => {\n            if (classJunk.includes(name))\n              return undefined;\n            if (name.constructor == Symbol)\n              return undefined;\n            let [fieldType, jsType] = checkFieldIsValidAndGetTypes(name, 'get');\n            let value = target[name];\n            assert(value == undefined || value === null || typeof(value) == jsType,\n                   `Field ${name} (type ${fieldType}) has value ${value} (type ${typeof(value)})`);\n            return value;\n          },\n          set: (target, name, value) => {\n            let [fieldType, jsType] = checkFieldIsValidAndGetTypes(name, 'set');\n            if (value !== undefined && value !== null && typeof(value) != jsType) {\n              throw new TypeError(\n                  `Can't set field ${name} (type ${fieldType}) to value ${value} (type ${typeof(value)})`);\n            }\n            target[name] = value;\n            return true;\n          }\n        });\n        for (let [name, value] of Object.entries(data)) {\n          this.rawData[name] = value;\n        }\n      }\n\n      dataClone() {\n        let clone = {};\n        for (let propertyList of [normative, optional]) {\n          Object.keys(propertyList).forEach(prop => {\n            if (this.rawData[prop] !== undefined)\n              clone[prop] = this.rawData[prop];\n          });\n        }\n        return clone;\n      }\n\n      static get key() {\n        return {\n          tag: 'entity',\n          schema: schema.toLiteral(),\n        };\n      }\n    };\n\n    Object.defineProperty(clazz, 'type', {value: this.type});\n    Object.defineProperty(clazz, 'name', {value: this.name});\n    // TODO: make a distinction between normative and optional properties.\n    // TODO: add query / getter functions for user properties\n    for (let propertyList of [normative, optional]) {\n      for (let property in propertyList) {\n        Object.defineProperty(clazz.prototype, property, {\n          get: function() {\n            return this.rawData[property];\n          },\n          set: function(v) {\n            this.rawData[property] = v;\n          }\n        });\n      }\n    }\n    return clazz;\n  }\n\n  toString() {\n    let results = [];\n    results.push(`schema ${this.name}`.concat(this.parent ? ` extends ${this.parent.name}` : ''));\n\n    let propertiesToString = (properties, keyword) => {\n      if (Object.keys(properties).length > 0) {\n        results.push(`  ${keyword}`);\n        Object.keys(properties).forEach(name => {\n          let schemaType = Array.isArray(properties[name]) && properties[name].length > 1 ? `(${properties[name].join(' or ')})` : properties[name];\n          results.push(`    ${schemaType} ${name}`);\n        });\n      }\n    };\n\n    propertiesToString(this.normative, 'normative');\n    propertiesToString(this.optional, 'optional');\n    return results.join('\\n');\n  }\n\n  toManifestString() {\n    return this.toString();\n  }\n}\n\nexport default Schema;\n\nimport Type from './type.js';\nimport Entity from './entity.js';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/schema.js\n// module id = 4\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nexport default {identifier: Symbol('id')};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/symbols.js\n// module id = 5\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport {\n  Particle,\n  ViewChanges\n} from './particle.js';\n\nimport XenStateMixin from './browser/lib/xen-state.js';\n\n/** @class DomParticle\n * Particle that does stuff with DOM.\n */\nclass DomParticle extends XenStateMixin(Particle) {\n  /** @method get template()\n   * Override to return a String defining primary markup.\n   */\n  get template() {\n    return '';\n  }\n  /** @method getTemplate(slotName)\n   * Override to return a String defining primary markup for the given slot name.\n   */\n  getTemplate(slotName) {\n    // TODO: only supports a single template for now. add multiple templates support.\n    return this.template;\n  }\n  /** @method _shouldRender(props, state)\n   * Override to return false if the Particle won't use\n   * it's slot.\n   */\n  _shouldRender(props, state) {\n    return true;\n  }\n  /** @method _render(props, state)\n   * Override to return a dictionary to map into the template.\n   */\n  _render(props, state) {\n    return {};\n  }\n  /** @method _willReceiveProps(props)\n   * Override if necessary, to do things when props change.\n   */\n  _willReceiveProps(props) {\n  }\n  /** @method get config()\n   * Override if necessary, to modify superclass config.\n   */\n  get config() {\n    // TODO(sjmiles): getter that does work is a bad idea, this is temporary\n    return {\n      views: this.spec.inputs.map(i => i.name),\n      // TODO(mmandlis): this.spec needs to be replace with a particle-spec loaded from\n      // .manifest files, instead of .ptcl ones.\n      slotNames: [...this.spec.slots.values()].map(s => s.name)\n    };\n  }\n  _info() {\n    return `---------- DomParticle::[${this.spec.name}]`;\n  }\n  async setViews(views) {\n    this._views = views;\n    let config = this.config;\n    //let readableViews = config.views.filter(name => views.get(name).canRead);\n    //this.when([new ViewChanges(views, readableViews, 'change')], async () => {\n    this.when([new ViewChanges(views, config.views, 'change')], async () => {\n      await this._updateAllViews(views, config);\n    });\n    // make sure we invalidate once, even if there are no incoming views\n    this._setState({});\n  }\n  async _updateAllViews(views, config) {\n    // acquire (async) list data from views\n    let data = await Promise.all(\n      config.views\n      .map(name => views.get(name))\n      .map(view => view.toList ? view.toList() : view.get())\n    );\n    // convert view data (array) into props (dictionary)\n    let props = Object.create(null);\n    config.views.forEach((name, i) => {\n      props[name] = data[i];\n    });\n    this._setProps(props);\n  }\n  _update(props, state) {\n    if (this._shouldRender(this._props, this._state)) { // TODO: should _shouldRender be slot specific?\n      this.relevance = 1; // TODO: improve relevance signal.\n    }\n    this.config.slotNames.forEach(s => this.render(s, ['model']));\n  }\n\n  render(slotName, contentTypes) {\n    let slot = this.getSlot(slotName);\n    if (!slot) {\n      return; // didn't receive StartRender.\n    }\n    contentTypes.forEach(ct => slot._requestedContentTypes.add(ct));\n    if (this._shouldRender(this._props, this._state)) {\n      let content = {};\n      if (slot._requestedContentTypes.has('template')) {\n        content['template'] = this.getTemplate(slot.slotName);\n      }\n      if (slot._requestedContentTypes.has('model')) {\n        content['model'] = this._render(this._props, this._state);\n      }\n      slot.render(content);\n    } else if (slot.isRendered) {\n      // Send empty object, to clear rendered slot contents.\n      slot.render({});\n    }\n  }\n  fireEvent(slotName, {handler, data}) {\n    if (this[handler]) {\n      this[handler]({data}, this._state);\n    }\n  }\n  setParticleDescription(pattern) {\n    if (typeof pattern === 'string') {\n      return super.setParticleDescription(pattern);\n    }\n    assert(!!pattern.template && !!pattern.model, 'Description pattern must either be string or have template and model');\n    super.setDescriptionPattern('_template_', pattern.template);\n    super.setDescriptionPattern('_model_', JSON.stringify(pattern.model));\n  }\n}\n\nexport default DomParticle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/dom-particle.js\n// module id = 6\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport runtime from './runtime.js';\nimport ParticleSpec from './particle-spec.js';\nimport tracing from '../tracelib/trace.js';\nimport assert from '../platform/assert-web.js';\nimport Schema from './schema.js';\n\n/** @class Particle\n * A basic particle. For particles that provide UI, you may like to\n * instead use DOMParticle.\n */\nexport class Particle {\n  constructor(capabilities) {\n    this.spec = this.constructor.spec;\n    if (this.spec.inputs.length == 0)\n      this.extraData = true;\n    this.relevances = [];\n    this._idle = Promise.resolve();\n    this._idleResolver = null;\n    this._busy = 0;\n    this.slotHandlers = [];\n    this.stateHandlers = new Map();\n    this.states = new Map();\n    this._slotByName = new Map();\n    this.capabilities = capabilities || {};\n  }\n\n  /** @method setViews(views)\n   * This method is invoked with a handle for each view this particle\n   * is registered to interact with, once those views are ready for\n   * interaction. Override the method to register for events from\n   * the views.\n   *\n   * Views is a map from view names to view handles.\n   */\n  setViews(views) {\n\n  }\n\n  constructInnerArc() {\n    if (!this.capabilities.constructInnerArc)\n      throw new Error('This particle is not allowed to construct inner arcs');\n    return this.capabilities.constructInnerArc(this);\n  }\n\n  get busy() {\n    return this._busy > 0;\n  }\n\n  get idle() {\n    return this._idle;\n  }\n\n  /** @method setBusy()\n   * Prevents this particle from indicating that it's idle until a matching\n   * call to setIdle is made.\n   */\n  setBusy() {\n    if (this._busy == 0)\n    this._idle = new Promise((resolve, reject) => {\n      this._idleResolver = resolve;\n    });\n    this._busy++;\n  }\n\n  /** @method setIdle()\n   * Indicates that a busy period (initiated by a call to setBusy) has completed.\n   */\n  setIdle() {\n    assert(this._busy > 0);\n    this._busy--;\n    if (this._busy == 0)\n      this._idleResolver();\n  }\n\n  set relevance(r) {\n    this.relevances.push(r);\n  }\n\n  inputs() {\n    return this.spec.inputs;\n  }\n\n  outputs() {\n    return this.spec.outputs;\n  }\n\n  /** @method getSlot(name)\n   * Returns the slot with provided name.\n   */\n  getSlot(name) {\n    return this._slotByName.get(name);\n  }\n\n  addSlotHandler(f) {\n    this.slotHandlers.push(f);\n  }\n\n  addStateHandler(states, f) {\n    states.forEach(state => {\n      if (!this.stateHandlers.has(state)) {\n        this.stateHandlers.set(state, []);\n      }\n      this.stateHandlers.get(state).push(f);\n    });\n  }\n\n  emit(state, value) {\n    this.states.set(state, value);\n    this.stateHandlers.get(state).forEach(f => f(value));\n  }\n\n  /** @method on(views, names, kind, f)\n   * Convenience method for registering a callback on multiple views at once.\n   *\n   * views is a map from names to view handles\n   * names indicates the views which should have a callback installed on them\n   * kind is the kind of event that should be registered for\n   * f is the callback function\n   */\n  on(views, names, kind, f) {\n    if (typeof names == 'string')\n      names = [names];\n    let trace = tracing.start({cat: 'particle', names: this.constructor.name + '::on', args: {view: names, event: kind}});\n    names.forEach(name => views.get(name).on(kind, tracing.wrap({cat: 'particle', name: this.constructor.name, args: {view: name, event: kind}}, f), this));\n    trace.end();\n  }\n\n  when(changes, f) {\n    changes.forEach(change => change.register(this, f));\n  }\n\n  fireEvent(slotName, event) {\n    // TODO(sjmiles): tests can get here without a `this.slot`, maybe this needs to be fixed in MockSlotManager?\n    let slot = this.getSlot(slotName);\n    assert(slot, `Particle::fireEvent: slot ${slotName} is falsey`);\n    slot.fireEvent(event);\n  }\n\n  static buildManifest(strings, ...bits) {\n    let output = [];\n    for (let i = 0; i < bits.length; i++) {\n        let str = strings[i];\n        let indent = / *$/.exec(str)[0];\n        let bitStr;\n        if (typeof bits[i] == 'string')\n          bitStr = bits[i];\n        else\n          bitStr = bits[i].toManifestString();\n        bitStr = bitStr.replace(/(\\n)/g, '$1' + indent);\n        output.push(str);\n        output.push(bitStr);\n    }\n    if (strings.length > bits.length)\n      output.push(strings[strings.length - 1]);\n    return output.join('');\n  }\n\n  setParticleDescription(pattern) {\n    return this.setDescriptionPattern('_pattern_', pattern);\n  }\n  setDescriptionPattern(connectionName, pattern) {\n    let descriptions = this._views.get('descriptions');\n    if (descriptions) {\n      descriptions.store(new descriptions.entityClass({key: connectionName, value: pattern}, connectionName));\n      return true;\n    }\n    return false;\n  }\n  // TODO: Move to transformation-particle class.\n  // TODO: Don't serialize schemas, once partial schemas are in use.\n  serializeSchema(hostedParticle) {\n    let hostedConnSchemas = new Set();\n    hostedParticle.connections.forEach(conn => {\n      hostedConnSchemas.add((conn.type.isSetView ? conn.type.primitiveType() : conn.type).entitySchema.toString());\n    });\n    let schemaString =\n`${[...hostedConnSchemas].map(schema => schema.toString()).join('\\n\\r')}\n${hostedParticle.toString()}`;\n    return schemaString;\n  }\n}\n\nexport class ViewChanges {\n  constructor(views, names, type) {\n    if (typeof names == 'string')\n      names = [names];\n    this.names = names;\n    this.views = views;\n    this.type = type;\n  }\n  register(particle, f) {\n    let modelCount = 0;\n    let afterAllModels = () => { if (++modelCount == this.names.length) { f(); } };\n\n    for (let name of this.names) {\n      let view = this.views.get(name);\n      view.synchronize(this.type, afterAllModels, f, particle);\n    }\n  }\n}\n\nexport class SlotChanges {\n  constructor() {\n  }\n  register(particle, f) {\n    particle.addSlotHandler(f);\n  }\n}\n\nexport class StateChanges {\n  constructor(states) {\n    if (typeof states == 'string')\n      states = [states];\n    this.states = states;\n  }\n  register(particle, f) {\n    particle.addStateHandler(this.states, f);\n  }\n}\n\nexport default {Particle, ViewChanges, SlotChanges, StateChanges};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/particle.js\n// module id = 7\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nexport default {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/platform/fs-web.js\n// module id = 8\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport Entity from './entity.js';\nimport Type from './type.js';\nimport Symbols from './symbols.js';\n\n// TODO: Should relations normalized by another layer, or here?\nclass Relation extends Entity {\n  constructor(...entities) {\n    super();\n    this.entities = entities;\n  }\n  get data() {\n    return this.entities.map(entity => entity[Symbols.identifier].toLiteral());\n  }\n  static typeFor(relation) {\n    let result = new Type(relation.entities.map(entity => entity.constructor.type), relation.constructor);\n    return result;\n  }\n}\n\nexport default Relation;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/relation.js\n// module id = 9\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\n\n// ShapeView {name, direction, type}\n// Slot {name, direction, isRequired, isSet}\n\nfunction _fromLiteral(member) {\n  if (!!member && typeof member == 'object')\n    return Type.fromLiteral(member);\n  return member;\n}\n\nfunction _toLiteral(member) {\n  if (!!member && member.toLiteral)\n    return member.toLiteral();\n  return member;\n}\n\nclass Shape {\n  constructor(views, slots) {\n    this.views = views;\n    this.slots = slots;\n    this._typeVars = [];\n    for (let view of views)\n      for (let field of ['type', 'name', 'direction'])\n        if (Shape.isTypeVar(view[field]))\n          this._typeVars.push({object: view, field});\n\n    for (let slot of slots)\n      for (let field of ['name', 'direction', 'isRequired', 'isSet'])\n        if (Shape.isTypeVar(slot[field]))\n          this._typeVars.push({object: slot, field});\n  }\n\n  toPrettyString() {\n    return 'SHAAAAPE';\n  }\n\n  static fromLiteral(data) {\n    let views = data.views.map(view => ({type: _fromLiteral(view.type), name: _fromLiteral(view.name), direction: _fromLiteral(view.direction)}));\n    let slots = data.slots.map(slot => ({name: _fromLiteral(slot.name), direction: _fromLiteral(slot.direction), isRequired: _fromLiteral(slot.isRequired), isSet: _fromLiteral(slot.isSet)}));\n    return new Shape(views, slots);\n  }\n\n  toLiteral() {\n    let views = this.views.map(view => ({type: _toLiteral(view.type), name: _toLiteral(view.name), direction: _toLiteral(view.direction)}));\n    let slots = this.slots.map(slot => ({name: _toLiteral(slot.name), direction: _toLiteral(slot.direction), isRequired: _toLiteral(slot.isRequired), isSet: _toLiteral(slot.isSet)}));\n    return {views, slots};\n  }\n\n  clone() {\n    let views = this.views.map(({name, direction, type}) => ({name, direction, type}));\n    let slots = this.slots.map(({name, direction, isRequired, isSet}) => ({name, direction, isRequired, isSet}));\n    return new Shape(views, slots);\n  }\n\n  equals(other) {\n    if (this.views.length !== other.views.length)\n      return false;\n\n    // TODO: this isn't quite right as it doesn't deal with duplicates properly\n    if (!this._equalItems(other.views, this.views, this._equalView)) {\n      return false;\n    }\n\n    if (!this._equalItems(other.slots, this.slots, this._equalSlot)) {\n      return false;\n    }\n    return true;\n  }\n\n  _equalView(view, otherView) {\n    return view.name == otherView.name && view.direction == otherView.direction && view.type.equals(otherView.type);\n  }\n\n  _equalSlot(slot, otherSlot) {\n    return slot.name == otherSlot.name && slot.direction == otherSlot.direction && slot.isRequired == otherSlot.isRequired && slot.isSet == otherSlot.isSet;\n  }\n\n  _equalItems(otherItems, items, compareItem) {\n    for (let otherItem of otherItems) {\n      let exists = false;\n      for (let item of items) {\n        if (compareItem(item, otherItem)) {\n          exists = true;\n          break;\n        }\n      }\n      if (!exists)\n        return false;\n    }\n\n    return true;\n  }\n\n  static isTypeVar(reference) {\n    return (reference instanceof Type) && reference.hasProperty(r => r.isVariable || r.isVariableReference);\n  }\n\n  static mustMatch(reference) {\n    return !(reference == undefined || Shape.isTypeVar(reference));\n  }\n\n  static viewsMatch(shapeView, particleView) {\n    if (Shape.mustMatch(shapeView.name) && shapeView.name !== particleView.name)\n      return false;\n    // TODO: direction subsetting?\n    if (Shape.mustMatch(shapeView.direction) && shapeView.direction !== particleView.direction)\n      return false;\n    // TODO: polymorphism?\n    if (Shape.mustMatch(shapeView.type) && !shapeView.type.equals(particleView.type))\n      return false;\n    return true;\n  }\n\n  static slotsMatch(shapeSlot, particleSlot) {\n    if (Shape.mustMatch(shapeSlot.name) && shapeSlot.name !== particleSlot.name)\n      return false;\n    if (Shape.mustMatch(shapeSlot.direction) && shapeSlot.direction !== particleSlot.direction)\n      return false;\n    if (Shape.mustMatch(shapeSlot.isRequired) && shapeSlot.isRequired !== particleSlot.isRequired)\n      return false;\n    if (Shape.mustMatch(shapeSlot.isSet) && shapeSlot.isSet !== particleSlot.isSet)\n      return false;\n    return true;\n  }\n\n  particleMatches(particleSpec) {\n    let viewMatches = this.views.map(view => particleSpec.connections.filter(connection => Shape.viewsMatch(view, connection)));\n    let particleSlots = [];\n    particleSpec.slots.forEach(consumedSlot => {\n      particleSlots.push({name: consumedSlot.name, direction: 'consume', isRequired: consumedSlot.isRequired, isSet: consumedSlot.isSet});\n      consumedSlot.providedSlots.forEach(providedSlot => {\n        particleSlots.push({name: providedSlot.name, direction: 'provide', isRequired: false, isSet: providedSlot.isSet});\n      });\n    });\n    let slotMatches = this.slots.map(slot => particleSlots.filter(particleSlot => Shape.slotsMatch(slot, particleSlot)));\n\n    let exclusions = [];\n\n    function choose(list, exclusions) {\n      if (list.length == 0)\n        return true;\n      let thisLevel = list.pop();\n      for (let connection of thisLevel) {\n        if (exclusions.includes(connection))\n          continue;\n        let newExclusions = exclusions.slice();\n        newExclusions.push(connection);\n        if (choose(list, newExclusions))\n          return true;\n      }\n\n      return false;\n    }\n    return choose(viewMatches, []) && choose(slotMatches, []);\n  }\n}\n\nexport default Shape;\n\nimport Type from './type.js';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/shape.js\n// module id = 10\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport DomParticle from './dom-particle.js';\n\n// Regex to separate style and template.\nlet re = /<style>((?:.|[\\r\\n])*)<\\/style>((?:.|[\\r\\n])*)/;\n\n/** @class TransformationDomParticle\n * Particle that does transformation stuff with DOM.\n */\nclass TransformationDomParticle extends DomParticle {\n  getTemplate(slotName) {\n    return this._state.template;\n  }\n  _render(props, state) {\n    return state.renderModel;\n  }\n  _shouldRender(props, state) {\n    return Boolean(state.template && state.renderModel);\n  }\n\n  renderHostedSlot(slotName, hostedSlotId, content) {\n    this.combineHostedTemplate(slotName, hostedSlotId, content);\n    this.combineHostedModel(slotName, hostedSlotId, content);\n  }\n\n  // abstract\n  combineHostedTemplate(slotName, hostedSlotId, content) {}\n  combineHostedModel(slotName, hostedSlotId, content) {}\n\n  // Helper methods that may be reused in transformation particles to combine hosted content.\n  static combineTemplates(transformationTemplate, hostedTemplate) {\n    let transformationMatch = transformationTemplate.match(re);\n    if (!transformationMatch || transformationMatch.length != 3) {\n      return;\n    }\n    let hostedMatch = hostedTemplate.match(re);\n    if (!hostedMatch || hostedMatch.length != 3) {\n      return;\n    }\n\n    return `\n      <style>${transformationMatch[1].trim()}${hostedMatch[1].trim()}</style>\n      ${transformationMatch[2].trim().replace('{{hostedParticle}}', hostedMatch[2].trim())}\n    `;\n  }\n  static propsToItems(propsValues) {\n    return propsValues ? propsValues.map(({rawData, id}) => Object.assign({}, rawData, {subId: id})) : [];\n  }\n}\n\nexport default TransformationDomParticle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/transformation-dom-particle.js\n// module id = 11\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nclass TypeVariable {\n  constructor(name, id) {\n    this.name = name;\n    this.id = id;\n    this.resolution = null;\n  }\n\n  toLiteral() {\n    return this;\n  }\n\n  static fromLiteral(data) {\n    return new TypeVariable(data.name, data.id);\n  }\n\n  get isResolved() {\n    return !!this.resolution;\n  }\n\n  resolve(type) {\n    this.resolution = type;\n  }\n\n  equals(other) {\n    if (this.isResolved && other.isResolved) {\n      return this.resolution.equals(other.resolution);\n    }\n    return this.name == other.name;\n  }\n}\n\nexport default TypeVariable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/type-variable.js\n// module id = 12\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport Loader from '../../../arcs/runtime/loader.js';\nimport particle from '../../../arcs/runtime/particle.js';\nimport DomParticle from '../../../arcs/runtime/dom-particle.js';\nimport TransformationDomParticle from '../../../arcs/runtime/transformation-dom-particle.js';\n\nconst logFactory = (preamble, color, log='log') => console[log].bind(console, `Ptcl:%c${preamble}`, `background: ${color}; color: white; padding: 1px 6px 2px 7px; border-radius: 4px;`);\nconst html = (strings, ...values) => (strings[0] + values.map((v, i) => v + strings[i + 1]).join('')).trim();\nconst dumbCache = {};\n\nexport default class BrowserLoader extends Loader {\n  constructor(urlMap) {\n    super();\n    this._urlMap = urlMap;\n  }\n  _loadURL(url) {\n    const resource = dumbCache[url];\n    if (resource) {\n      //console.warn('dumbCache hit for', url);\n    }\n    return resource || (dumbCache[url] = super._loadURL(url));\n  }\n  _resolve(path) {\n    //return new URL(path, this._base).href;\n    let url = this._urlMap[path];\n    if (!url && path) {\n      // TODO(sjmiles): inefficient!\n      let macro = Object.keys(this._urlMap).sort((a,b) => b.length - a.length).find(k => path.slice(0, k.length) == k);\n      if (macro) {\n        url = this._urlMap[macro] + path.slice(macro.length);\n      }\n    }\n    url = url || path;\n    //console.log(`browser-cdn-loader: resolve(${path}) = ${url}`);\n    return url;\n  }\n  loadResource(name) {\n    return this._loadURL(this._resolve(name));\n  }\n  requireParticle(fileName) {\n    let path = this._resolve(fileName);\n    // inject path to this particle into the UrlMap,\n    // allows \"foo.js\" particle to invoke `importScripts(resolver('foo/othermodule.js'))`\n    this.mapParticleUrl(path);\n    let result = [];\n    self.defineParticle = function(particleWrapper) {\n      result.push(particleWrapper);\n    };\n    importScripts(path);\n    delete self.defineParticle;\n    return this.unwrapParticle(result[0], logFactory(fileName.split('/').pop(), 'blue'));\n  }\n  mapParticleUrl(path) {\n    let parts = path.split('/');\n    let suffix = parts.pop();\n    let folder = parts.join('/');\n    let name = suffix.split('.').shift();\n    this._urlMap[name] = folder;\n  }\n  unwrapParticle(particleWrapper, log) {\n    // TODO(sjmiles): regarding `resolver`:\n    //  _resolve method allows particles to request remapping of assets paths\n    //  for use in DOM\n    let resolver = this._resolve.bind(this);\n    return particleWrapper({particle, Particle: particle.Particle, DomParticle, TransformationDomParticle, resolver, log, html});\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./source/browser-cdn-loader.js\n// module id = 13\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport Type from './type.js';\nimport handle from './handle.js';\n// import {define} from './particle.js';\nimport assert from '../platform/assert-web.js';\nimport {PECInnerPort} from './api-channel.js';\nimport ParticleSpec from './particle-spec.js';\nimport Schema from './schema.js';\n\nclass StorageProxy {\n  constructor(id, type, port, pec, name, version) {\n    this._id = id;\n    this._type = type;\n    this._port = port;\n    this._pec = pec;\n    this.name = name;\n    this._version = version;\n    this.state = 'outOfDate';\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  generateIDComponents() {\n    return this._pec.generateIDComponents();\n  }\n\n  on(type, callback, target, particleId) {\n    let dataFreeCallback = (d) => callback();\n    this.synchronize(type, dataFreeCallback, dataFreeCallback, target, particleId);\n  }\n\n  synchronize(type, modelCallback, callback, target, particleId) {\n    this._port.Synchronize({handle: this, modelCallback, callback, target, type, particleId});\n  }\n\n  get(particleId) {\n    return new Promise((resolve, reject) =>\n      this._port.HandleGet({callback: r => resolve(r), handle: this, particleId}));\n  }\n\n  toList(particleId) {\n    return new Promise((resolve, reject) =>\n      this._port.HandleToList({callback: r => resolve(r), handle: this, particleId}));\n  }\n\n  set(entity, particleId) {\n    this._port.HandleSet({data: entity, handle: this, particleId});\n  }\n\n  store(entity, particleId) {\n    this._port.HandleStore({data: entity, handle: this, particleId});\n  }\n\n  remove(entityId, particleId) {\n    this._port.HandleRemove({data: entityId, handle: this, particleId});\n  }\n\n  clear(particleId) {\n    this._port.HandleClear({handle: this, particleId});\n  }\n}\n\nclass InnerPEC {\n  constructor(port, idBase, loader) {\n    this._apiPort = new PECInnerPort(port);\n    this._particles = [];\n    this._idBase = idBase;\n    this._nextLocalID = 0;\n    this._loader = loader;\n    this._pendingLoads = [];\n\n    /*\n     * This code ensures that the relevant types are known\n     * in the scope object, because otherwise we can't do\n     * particleSpec resolution, which is currently a necessary\n     * part of particle construction.\n     *\n     * Possibly we should eventually consider having particle\n     * specifications separated from particle classes - and\n     * only keeping type information on the arc side.\n     */\n    this._apiPort.onDefineHandle = ({type, identifier, name, version}) => {\n      return new StorageProxy(identifier, type, this._apiPort, this, name, version);\n    };\n\n    this._apiPort.onCreateHandleCallback = ({type, id, name, callback}) => {\n      let proxy = new StorageProxy(id, type, this._apiPort, this, name, 0);\n      Promise.resolve().then(() => callback(proxy));\n      return proxy;\n    };\n\n    this._apiPort.onMapHandleCallback = ({id, callback}) => {\n      Promise.resolve().then(() => callback(id));\n      return id;\n    };\n\n    this._apiPort.onCreateSlotCallback = ({hostedSlotId, callback}) => {\n      Promise.resolve().then(() => callback(hostedSlotId));\n      return hostedSlotId;\n    };\n\n    this._apiPort.onInnerArcRender = ({transformationParticle, transformationSlotName, hostedSlotId, content}) => {\n      transformationParticle.renderHostedSlot(transformationSlotName, hostedSlotId, content);\n    };\n\n    this._apiPort.onDefineParticle = ({particleDefinition, particleFunction}) => {\n      let particle = define(particleDefinition, eval(particleFunction));\n      this._loader.registerParticle(particle);\n    };\n\n    this._apiPort.onStop = () => {\n      if (global.close) {\n        global.close();\n      }\n    };\n\n    this._apiPort.onInstantiateParticle =\n      ({id, spec, handles}) => this._instantiateParticle(id, spec, handles);\n\n    this._apiPort.onSimpleCallback = ({callback, data}) => callback(data);\n\n    this._apiPort.onConstructArcCallback = ({callback, arc}) => callback(arc);\n\n    this._apiPort.onAwaitIdle = ({version}) =>\n      this.idle.then(a => {\n        // TODO: dom-particles update is async, this is a workaround to allow dom-particles to\n        // update relevance, after handles are updated. Needs better idle signal.\n        setTimeout(() => { this._apiPort.Idle({version, relevance: this.relevance}); }, 0);\n      });\n\n    this._apiPort.onUIEvent = ({particle, slotName, event}) => particle.fireEvent(slotName, event);\n\n    this._apiPort.onStartRender = ({particle, slotName, contentTypes}) => {\n      /** @class Slot\n       * A representation of a consumed slot. Retrieved from a particle using\n       * particle.getSlot(name)\n       */\n      class Slotlet {\n        constructor(pec, particle, slotName) {\n          this._slotName = slotName;\n          this._particle = particle;\n          this._handlers = new Map();\n          this._pec = pec;\n          this._requestedContentTypes = new Set();\n        }\n        get particle() { return this._particle; }\n        get slotName() { return this._slotName; }\n        get isRendered() { return this._isRendered; }\n        /** @method render(content)\n         * renders content to the slot.\n         */\n        render(content) {\n          this._pec._apiPort.Render({particle, slotName, content});\n\n          Object.keys(content).forEach(key => { this._requestedContentTypes.delete(key); });\n          // Slot is considered rendered, if a non-empty content was sent and all requested content types were fullfilled.\n          this._isRendered = this._requestedContentTypes.size == 0 && (Object.keys(content).length > 0);\n        }\n        /** @method registerEventHandler(name, f)\n         * registers a callback to be invoked when 'name' event happens.\n         */\n        registerEventHandler(name, f) {\n          if (!this._handlers.has(name)) {\n            this._handlers.set(name, []);\n          }\n          this._handlers.get(name).push(f);\n        }\n        clearEventHandlers(name) {\n          this._handlers.set(name, []);\n        }\n        fireEvent(event) {\n          for (let handler of this._handlers.get(event.handler) || []) {\n            handler(event);\n          }\n        }\n      }\n\n      particle._slotByName.set(slotName, new Slotlet(this, particle, slotName));\n      particle.render(slotName, contentTypes);\n    };\n\n    this._apiPort.onStopRender = ({particle, slotName}) => {\n      assert(particle._slotByName.has(slotName),\n        `Stop render called for particle ${particle.name} slot ${slotName} without start render being called.`);\n      particle._slotByName.delete(slotName);\n    };\n  }\n\n  generateIDComponents() {\n    return {base: this._idBase, component: () => this._nextLocalID++};\n  }\n\n  generateID() {\n    return `${this._idBase}:${this._nextLocalID++}`;\n  }\n\n  innerArcHandle(arcId, particleId) {\n    let pec = this;\n    return {\n      createHandle: function(type, name) {\n        return new Promise((resolve, reject) =>\n          pec._apiPort.ArcCreateHandle({arc: arcId, type, name, callback: proxy => {\n            let v = handle.handleFor(proxy, proxy.type.isSetView, particleId);\n            v.entityClass = (proxy.type.isSetView ? proxy.type.primitiveType().entitySchema : proxy.type.entitySchema).entityClass();\n            resolve(v);\n          }}));\n      },\n      mapHandle: function(handle) {\n        return new Promise((resolve, reject) =>\n          pec._apiPort.ArcMapHandle({arc: arcId, handle, callback: id => {\n            resolve(id);\n          }}));\n      },\n      createSlot: function(transformationParticle, transformationSlotName, hostedParticleName, hostedSlotName) {\n        return new Promise((resolve, reject) =>\n          pec._apiPort.ArcCreateSlot({arc: arcId, transformationParticle, transformationSlotName, hostedParticleName, hostedSlotName, callback: hostedSlotId => {\n            resolve(hostedSlotId);\n          }}));\n      },\n      loadRecipe: function(recipe) {\n        // TODO: do we want to return a promise on completion?\n        return new Promise((resolve, reject) =>\n          pec._apiPort.ArcLoadRecipe({arc: arcId, recipe, callback: a => {\n            if (a == undefined)\n              resolve();\n            else\n              reject(a);\n          }}));\n      }\n    };\n  }\n\n  defaultCapabilitySet() {\n    return {\n      constructInnerArc: particle => {\n        return new Promise((resolve, reject) =>\n          this._apiPort.ConstructInnerArc({callback: arcId => {resolve(this.innerArcHandle(arcId, particle.id));}, particle}));\n      }\n    };\n  }\n\n  async _instantiateParticle(id, spec, proxies) {\n    let name = spec.name;\n    let resolve = null;\n    let p = new Promise((res, rej) => resolve = res);\n    this._pendingLoads.push(p);\n    let clazz = await this._loader.loadParticleClass(spec);\n    let capabilities = this.defaultCapabilitySet();\n    let particle = new clazz(); // TODO: how can i add an argument to DomParticle ctor?\n    particle.id = id;\n    particle.capabilities = capabilities;\n    this._particles.push(particle);\n\n    let handleMap = new Map();\n    proxies.forEach((value, key) => {\n      handleMap.set(key, handle.handleFor(value, value.type.isSetView, id, spec.connectionMap.get(key).isInput, spec.connectionMap.get(key).isOutput));\n    });\n\n    for (let localHandle of handleMap.values()) {\n      let type = localHandle.underlyingView().type;\n      let schemaModel;\n      if (type.isSetView && type.primitiveType().isEntity) {\n        schemaModel = type.primitiveType().entitySchema;\n      } else if (type.isEntity) {\n        schemaModel = type.entitySchema;\n      }\n\n      if (schemaModel)\n        localHandle.entityClass = schemaModel.entityClass();\n    }\n\n    return [particle, async () => {\n      resolve();\n      let idx = this._pendingLoads.indexOf(p);\n      this._pendingLoads.splice(idx, 1);\n      await particle.setViews(handleMap);\n    }];\n  }\n\n  get relevance() {\n    let rMap = new Map();\n    this._particles.forEach(p => {\n      if (p.relevances.length == 0)\n        return;\n      rMap.set(p, p.relevances);\n      p.relevances = [];\n    });\n    return rMap;\n  }\n\n  get busy() {\n    if (this._pendingLoads.length > 0)\n      return true;\n    for (let particle of this._particles) {\n      if (particle.busy) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  get idle() {\n    if (!this.busy) {\n      return Promise.resolve();\n    }\n    return Promise.all(this._pendingLoads.concat(this._particles.map(particle => particle.idle))).then(() => this.idle);\n  }\n}\n\nexport default InnerPEC;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/inner-PEC.js\n// module id = 14\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport InnerPec from '../../../arcs/runtime/inner-PEC.js';\nimport Loader from './browser-cdn-loader.js';\n\nconst log = console.log.bind(console, `%cworker-entry`, `background: #12005e; color: white; padding: 1px 6px 2px 7px; border-radius: 6px;`);\n\nself.onmessage = function(e) {\n  self.onmessage = null;\n  let {id, base} = e.data;\n  //log('starting worker', id);\n  new InnerPec(e.ports[0], id, new Loader(base));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./source/worker-entry-cdn.js\n// module id = 15\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/process/browser.js\n// module id = 16\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/buildin/global.js\n// module id = 17\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nlet supportedTypes = ['Text', 'URL', 'Number', 'Boolean'];\n\nclass JsonldToManifest {\n  static convert(jsonld, theClass) {\n    let obj = JSON.parse(jsonld);\n    let classes = {};\n    let properties = {};\n\n    if (!obj['@graph']) {\n      obj['@graph'] = [obj];\n    }\n\n    for (let item of obj['@graph']) {\n      if (item['@type'] == 'rdf:Property')\n        properties[item['@id']] = item;\n      else if (item['@type'] == 'rdfs:Class') {\n        classes[item['@id']] = item;\n        item.subclasses = [];\n        item.superclass = null;\n      }\n    }\n\n    for (let clazz of Object.values(classes)) {\n      if (clazz['rdfs:subClassOf'] !== undefined) {\n        if (clazz['rdfs:subClassOf'].length == undefined)\n          clazz['rdfs:subClassOf'] = [clazz['rdfs:subClassOf']];\n        for (let subClass of clazz['rdfs:subClassOf']) {\n          let superclass = subClass['@id'];\n          if (clazz.superclass == undefined)\n            clazz.superclass = [];\n          if (classes[superclass]) {\n            classes[superclass].subclasses.push(clazz);\n            clazz.superclass.push(classes[superclass]);\n          } else {\n            clazz.superclass.push({'@id': superclass});\n          }\n        }\n      }\n    }\n\n    for (let clazz of Object.values(classes)) {\n      if (clazz.subclasses.length == 0 && theClass == undefined) {\n        theClass = clazz;\n      }\n    }\n\n    let relevantProperties = [];\n    for (let property of Object.values(properties)) {\n      let domains = property['schema:domainIncludes'];\n      if (!domains)\n        domains = {'@id': theClass['@id']};\n      if (!domains.length)\n        domains = [domains];\n      domains = domains.map(a => a['@id']);\n      if (domains.includes(theClass['@id'])) {\n        let name = property['@id'].split(':')[1];\n        let type = property['schema:rangeIncludes'];\n        if (!type)\n          console.log(property);\n        if (!type.length)\n          type = [type];\n\n        type = type.map(a => a['@id'].split(':')[1]);\n        type = type.filter(type => supportedTypes.includes(type));\n        if (type.length > 0)\n        relevantProperties.push({name, type});\n      }\n    }\n\n    let className = theClass['@id'].split(':')[1];\n    let superNames = theClass.superclass ? theClass.superclass.map(a => a['@id'].split(':')[1]) : [];\n\n    let s = '';\n    for (let superName of superNames)\n      s += `import 'https://schema.org/${superName}'\\n\\n`;\n\n    s += `schema ${className}`;\n    if (superNames.length > 0)\n      s += ` extends ${superNames.join(', ')}`;\n\n    if (relevantProperties.length > 0) {\n      s += '\\n  optional';\n      for (let property of relevantProperties) {\n        let type;\n        if (property.type.length > 1)\n          type = '(' + property.type.join(' or ') + ')';\n        else\n          type = property.type[0];\n        s += `\\n    ${type} ${property.name}`;\n      }\n    }\n    s += '\\n';\n\n    return s;\n  }\n}\n\nexport default JsonldToManifest;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/converters/jsonldToManifest.js\n// module id = 18\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport AbstractDevtoolsChannel from '../runtime/debug/abstract-devtools-channel.js';\n\nexport default class ChromeExtensionChannel extends AbstractDevtoolsChannel {\n  constructor() {\n    super();\n    this._makeReady(); // TODO: Consider readiness if connecting via extension.\n  }\n\n  _flush(messages) {\n    document.dispatchEvent(new CustomEvent('arcs-debug', {detail: messages}));\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/platform/devtools-channel-web.js\n// module id = 19\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nexport default {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/platform/vm-web.js\n// module id = 20\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport ParticleSpec from './particle-spec.js';\nimport Type from './type.js';\nimport OuterPortAttachment from './debug/outer-port-attachment.js';\n\nclass ThingMapper {\n  constructor(prefix) {\n    this._prefix = prefix;\n    this._nextIdentifier = 0;\n    this._idMap = new Map();\n    this._reverseIdMap = new Map();\n  }\n\n  _newIdentifier() {\n    return this._prefix + (this._nextIdentifier++);\n  }\n\n  createMappingForThing(thing) {\n    assert(!this._reverseIdMap.has(thing));\n    let id = this._newIdentifier();\n    this.establishThingMapping(id, thing);\n    return id;\n  }\n\n  maybeCreateMappingForThing(thing) {\n    if (this.hasMappingForThing(thing)) {\n      return this.identifierForThing(thing);\n    }\n    return this.createMappingForThing(thing);\n  }\n\n  async establishThingMapping(id, thing) {\n    let continuation;\n    if (Array.isArray(thing)) {\n      [thing, continuation] = thing;\n    }\n    this._idMap.set(id, thing);\n    if (thing instanceof Promise) {\n      assert(continuation == null);\n      await this.establishThingMapping(id, await thing);\n    } else {\n      this._reverseIdMap.set(thing, id);\n      if (continuation) {\n        await continuation();\n      }\n    }\n  }\n\n  hasMappingForThing(thing) {\n    return this._reverseIdMap.has(thing);\n  }\n\n  identifierForThing(thing) {\n    assert(this._reverseIdMap.has(thing), `Missing thing ${thing}`);\n    return this._reverseIdMap.get(thing);\n  }\n\n  thingForIdentifier(id) {\n    assert(this._idMap.has(id), `Missing id: ${id}`);\n    return this._idMap.get(id);\n  }\n}\n\n\nclass APIPort {\n  constructor(messagePort, prefix) {\n    this._port = messagePort;\n    this._mapper = new ThingMapper(prefix);\n    this._messageMap = new Map();\n    this._port.onmessage = async e => this._handle(e);\n    this._debugAttachment = null;\n    this.messageCount = 0;\n\n    this.Direct = {\n      convert: a => a,\n      unconvert: a => a\n    };\n\n    this.Stringify = {\n      convert: a => a.toString(),\n      unconvert: a => eval(a)\n    };\n\n    this.LocalMapped = {\n      convert: a => this._mapper.maybeCreateMappingForThing(a),\n      unconvert: a => this._mapper.thingForIdentifier(a)\n    };\n\n    this.Mapped = {\n      convert: a => this._mapper.identifierForThing(a),\n      unconvert: a => this._mapper.thingForIdentifier(a)\n    };\n\n    this.Dictionary = function(primitive) {\n      return {\n        convert: a => {\n          let r = {};\n          for (let key in a) {\n            r[key] = primitive.convert(a[key]);\n          }\n          return r;\n        }\n      };\n    };\n\n    this.Map = function(keyprimitive, valueprimitive) {\n      return {\n        convert: a => {\n          let r = {};\n          a.forEach((value, key) => r[keyprimitive.convert(key)] = valueprimitive.convert(value));\n          return r;\n        },\n        unconvert: a => {\n          let r = new Map();\n          for (let key in a)\n            r.set(keyprimitive.unconvert(key), valueprimitive.unconvert(a[key]));\n          return r;\n        }\n      };\n    };\n\n    this.List = function(primitive) {\n      return {\n        convert: a => a.map(v => primitive.convert(v)),\n        unconvert: a => a.map(v => primitive.unconvert(v))\n      };\n    };\n\n    this.ByLiteral = function(clazz) {\n      return {\n        convert: a => a.toLiteral(),\n        unconvert: a => clazz.fromLiteral(a)\n      };\n    };\n  }\n\n  close() {\n    this._port.close();\n  }\n\n  async _handle(e) {\n    assert(this._messageMap.has(e.data.messageType));\n\n    this.messageCount++;\n\n    let handler = this._messageMap.get(e.data.messageType);\n    let args;\n    try {\n      args = this._unprocessArguments(handler.args, e.data.messageBody);\n    } catch (exc) {\n      console.error(`Exception during unmarshaling for ${e.data.messageType}`);\n      throw exc;\n    }\n    // If any of the converted arguments are still pending promises\n    // wait for them to complete before processing the message.\n    for (let arg of Object.values(args)) {\n      if (arg instanceof Promise) {\n        arg.then(() => this._handle(e));\n        return;\n      }\n    }\n    let handlerName = 'on' + e.data.messageType;\n    let result = this[handlerName](args);\n    if (this._debugAttachment && this._debugAttachment[handlerName]) {\n      this._debugAttachment[handlerName](args);\n    }\n    if (handler.isInitializer) {\n      assert(args.identifier);\n      await this._mapper.establishThingMapping(args.identifier, result);\n    }\n  }\n\n  _processArguments(argumentTypes, args) {\n    let messageBody = {};\n    for (let argument in argumentTypes)\n      messageBody[argument] = argumentTypes[argument].convert(args[argument]);\n    return messageBody;\n  }\n\n  _unprocessArguments(argumentTypes, args) {\n    let messageBody = {};\n    for (let argument in argumentTypes)\n      messageBody[argument] = argumentTypes[argument].unconvert(args[argument]);\n    return messageBody;\n  }\n\n  registerCall(name, argumentTypes) {\n    this[name] = args => {\n      let call = {messageType: name, messageBody: this._processArguments(argumentTypes, args)};\n      this._port.postMessage(call);\n      if (this._debugAttachment && this._debugAttachment[name]) {\n        this._debugAttachment[name](args);\n      }\n    };\n  }\n\n  registerHandler(name, argumentTypes) {\n    this._messageMap.set(name, {args: argumentTypes});\n  }\n\n  registerInitializerHandler(name, argumentTypes) {\n    argumentTypes.identifier = this.Direct;\n    this._messageMap.set(name, {\n      isInitializer: true,\n      args: argumentTypes,\n    });\n  }\n\n  registerInitializer(name, argumentTypes) {\n    this[name] = (thing, args) => {\n      let call = {messageType: name, messageBody: this._processArguments(argumentTypes, args)};\n      call.messageBody.identifier = this._mapper.createMappingForThing(thing);\n      this._port.postMessage(call);\n      if (this._debugAttachment && this._debugAttachment[name]) {\n        this._debugAttachment[name](thing, args);\n      }\n    };\n  }\n\n  registerRedundantInitializer(name, argumentTypes) {\n    this[name] = (thing, args) => {\n      if (this._mapper.hasMappingForThing(thing))\n        return;\n      let call = {messageType: name, messageBody: this._processArguments(argumentTypes, args)};\n      call.messageBody.identifier = this._mapper.createMappingForThing(thing);\n      this._port.postMessage(call);\n      if (this._debugAttachment && this._debugAttachment[name]) {\n        this._debugAttachment[name](thing, args);\n      }\n    };\n  }\n\n  initDebug(arcId) {\n    if (!this._debugAttachment) this._debugAttachment = new OuterPortAttachment(arcId);\n  }\n}\n\nclass PECOuterPort extends APIPort {\n  constructor(messagePort) {\n    super(messagePort, 'o');\n\n    this.registerCall('Stop', {});\n    this.registerCall('DefineParticle',\n      {particleDefinition: this.Direct, particleFunction: this.Stringify});\n    this.registerRedundantInitializer('DefineHandle', {type: this.ByLiteral(Type), name: this.Direct});\n    this.registerInitializer('InstantiateParticle',\n      {id: this.Direct, spec: this.ByLiteral(ParticleSpec), handles: this.Map(this.Direct, this.Mapped)});\n\n    this.registerCall('UIEvent', {particle: this.Mapped, slotName: this.Direct, event: this.Direct});\n    this.registerCall('SimpleCallback', {callback: this.Direct, data: this.Direct});\n    this.registerCall('AwaitIdle', {version: this.Direct});\n    this.registerCall('StartRender', {particle: this.Mapped, slotName: this.Direct, contentTypes: this.List(this.Direct)});\n    this.registerCall('StopRender', {particle: this.Mapped, slotName: this.Direct});\n\n    this.registerHandler('Render', {particle: this.Mapped, slotName: this.Direct, content: this.Direct});\n    this.registerHandler('Synchronize', {handle: this.Mapped, target: this.Mapped,\n                                    type: this.Direct, callback: this.Direct,\n                                    modelCallback: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleGet', {handle: this.Mapped, callback: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleToList', {handle: this.Mapped, callback: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleSet', {handle: this.Mapped, data: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleStore', {handle: this.Mapped, data: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleRemove', {handle: this.Mapped, data: this.Direct});\n    this.registerHandler('HandleClear', {handle: this.Mapped});\n    this.registerHandler('Idle', {version: this.Direct, relevance: this.Map(this.Mapped, this.Direct)});\n\n    this.registerHandler('ConstructInnerArc', {callback: this.Direct, particle: this.Mapped});\n    this.registerCall('ConstructArcCallback', {callback: this.Direct, arc: this.LocalMapped});\n\n    this.registerHandler('ArcCreateHandle', {callback: this.Direct, arc: this.LocalMapped, type: this.ByLiteral(Type), name: this.Direct});\n    this.registerInitializer('CreateHandleCallback', {callback: this.Direct, type: this.ByLiteral(Type), name: this.Direct, id: this.Direct});\n\n    this.registerHandler('ArcMapHandle', {callback: this.Direct, arc: this.LocalMapped, handle: this.Mapped});\n    this.registerInitializer('MapHandleCallback', {callback: this.Direct, id: this.Direct});\n\n    this.registerHandler('ArcCreateSlot',\n      {callback: this.Direct, arc: this.LocalMapped, transformationParticle: this.Mapped, transformationSlotName: this.Direct, hostedParticleName: this.Direct, hostedSlotName: this.Direct});\n    this.registerInitializer('CreateSlotCallback', {callback: this.Direct, hostedSlotId: this.Direct});\n    this.registerCall('InnerArcRender', {transformationParticle: this.Mapped, transformationSlotName: this.Direct, hostedSlotId: this.Direct, content: this.Direct});\n\n    this.registerHandler('ArcLoadRecipe', {arc: this.LocalMapped, recipe: this.Direct, callback: this.Direct});\n  }\n}\n\nclass PECInnerPort extends APIPort {\n  constructor(messagePort) {\n    super(messagePort, 'i');\n\n    this.registerHandler('Stop', {});\n    // particleFunction needs to be eval'd in context or it won't work.\n    this.registerHandler('DefineParticle',\n      {particleDefinition: this.Direct, particleFunction: this.Direct});\n    this.registerInitializerHandler('DefineHandle', {type: this.ByLiteral(Type), name: this.Direct});\n    this.registerInitializerHandler('InstantiateParticle',\n      {id: this.Direct, spec: this.ByLiteral(ParticleSpec), handles: this.Map(this.Direct, this.Mapped)});\n\n    this.registerHandler('UIEvent', {particle: this.Mapped, slotName: this.Direct, event: this.Direct});\n    this.registerHandler('SimpleCallback', {callback: this.LocalMapped, data: this.Direct});\n    this.registerHandler('AwaitIdle', {version: this.Direct});\n    this.registerHandler('StartRender', {particle: this.Mapped, slotName: this.Direct, contentTypes: this.Direct});\n    this.registerHandler('StopRender', {particle: this.Mapped, slotName: this.Direct});\n\n    this.registerCall('Render', {particle: this.Mapped, slotName: this.Direct, content: this.Direct});\n    this.registerCall('Synchronize', {handle: this.Mapped, target: this.Mapped,\n                                 type: this.Direct, callback: this.LocalMapped,\n                                 modelCallback: this.LocalMapped, particleId: this.Direct});\n    this.registerCall('HandleGet', {handle: this.Mapped, callback: this.LocalMapped, particleId: this.Direct});\n    this.registerCall('HandleToList', {handle: this.Mapped, callback: this.LocalMapped, particleId: this.Direct});\n    this.registerCall('HandleSet', {handle: this.Mapped, data: this.Direct, particleId: this.Direct});\n    this.registerCall('HandleStore', {handle: this.Mapped, data: this.Direct, particleId: this.Direct});\n    this.registerCall('HandleRemove', {handle: this.Mapped, data: this.Direct});\n    this.registerCall('HandleClear', {handle: this.Mapped});\n    this.registerCall('Idle', {version: this.Direct, relevance: this.Map(this.Mapped, this.Direct)});\n\n    this.registerCall('ConstructInnerArc', {callback: this.LocalMapped, particle: this.Mapped});\n    this.registerHandler('ConstructArcCallback', {callback: this.LocalMapped, arc: this.Direct});\n\n    this.registerCall('ArcCreateHandle', {callback: this.LocalMapped, arc: this.Direct, type: this.ByLiteral(Type), name: this.Direct});\n    this.registerInitializerHandler('CreateHandleCallback', {callback: this.LocalMapped, type: this.ByLiteral(Type), name: this.Direct, id: this.Direct});\n    this.registerCall('ArcMapHandle', {callback: this.LocalMapped, arc: this.Direct, handle: this.Mapped});\n    this.registerInitializerHandler('MapHandleCallback', {callback: this.LocalMapped, id: this.Direct});\n    this.registerCall('ArcCreateSlot',\n      {callback: this.LocalMapped, arc: this.Direct, transformationParticle: this.Mapped, transformationSlotName: this.Direct, hostedParticleName: this.Direct, hostedSlotName: this.Direct});\n    this.registerInitializerHandler('CreateSlotCallback', {callback: this.LocalMapped, hostedSlotId: this.Direct});\n    this.registerHandler('InnerArcRender', {transformationParticle: this.Mapped, transformationSlotName: this.Direct, hostedSlotId: this.Direct, content: this.Direct});\n\n    this.registerCall('ArcLoadRecipe', {arc: this.Direct, recipe: this.Direct, callback: this.LocalMapped});\n  }\n}\n\nexport {PECOuterPort as PECOuterPort, PECInnerPort as PECInnerPort};\nexport default {PECOuterPort, PECInnerPort};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/api-channel.js\n// module id = 21\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nlet nob = () => Object.create(null);\n\nexport default Base => class extends Base {\n  constructor() {\n    super();\n    this._pendingProps = nob();\n    this._props = this._getInitialProps() || nob();\n    this._lastProps = nob();\n    this._state = this._getInitialState() || nob();\n    this._lastState = nob();\n  }\n  _getInitialProps() {\n  }\n  _getInitialState() {\n  }\n  _getProperty(name) {\n    return this._pendingProps[name] || this._props[name];\n  }\n  _setProperty(name, value) {\n    // dirty checking opportunity\n    if (this._validator || this._wouldChangeProp(name, value)) {\n      this._pendingProps[name] = value;\n      this._invalidateProps();\n    }\n  }\n  _wouldChangeProp(name, value) {\n    return (typeof value === 'object') || (this._props[name] !== value);\n  }\n  _setProps(props) {\n    // TODO(sjmiles): should this be a replace instead of a merge?\n    Object.assign(this._pendingProps, props);\n    this._invalidateProps();\n  }\n  _invalidateProps() {\n    this._propsInvalid = true;\n    this._invalidate();\n  }\n  _setState(state) {\n    Object.assign(this._state, state);\n    this._invalidate();\n  }\n  _async(fn) {\n    // TODO(sjmiles): SystemJS throws unless `Promise` is `window.Promise`\n    return Promise.resolve().then(fn.bind(this));\n    //return setTimeout(fn.bind(this), 10);\n  }\n  _invalidate() {\n    if (!this._validator) {\n      //this._log('register _async validate');\n      //console.log(this.localName + (this.id ? '#' + this.id : '') + ': invalidated');\n      this._validator = this._async(this._validate);\n    }\n  }\n  _validate() {\n    // try..catch to ensure we nullify `validator` before return\n    try {\n      // TODO(sjmiles): should this be a replace instead of a merge?\n      Object.assign(this._props, this._pendingProps);\n      if (this._propsInvalid) {\n        // TODO(sjmiles): should/can have different timing from rendering?\n        this._willReceiveProps(this._props, this._state, this._lastProps);\n        this._propsInvalid = false;\n      }\n      if (this._shouldUpdate(this._props, this._state, this._lastProps, this._lastState)) {\n        // TODO(sjmiles): consider throttling render to rAF\n        this._ensureMount();\n        this._update(this._props, this._state, this._lastProps);\n      }\n    } catch (x) {\n      console.error(x);\n    }\n    // nullify validator _after_ methods so state changes don't reschedule validation\n    // TODO(sjmiles): can/should there ever be state changes fom inside _update()? In React no, in Xen yes (until I have a good reason not too).\n    this._validator = null;\n    // save the old props and state\n    // TODO(sjmiles): don't need to create these for default _shouldUpdate\n    this._lastProps = Object.assign(nob(), this._props);\n    //this._lastState = Object.assign(nob(), this._state);\n    this._didUpdate(this._props, this._state);\n  }\n  _ensureMount() {\n  }\n  _willReceiveProps(props, state) {\n  }\n  /*\n  _willReceiveState(props, state) {\n  }\n  */\n  _shouldUpdate(props, state, lastProps) {\n    return true;\n  }\n  _update(props, state) {\n  }\n  _didUpdate(props, state) {\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/browser/lib/xen-state.js\n// module id = 22\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nexport default class AbstractDevtoolsChannel {\n  constructor() {\n    this.debouncedMessages = [];\n    this.debouncing = false;\n    this.ready = new Promise((resolve, reject) => {\n      this._makeReady = resolve;\n    });\n  }\n\n  send(message) {\n    this.debouncedMessages.push(message);\n    if (!this.debouncing) {\n      this.debouncing = true;\n      setTimeout(() => {\n        this._flush(this.debouncedMessages);\n        this.debouncedMessages = [];\n        this.debouncing = false;\n      }, 100);\n    }\n  }\n\n  _flush(messages) {\n    throw 'Not implemented in an abstract class';\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/debug/abstract-devtools-channel.js\n// module id = 23\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport DevtoolsChannel from '../../platform/devtools-channel-web.js';\n\nlet instance = null;\nexport default {\n  get: () => {\n    if (!instance) instance = new DevtoolsChannel();\n    return instance;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/debug/devtools-channel-provider.js\n// module id = 24\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n 'use strict';\n\nimport devtoolsChannelProvider from './devtools-channel-provider.js';\n\nexport default class OuterPortAttachment {\n  constructor(arcId) {\n    this._arcId = arcId;\n    this._callbackRegistry = {};\n    this._particleRegistry = {};\n  }\n\n  InstantiateParticle(particle, {id, spec, handles}) {\n    this._particleRegistry[id] = spec;\n  }\n\n  SimpleCallback({callback, data}) {\n    let callbackDetails = this._callbackRegistry[callback];\n    if (callbackDetails) {\n      // Copying callback data, as the callback can be used multiple times.\n      this._sendMessage(Object.assign({}, callbackDetails), data);\n    }\n  }\n\n  onSynchronize({handle, target, callback, modelCallback, type, particleId}) {\n    this._callbackRegistry[callback] = this._describeHandleCall(\n      {operation: `on-${type}`, handle, particleId});\n    this._callbackRegistry[modelCallback] = this._describeHandleCall(\n      {operation: 'sync-model', handle, particleId});\n  }\n\n  onHandleGet({handle, callback, particleId}) {\n    this._callbackRegistry[callback] = this._describeHandleCall(\n      {operation: 'get', handle, particleId});\n  }\n\n  onHandleToList({handle, callback, particleId}) {\n    this._callbackRegistry[callback] = this._describeHandleCall(\n      {operation: 'toList', handle, particleId});\n  }\n\n  onHandleSet({handle, data, particleId}) {\n    this._logHandleCall({operation: 'set', handle, data, particleId});\n  }\n\n  onHandleStore({handle, data, particleId}) {\n    this._logHandleCall({operation: 'store', handle, data, particleId});\n  }\n\n  onHandleClear({handle, particleId}) {\n    this._logHandleCall({operation: 'clear', handle, particleId});\n  }\n\n  onHandleRemove({handle, data, particleId}) {\n    this._logHandleCall({operation: 'remove', handle, data, particleId});\n  }\n\n  _logHandleCall(args) {\n    this._sendMessage(this._describeHandleCall(args), args.data);\n  }\n\n  _sendMessage(messageBody, data) {\n    messageBody.data = JSON.stringify(data);\n    messageBody.timestamp = Date.now();\n    devtoolsChannelProvider.get().send({messageType: 'dataflow', messageBody});\n  }\n\n  _describeHandleCall({operation, handle, particleId}) {\n    return {\n      arcId: this._arcId,\n      operation,\n      particle: this._describeParticle(particleId),\n      handle: this._describeHandle(handle)\n    };\n  }\n\n  _describeParticle(id) {\n    let particleSpec = this._particleRegistry[id];\n    return {\n      id,\n      name: particleSpec && particleSpec.name\n      // TODO: Send entire spec only once and refer to it by ID in the tool.\n    };\n  }\n\n  _describeHandle(handle) {\n    return {\n      id: handle.id,\n      storageKey: handle._storageKey,\n      name: handle.name,\n      description: handle.description,\n      type: this._describeHandleType(handle._type)\n    };\n  }\n\n  // TODO: This is fragile and incomplete. Change this into sending entire\n  //       handle object once and refer back to it via its ID in the tool.\n  _describeHandleType(handleType) {\n    switch (handleType.constructor.name) {\n      case 'Type':\n        return `${handleType.tag} ${this._describeHandleType(handleType.data)}`;\n      case 'Schema':\n        return handleType.name;\n      case 'Shape':\n        return 'Shape';\n    }\n    return '';\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/debug/outer-port-attachment.js\n// module id = 25\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nexport default fetch;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/fetch-web.js\n// module id = 26\n// module chunks = 0","/** @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport Identifier from './identifier.js';\nimport Entity from './entity.js';\nimport Relation from './relation.js';\nimport Symbols from './symbols.js';\nlet identifier = Symbols.identifier;\nimport assert from '../platform/assert-web.js';\nimport ParticleSpec from './particle-spec.js';\n\n// TODO: This won't be needed once runtime is transferred between contexts.\nfunction cloneData(data) {\n  return data;\n  //return JSON.parse(JSON.stringify(data));\n}\n\nfunction restore(entry, entityClass) {\n  let {id, rawData} = entry;\n  let entity = new entityClass(cloneData(rawData));\n  if (entry.id) {\n    entity.identify(entry.id);\n  }\n\n  // TODO some relation magic, somewhere, at some point.\n\n  return entity;\n}\n\n/** @class Handle\n * Base class for Views and Variables.\n */\nclass Handle {\n  constructor(view, particleId, canRead, canWrite) {\n    this._view = view;\n    this.canRead = canRead;\n    this.canWrite = canWrite;\n    this._particleId = particleId;\n  }\n  underlyingView() {\n    return this._view;\n  }\n  /** @method on(kind, callback, target)\n   * Register for callbacks every time the requested kind of event occurs.\n   * Events are grouped into delivery sets by target, which should therefore\n   * be the recieving particle.\n   */\n  on(kind, callback, target) {\n    return this._view.on(kind, callback, target, this._particleId);\n  }\n\n  synchronize(kind, modelCallback, callback, target) {\n    return this._view.synchronize(kind, modelCallback, callback, target, this._particleId);\n  }\n\n  generateID() {\n    assert(this._view.generateID);\n    return this._view.generateID();\n  }\n\n  generateIDComponents() {\n    assert(this._view.generateIDComponents);\n    return this._view.generateIDComponents();\n  }\n\n  _serialize(entity) {\n    if (!entity.isIdentified())\n      entity.createIdentity(this.generateIDComponents());\n    let id = entity[identifier];\n    let rawData = entity.dataClone();\n    return {\n      id,\n      rawData\n    };\n  }\n\n  _restore(entry) {\n    assert(this.entityClass, 'Handles need entity classes for deserialization');\n    return restore(entry, this.entityClass);\n  }\n\n  get type() {\n    return this._view._type;\n  }\n  get name() {\n    return this._view.name;\n  }\n\n  get _id() {\n    return this._view._id;\n  }\n\n  toManifestString() {\n    return `'${this._id}'`;\n  }\n}\n\n/** @class View\n * A handle on a set of Entity data. Note that, as a set, a View can only contain\n * a single version of an Entity for each given ID. Further, no order is implied\n * by the set. A particle's manifest dictates the types of views that need to be\n * connected to that particle, and the current recipe identifies which views are\n * connected.\n */\nclass Collection extends Handle {\n  constructor(view, particleId, canRead, canWrite) {\n    // TODO: this should talk to an API inside the PEC.\n    super(view, particleId, canRead, canWrite);\n  }\n  query() {\n    // TODO: things\n  }\n  /** @method async toList()\n   * Returns a list of the Entities contained by the View.\n   * throws: Error if this view is not configured as a readable view (i.e. 'in' or 'inout')\n     in the particle's manifest.\n   */\n  async toList() {\n    // TODO: remove this and use query instead\n    if (!this.canRead)\n      throw new Error('View not readable');\n    return (await this._view.toList(this._particleId)).map(a => this._restore(a));\n  }\n\n  /** @method store(entity)\n   * Stores a new entity into the View.\n   * throws: Error if this view is not configured as a writeable view (i.e. 'out' or 'inout')\n     in the particle's manifest.\n   */\n  async store(entity) {\n    if (!this.canWrite)\n      throw new Error('View not writeable');\n    let serialization = this._serialize(entity);\n    return this._view.store(serialization, this._particleId);\n  }\n\n  /** @method remove(entity)\n   * Removes an entity from the View.\n   * throws: Error if this view is not configured as a writeable view (i.e. 'out' or 'inout')\n     in the particle's manifest.\n   */\n  async remove(entity) {\n    if (!this.canWrite)\n      throw new Error('View not writeable');\n    let serialization = this._serialize(entity);\n    return this._view.remove(serialization.id, this._particleId);\n  }\n}\n\n/** @class Variable\n * A handle on a single entity. A particle's manifest dictates\n * the types of views that need to be connected to that particle, and\n * the current recipe identifies which views are connected.\n */\nclass Variable extends Handle {\n  constructor(variable, canRead, canWrite, particleId) {\n    super(variable, canRead, canWrite, particleId);\n  }\n\n  /** @method async get()\n  * Returns the Entity contained by the Variable, or undefined if the Variable\n  * is cleared.\n  * throws: Error if this variable is not configured as a readable view (i.e. 'in' or 'inout')\n    in the particle's manifest.\n   */\n  async get() {\n    if (!this.canRead)\n      throw new Error('View not readable');\n    let result = await this._view.get(this._particleId);\n    if (result == null)\n      return undefined;\n    if (this.type.isEntity)\n      return this._restore(result);\n    if (this.type.isInterface)\n      return ParticleSpec.fromLiteral(result);\n    return result;\n  }\n\n  /** @method set(entity)\n   * Stores a new entity into the Variable, replacing any existing entity.\n   * throws: Error if this variable is not configured as a writeable view (i.e. 'out' or 'inout')\n     in the particle's manifest.\n   */\n  async set(entity) {\n    if (!this.canWrite)\n      throw new Error('View not writeable');\n    return this._view.set(this._serialize(entity), this._particleId);\n  }\n\n  /** @method clear()\n   * Clears any entity currently in the Variable.\n   * throws: Error if this variable is not configured as a writeable view (i.e. 'out' or 'inout')\n     in the particle's manifest.\n   */\n  async clear() {\n    if (!this.canWrite)\n      throw new Error('View not writeable');\n    await this._view.clear(this._particleId);\n  }\n}\n\nfunction handleFor(view, isSet, particleId, canRead = true, canWrite = true) {\n  return (isSet || (isSet == undefined && view.type.isSetView))\n      ? new Collection(view, particleId, canRead, canWrite)\n      : new Variable(view, particleId, canRead, canWrite);\n}\n\nexport default {handleFor};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/handle.js\n// module id = 27\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport Type from './type.js';\n\n// TODO: relation identifier should incorporate key/value identifiers\nclass Identifier {\n  constructor(view, type, key) {\n    this.view = type;\n    this.type = type;\n    this.key = key;\n  }\n  toLiteral() {\n    return [this.view, this.type.toLiteral(), this.key];\n  }\n  static fromLiteral(data) {\n    let [view, literalType, key] = data;\n    return new Identifier(view, Type.fromLiteral(literalType), key);\n  }\n}\n\nexport default Identifier;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/identifier.js\n// module id = 28\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport fs from '../platform/fs-web.js';\nimport vm from '../platform/vm-web.js';\nimport fetch from './fetch-web.js';\n\nimport assert from '../platform/assert-web.js';\nimport particle from './particle.js';\nimport DomParticle from './dom-particle.js';\nimport TransformationDomParticle from './transformation-dom-particle.js';\nimport JsonldToManifest from '../converters/jsonldToManifest.js';\n\nfunction schemaLocationFor(name) {\n  return `../entities/${name}.schema`;\n}\n\nclass Loader {\n  path(fileName) {\n    let path = fileName.replace(/[\\/][^\\/]+$/, '/');\n    return path;\n  }\n\n  join(prefix, path) {\n    if (/^https?:\\/\\//.test(path))\n      return path;\n    prefix = this.path(prefix);\n    return prefix + path;\n  }\n\n  loadResource(file) {\n    if (/^https?:\\/\\//.test(file))\n      return this._loadURL(file);\n    return this._loadFile(file);\n  }\n\n  _loadFile(file) {\n    return new Promise((resolve, reject) => {\n      fs.readFile(file, (err, data) => {\n        if (err)\n          reject(err);\n        else\n          resolve(data.toString('utf-8'));\n      });\n    });\n  }\n\n  _loadURL(url) {\n    if (/\\/\\/schema.org\\//.test(url)) {\n      if (url.endsWith('/Thing')) {\n        return fetch('https://schema.org/Product.jsonld').then(res => res.text()).then(data => JsonldToManifest.convert(data, {'@id': 'schema:Thing'}));\n      }\n      return fetch(url + '.jsonld').then(res => res.text()).then(data => JsonldToManifest.convert(data));\n    }\n    return fetch(url).then(res => res.text());\n  }\n\n  async loadParticleClass(spec) {\n    let clazz = await this.requireParticle(spec.implFile);\n    clazz.spec = spec;\n    return clazz;\n  }\n\n  async requireParticle(fileName) {\n    let src = await this.loadResource(fileName);\n    // Note. This is not real isolation.\n    let script = new vm.Script(src, {filename: fileName, displayErrors: true});\n    let result = [];\n    let self = {\n      defineParticle(particleWrapper) {\n        result.push(particleWrapper);\n      },\n      console,\n      importScripts: s => null //console.log(`(skipping browser-space import for [${s}])`)\n    };\n    script.runInNewContext(self, {filename: fileName, displayErrors: true});\n    assert(result.length > 0 && typeof result[0] == 'function', `Error while instantiating particle implementation from ${fileName}`);\n    return this.unwrapParticle(result[0]);\n  }\n\n  unwrapParticle(particleWrapper) {\n    return particleWrapper({particle, Particle: particle.Particle, DomParticle, TransformationDomParticle});\n  }\n\n}\n\nexport default Loader;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/loader.js\n// module id = 29\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\nimport Symbols from './symbols.js';\nimport Entity from './entity.js';\nimport Schema from './schema.js';\nimport Type from './type.js';\nimport Relation from './relation.js';\n\nfunction testEntityClass(type) {\n  return new Schema({\n    name: type,\n    sections: [{\n      sectionType: 'normative',\n      fields: {'id': 'Number', 'value': 'Text'}\n    }],\n    parents: [],\n  }).entityClass();\n}\n\nlet BasicEntity = testEntityClass('BasicEntity');\n\nexport default {\n  Entity,\n  BasicEntity,\n  Relation,\n  testing: {\n    testEntityClass,\n  },\n  internals: {\n    identifier: Symbols.identifier,\n    Type,\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/runtime.js\n// module id = 30\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\n\nexport default class TupleFields {\n  constructor(fieldList) {\n    this.fieldList = fieldList;\n  }\n\n  static fromLiteral(literal) {\n    return new TupleFields(literal.map(a => Type.fromLiteral(a)));\n  }\n\n  toLiteral() {\n    return this.fieldList.map(a => a.toLiteral());\n  }\n\n  clone() {\n    return new TupleFields(this.fieldList.map(a => a.clone()));\n  }\n\n  equals(other) {\n    if (this.fieldList.length !== other.fieldList.length)\n      return false;\n    for (let i = 0; i < this.fieldList.length; i++) {\n      if (!this.fieldList[i].equals(other.fieldList[i]))\n        return false;\n    }\n    return true;\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/runtime/tuple-fields.js\n// module id = 31\n// module chunks = 0","/*\n  Copyright 2015 Google Inc. All Rights Reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport fs from '../platform/fs-web.js';\n\nlet events = [];\nlet pid;\nlet now;\nif (typeof document == 'object') {\n  pid = 42;\n  now = function() {\n    let t = performance.now();\n    return t;\n  };\n} else {\n  pid = process.pid;\n  now = function() {\n    let t = process.hrtime();\n    return t[0] * 1000000 + t[1] / 1000;\n  };\n}\n\nlet flowId = 0;\n\nfunction parseInfo(info) {\n  if (!info)\n    return {};\n  if (typeof info == 'function')\n    return parseInfo(info());\n  if (info.toTraceInfo)\n    return parseInfo(info.toTraceInfo());\n  return info;\n}\n\nlet module = {exports: {}};\nexport default module.exports;\nmodule.exports.enabled = false;\nmodule.exports.enable = function() {\n  module.exports.enabled = true;\n  init();\n};\n\n// TODO: Add back support for options.\n//module.exports.options = options;\n//var enabled = Boolean(options.traceFile);\n\nfunction init() {\n  let result = {\n    wait: function(f) {\n      if (f instanceof Function) {\n        return f();\n      }\n      return f;\n    },\n    resume: function() {\n      return this;\n    },\n    start: function() {\n      return this;\n    },\n    end: function() {\n      return this;\n    },\n    step: function() {\n      return this;\n    },\n    endWrap: function(fn) {\n      return fn;\n    },\n  };\n  module.exports.wrap = function(info, fn) {\n    return fn;\n  };\n  module.exports.start = function(info, fn) {\n    return result;\n  };\n  module.exports.async = function(info, fn) {\n    return result;\n  };\n  module.exports.flow = function(info, fn) {\n    return result;\n  };\n  module.exports.dump = function() {\n  };\n\n  if (!module.exports.enabled) {\n    return;\n  }\n\n  module.exports.wrap = function(info, fn) {\n    return function(...args) {\n      let t = module.exports.start(info);\n      try {\n        return fn(...args);\n      } finally {\n        t.end();\n      }\n    };\n  };\n  module.exports.start = function(info) {\n    info = parseInfo(info);\n    let args = info.args || {};\n    let begin = now();\n    return {\n      end: function(endInfo) {\n        if (endInfo && endInfo.args) {\n          Object.assign(args, endInfo.args);\n        }\n        let end = now();\n        events.push({\n          ph: 'X',\n          ts: begin,\n          dur: end - begin,\n          cat: info.cat,\n          name: info.name,\n          args: args,\n        });\n      },\n    };\n  };\n  // TODO: perhaps this should just be the only API, it acts the same as\n  //       start() when there is no call to wait/resume().\n  module.exports.async = function(info) {\n    let trace = module.exports.start(info);\n    let flow;\n    let baseInfo = {cat: info.cat, name: info.name + ' (async)'};\n    let n = 0;\n    return {\n      async wait(v) {\n        let result;\n        if (v instanceof Promise) {\n          result = f;\n        } else {\n          result = v();\n        }\n        if (!flow) {\n          flow = module.exports.flow(baseInfo).start();\n        }\n        trace.end();\n        trace = null;\n        return result;\n      },\n      resume(info) {\n        if (info) {\n          Object.assign(info, baseInfo);\n        } else {\n          info = baseInfo;\n        }\n        trace = module.exports.start(info);\n        flow.step(baseInfo);\n      },\n      end(endInfo) {\n        if (flow) {\n          flow.end();\n        }\n        trace.end(endInfo);\n      },\n    };\n  };\n  module.exports.flow = function(info) {\n    info = parseInfo(info);\n    let id = flowId++;\n    let started = false;\n    return {\n      start: function() {\n        let begin = now();\n        started = true;\n        events.push({\n          ph: 's',\n          ts: begin,\n          cat: info.cat,\n          name: info.name,\n          args: info.args,\n          id: id,\n        });\n        return this;\n      },\n      end: function(endInfo) {\n        if (!started) return;\n        let end = now();\n        endInfo = parseInfo(endInfo);\n        events.push({\n          ph: 'f',\n          bp: 'e', // binding point is enclosing slice.\n          ts: end,\n          cat: info.cat,\n          name: info.name,\n          args: endInfo && endInfo.args,\n          id: id,\n        });\n        return this;\n      },\n      step: function(stepInfo) {\n        if (!started) return;\n        let step = now();\n        stepInfo = parseInfo(stepInfo);\n        events.push({\n          ph: 't',\n          ts: step,\n          cat: info.cat,\n          name: info.name,\n          args: stepInfo && stepInfo.args,\n          id: id,\n        });\n        return this;\n      },\n    };\n  };\n  module.exports.save = function() {\n    events.forEach(function(event) {\n      event.pid = pid;\n      event.tid = 0;\n      if (!event.args) {\n        delete event.args;\n      }\n      if (!event.cat) {\n        event.cat = '';\n      }\n    });\n    return {traceEvents: events};\n  };\n  module.exports.dump = function() {\n    fs.writeFileSync(options.traceFile, module.exports.save());\n  };\n  module.exports.download = function() {\n    let a = document.createElement('a');\n    a.download = 'trace.json';\n    a.href = 'data:text/plain;base64,' + btoa(JSON.stringify(module.exports.save()));\n    a.click();\n  };\n}\n\ninit();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/sjmiles/Sites/projects/arcs/arcs/tracelib/trace.js\n// module id = 32\n// module chunks = 0"],"sourceRoot":""}