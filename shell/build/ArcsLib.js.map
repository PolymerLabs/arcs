{"version":3,"sources":["webpack:///webpack/bootstrap e666a7220d5d8f61c2fb","webpack:///./platform/assert-web.js","webpack:///./runtime/recipe/recipe.js","webpack:///./strategizer/strategizer.js","webpack:///./runtime/recipe/walker.js","webpack:///./runtime/type.js","webpack:///./runtime/recipe/util.js","webpack:///./runtime/recipe/recipe-util.js","webpack:///./tracelib/trace.js","webpack:///./runtime/schema.js","webpack:///./runtime/particle-spec.js","webpack:///./runtime/recipe/type-checker.js","webpack:///./runtime/manifest.js","webpack:///./runtime/debug/devtools-channel-provider.js","webpack:///./runtime/description.js","webpack:///./runtime/entity.js","webpack:///./runtime/symbols.js","webpack:///./runtime/scheduler.js","webpack:///./runtime/dom-particle.js","webpack:///./runtime/loader.js","webpack:///./runtime/particle.js","webpack:///./runtime/relation.js","webpack:///./runtime/shape.js","webpack:///./runtime/strategies/handle-mapper-base.js","webpack:///./runtime/strategies/map-slots.js","webpack:///./runtime/transformation-dom-particle.js","webpack:///./runtime/dom-slot.js","webpack:///./runtime/planner.js","webpack:///./~/process/browser.js","webpack:///(webpack)/buildin/global.js","webpack:///./platform/fs-web.js","webpack:///./runtime/api-channel.js","webpack:///./runtime/dom-context.js","webpack:///./runtime/handle.js","webpack:///./runtime/multiplexer-dom-particle.js","webpack:///./runtime/recipe/handle.js","webpack:///./runtime/recipe/search.js","webpack:///./runtime/runtime.js","webpack:///./runtime/slot.js","webpack:///./runtime/storage/key-base.js","webpack:///./runtime/storage/storage-provider-base.js","webpack:///./runtime/storage/storage-provider-factory.js","webpack:///./runtime/strategies/add-use-handles.js","webpack:///./runtime/strategies/assign-handles-by-tag-and-type.js","webpack:///./runtime/strategies/assign-remote-handles.js","webpack:///./runtime/strategies/convert-constraints-to-connections.js","webpack:///./runtime/strategies/copy-remote-handles.js","webpack:///./runtime/strategies/create-description-handle.js","webpack:///./runtime/strategies/create-handles.js","webpack:///./runtime/strategies/fallback-fate.js","webpack:///./runtime/strategies/group-handle-connections.js","webpack:///./runtime/strategies/init-population.js","webpack:///./runtime/strategies/init-search.js","webpack:///./runtime/strategies/match-free-handles-to-connections.js","webpack:///./runtime/strategies/match-particle-by-verb.js","webpack:///./runtime/strategies/match-recipe-by-verb.js","webpack:///./runtime/strategies/name-unnamed-connections.js","webpack:///./runtime/strategies/resolve-recipe.js","webpack:///./runtime/strategies/search-tokens-to-particles.js","webpack:///./runtime/type-variable.js","webpack:///./runtime/arc.js","webpack:///./runtime/slot-composer.js","webpack:///./shell/source/browser-loader.js","webpack:///./devtools/shared/arc-registry.js","webpack:///./platform/btoa-web.js","webpack:///./platform/deviceinfo-web.js","webpack:///./platform/devtools-channel-web.js","webpack:///./platform/firebase-web.js","webpack:///./platform/vm-web.js","webpack:///./runtime/build/manifest-parser.js","webpack:///./runtime/converters/jsonldToManifest.js","webpack:///./runtime/debug/abstract-devtools-channel.js","webpack:///./runtime/debug/arc-debug-handler.js","webpack:///./runtime/debug/arc-planner-invoker.js","webpack:///./runtime/debug/outer-port-attachment.js","webpack:///./runtime/debug/strategy-explorer-adapter.js","webpack:///./runtime/debug/tracing-adapter.js","webpack:///./runtime/description-dom-formatter.js","webpack:///./runtime/fake-pec-factory.js","webpack:///./runtime/fetch-web.js","webpack:///./runtime/id.js","webpack:///./runtime/inner-PEC.js","webpack:///./runtime/manifest-meta.js","webpack:///./runtime/message-channel.js","webpack:///./runtime/outer-PEC.js","webpack:///./runtime/particle-execution-context.js","webpack:///./runtime/random.js","webpack:///./runtime/recipe/connection-constraint.js","webpack:///./runtime/recipe/digest-web.js","webpack:///./runtime/recipe/handle-connection.js","webpack:///./runtime/recipe/particle.js","webpack:///./runtime/recipe/slot-connection.js","webpack:///./runtime/recipe/slot.js","webpack:///./runtime/recipe/walker-base.js","webpack:///./runtime/relevance.js","webpack:///./runtime/speculator.js","webpack:///./runtime/storage/firebase-storage.js","webpack:///./runtime/storage/in-memory-storage.js","webpack:///./runtime/strategies/combined-strategy.js","webpack:///./runtime/strategies/rulesets.js","webpack:///./runtime/tuple-fields.js","webpack:///./shell/components/xen/xen-state.js","webpack:///./shell/components/xen/xen-template.js","webpack:///./shell/source/ArcsLib.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;;;;;;;;;ACZA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2DAA2D,2GAAsD,IAAI,mBAAmB;AACxI;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,wBAAwB;AAC3C,uBAAuB,wBAAwB;AAC/C,mBAAmB,wBAAwB,EAAE;AAC7C,4BAA4B,6BAA6B;AACzD,iBAAiB,sBAAsB,EAAE;AACzC,wBAAwB,yBAAyB;AACjD,eAAe,oBAAoB,EAAE;AACrC,oBAAoB,qBAAqB;AACzC,+BAA+B,oCAAoC;AACnE,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yKAAgF,UAAU;AAC1F;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,IAAI;AACrC,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI;AACjC,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI;AACjC,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,uBAAuB;AACjC;AACA;AACA;AACA,yBAAyB,iCAAiC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA,6BAA6B,YAAY,KAAK,UAAU;AACxD;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;;;;;;;AC7dA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uCAAuC,oDAAoD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;;AAEA,mBAAmB,2DAA2D;AAC9E;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAA2D;AAC/E;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mCAAmC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;ACvXA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAwC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gDAAgD;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sCAAsC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8CAA8C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;;ACnEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oCAAoC,KAAK;AACzC;AACA;AACA,MAAM;AACN;AACA,2CAA2C,UAAU,EAAE,SAAS;AAChE;AACA,qBAAqB,KAAK;AAC1B,kHAAyB,KAAK,MAAM,EAAE,SAAS,IAAI,WAAW,kBAAkB,KAAK;AACrF;AACA,MAAM;AACN,6CAA6C,KAAK;AAClD;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,kGAAqC,WAAW,GAAG,KAAK;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sJAA6D,KAAK;AAClE;AACA;AACA;AACA;AACA,gB;AACA;;AAEA;AACA;AACA,wJAA+D,KAAK;AACpE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mJAA0D,KAAK;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gJAAuD,KAAK;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2IAAkD,KAAK;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6KAAoF,wBAAwB;AAC5G;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,iBAAiB,eAAe;AAChC,+IAAsD,qBAAqB;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,sCAAsC;AACtD;AACA;AACA,sFAAsF,UAAU;AAChG;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AC3YA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzDA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,iDAAiD;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,eAAe;AACxC;AACA;AACA,cAAc;AACd,KAAK;AACL;;AAEA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;+CC/PA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA,KAAK;AACL;;AAEA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,OAAO;AACP;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE,SAAS;AACT,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA,OAAO;AACP;AACA,uCAAuC;AACvC;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACrQA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB,sCAAsC,kBAAkB;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA,mBAAmB,sBAAsB;AACzC;AACA,6CAA6C,UAAU,aAAa,UAAU;AAC9E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,UAAU,aAAa,UAAU;AACjF;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,GAAG,SAAS,MAAM,iBAAiB,UAAU;AAC9E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,GAAG,aAAa,KAAK,SAAS,UAAU,EAAE;AACzE,wBAAwB,MAAM,YAAY,cAAc;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,GAAG,aAAa,KAAK,WAAW,gBAAgB,GAAG;AAClF,wBAAwB,MAAM,YAAY,cAAc;;AAExD;AACA;AACA;AACA,0CAA0C,GAAG,SAAS,KAAK,yBAAyB,MAAM;AAC1F;AACA;AACA,mDAAmD,GAAG,aAAa,KAAK;AACxE,oCAAoC,gBAAgB,gBAAgB,MAAM;AAC1E;AACA;AACA;AACA;AACA;AACA,mCAAmC,GAAG,aAAa,KAAK,WAAW,gBAAgB,GAAG;AACtF,4BAA4B,MAAM,aAAa,iBAAiB,YAAY,EAAE;AAC9E;AACA,WAAW;AACX;;AAEA;AACA,0CAA0C,eAAe,aAAa,UAAU;AAChF;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,iBAAiB;AAC3D,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,sEAAsE,yBAAyB,GAAG,KAAK;AACvG,cAAc,MAAM,EAAE,EAAE,QAAQ;AAChC;;AAEA;AACA;AACA,2BAA2B,qBAAqB;AAChD,2EAA2E,yBAAyB,GAAG,KAAK;AAC5G;AACA,sCAAsC,yBAAyB;AAC/D;AACA;AACA,8BAA8B,KAAK,KAAK,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvTA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kGAAqC,KAAK,GAAG,2CAA2C;AACxF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS,4DAA4D;AACrE;AACA,WAAW,kCAAkC;AAC7C;AACA,cAAc;AACd,KAAK;AACL,YAAY;AACZ;;AAEA;AACA,SAAS,4DAA4D;AACrE,sBAAsB,kCAAkC,OAAO,+GAA0D;AACzH,6BAA6B,4DAA4D;AACzF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8MAAqH,EAAE;AACvH,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,UAAU,OAAO,cAAc;AAC5D,gDAAgD,aAAa,GAAG,mBAAmB,EAAE,yBAAyB,GAAG,QAAQ;AACzH,sBAAsB,iBAAiB,GAAG,mBAAmB;AAC7D,uFAAuF,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA,2CAA2C,cAAc;AACzD;AACA,6DAA6D,IAAI;AACjE,OAAO;AACP,KAAK;AACL;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA,8BAA8B,QAAQ,KAAK,WAAW;AACtD;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AChOA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0JAAiE,KAAK;;AAEtE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AC7OA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,QAAQ;AAC9F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,2BAA2B;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,GAAG,oBAAoB;AAC7C;AACA;AACA;AACA,SAAS,aAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gIAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA,SAAS,yCAAyC;AAClD;AACA,4BAA4B;AAC5B,qBAAqB,SAAS;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,qBAAqB,iCAAiC;AACtD;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS,IAAI,SAAS,SAAS,sBAAsB;AAC5E,EAAE;AACF,IAAI;AACJ,IAAI,UAAU;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iCAAiC,GAAG;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,SAAS;AAC/E,SAAS;AACT;AACA,uFAAuF,OAAO;AAC9F;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,kCAAkC,KAAK,2BAA2B,KAAK,MAAM,aAAa;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAAyC,4BAA4B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX,uCAAuC,MAAM,KAAK,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,WAAW;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,WAAW;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA,kBAAkB,OAAO,yCAAyC,KAAK;AACvE;AACA;AACA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iFAAiF,yBAAyB;AAC1G;AACA;AACA,iFAAiF,uBAAuB;AACxG;AACA;AACA,+DAA+D,sBAAsB,sBAAsB,yBAAyB;AACpI;AACA;AACA,+DAA+D,oBAAoB,sBAAsB,uBAAuB;AAChI;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8IAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mKAA0E,UAAU;AACpF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,cAAc;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sCAAsC;AAC/D;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB,yBAAyB,qBAAqB,cAAc,cAAc;AACjH;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B,qBAAqB,uBAAuB,cAAc;AACpF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX,qIAA4C,gBAAgB;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,+BAA+B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB,0BAA0B,gBAAgB;AAClG;AACA,sBAAsB,sBAAsB,YAAY,oBAAoB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yBAAyB,uBAAuB,cAAc;AAChG;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS,uBAAuB,cAAc;AAClF;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB,iCAAiC,yBAAyB;AAC1G,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,aAAa,OAAO,wBAAwB;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qCAAqC,OAAO,yBAAyB,GAAG;AACxE;AACA;AACA;AACA;AACA,KAAK;AACL,yEAAyE,OAAO,KAAK,UAAU;AAC/F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,OAAO;AACP;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA,wBAAwB,oBAAoB;AAC5C,OAAO;AACP,gCAAgC,WAAW;AAC3C;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;;;;;;;ACl8BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACnBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,aAAa,kBAAkB;AAC/B,mBAAmB,wBAAwB;AAC3C,4BAA4B,6BAA6B;;AAEzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,oBAAoB;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,QAAQ;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2BAA2B,EAAE,MAAM,EAAE,WAAW;AAChE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,0BAA0B,EAAE,wBAAwB,EAAE,eAAe,EAAE,qDAAqD;AAC1I;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;;AAEA;AACA;AACA,kIAAyC,eAAe;AACxD;AACA,yLAAgG,aAAa;AAC7G;AACA,0KAAiF,aAAa;AAC9F;AACA,qDAAqD,aAAa;AAClE;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+IAAsD,sBAAsB;AAC5E,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4IAAmD,YAAY;;AAE/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,YAAY,IAAI,YAAY;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iJAAwD,YAAY;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,sJAA6D,qBAAqB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,2BAA2B,QAAQ,oBAAoB;AACzE;AACA;AACA,KAAK;AACL,gBAAgB,kBAAkB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD,gCAAgC,EAAE;AACrF,mDAAmD,gCAAgC,EAAE;AACrF;AACA;AACA;AAAA;AAAA;;;;;;;;;;ACtfA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB,OAAO,sBAAsB;AAC3D;AACA,cAAc,gBAAgB,GAAG,uBAAuB;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAAgB;;;;;;;;;ACThB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC,mCAAmC;;AAErE;AACA,0FAA8B,4CAA4C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,2FAA+B,yDAAyD,sEAAsE;;AAE9J;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACrGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAIC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACxLA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,KAAK;AAC7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA,+QAA+H,sBAAsB;AACrJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uGAAqC,wCAAwC;AAC7E;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oFAAoF,EAAE;AACtF;AACA,kCAAkC,wCAAwC;AAC1E,mNAA0H,SAAS;AACnI;AACA;;AAEA;AACA,4BAA4B,ocAA4G;AACxI;;AAEA;;AAEA;;;;;;;;;;;;ACjGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA+B,+DAA+D,0BAA0B;AACxH,6HAAiE,qDAAqD,yBAAyB;AAC/I;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uIAA8C,SAAS;AACvD;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,oCAAoC;AAC3F;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yCAAyC,KAAK,EAAE;;AAEhF;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA,0DAAgB;;;;;;;;;;;AC3NhB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC7BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gBAAgB;AAChB,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;;AAErD;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,8CAA8C,EAAE,gBAAgB,EAAE,qCAAqC;AACzH,OAAO;AACP;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe,GAAG,4BAA4B,EAAE,iCAAiC;AACzG;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,IAAI,UAAU,GAAG,gCAAgC;AACjD,EAAE;AACF;AACA;;AAEA;AACA,+CAA+C,4GAA4G;AAC3J,yCAAyC,mJAAmJ;AAC5L;AACA;;AAEA;AACA,+CAA+C,sGAAsG;AACrJ,yCAAyC,2IAA2I;AACpL,YAAY;AACZ;;AAEA;AACA,qCAAqC,sBAAsB,OAAO,sBAAsB;AACxF,iCAAiC,mCAAmC,OAAO,mCAAmC;AAC9G;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gD;AACA;;AAEA;;AAEA;AACA,6DAA6D,kEAAkE;AAC/H;;AAEA;AACA;AACA,0BAA0B,8GAA8G;AACxI;AACA,4BAA4B,4FAA4F;AACxH,OAAO;AACP,KAAK;AACL;AACA,uEAAuE,0BAA0B;;AAEjG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;ACvRA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX,6BAA6B;AAC7B;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;;ACjFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,6BAA6B,UAAU,gBAAgB;AAC9F;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;AC7IA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,8BAA8B,EAAE,sBAAsB;AACrE,QAAQ,yCAAyC,gBAAgB;AACjE;AACA;AACA;AACA,2CAA2C,YAAY,qBAAqB,YAAY,UAAU;AAClG;AACA;;AAEA;;;;;;;;;;AC7DA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACkC;;AAElC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChKA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAE8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa,oBAAoB,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,4FAA+B,+DAA+D,SAAS;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,0BAA0B,kBAAkB;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,oBAAoB,cAAc,QAAQ;AAClG;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6CAA6C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA+B,kEAAkE,SAAS;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yCAAyC;;AAExE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;;;;;;;;ACxOA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;ACvLtC;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACPA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,6HAAoC,sGAAsG,GAAG,GAAG;AAChJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oJAA2D,MAAM;AACjE;AACA;;AAEA;AACA,wIAA+C,GAAG;AAClD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,yDAAyD,mBAAmB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,oBAAoB;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC;AAChC,uDAAuD,mGAA8C;AACrG;AACA,OAAO,uJAAiG;;AAExG,kCAAkC,iEAAiE;AACnG,yCAAyC,yCAAyC;AAClF,oCAAoC,qBAAqB;AACzD,sCAAsC,mFAAmF;AACzH,qCAAqC,6CAA6C;;AAElF,oCAAoC,mEAAmE;AACvG,yCAAyC;AACzC;AACA,wFAAwF;AACxF,uCAAuC,oEAAoE;AAC3G,0CAA0C,oEAAoE;AAC9G,uCAAuC,gEAAgE;AACvG,yCAAyC,gEAAgE;AACzG,0CAA0C,uCAAuC;AACjF,yCAAyC,6CAA6C;AACtF,kCAAkC,oEAAoE;;AAEtG,+CAA+C,6CAA6C;AAC5F,+CAA+C,6CAA6C;;AAE5F,6CAA6C,iJAA4F;AACzI,sDAAsD,2IAAsF;;AAE5I,0CAA0C,kEAAkE;AAC5G,mDAAmD,uCAAuC;;AAE1F;AACA,OAAO,qLAAqL;AAC5L,oDAAoD,iDAAiD;AACrG,yCAAyC,0HAA0H;;AAEnK,2CAA2C,kEAAkE;AAC7G;AACA;;AAEA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,OAAO,+DAA+D;AACtE,qDAAqD,mGAA8C;AACnG;AACA,OAAO,uJAAiG;;AAExG,qCAAqC,iEAAiE;AACtG,4CAA4C,8CAA8C;AAC1F,uCAAuC,qBAAqB;AAC5D,yCAAyC,wEAAwE;AACjH,wCAAwC,6CAA6C;;AAErF,iCAAiC,mEAAmE;AACpG,sCAAsC;AACtC;AACA,0FAA0F;AAC1F,oCAAoC,yEAAyE;AAC7G,uCAAuC,yEAAyE;AAChH,oCAAoC,gEAAgE;AACpG,sCAAsC,gEAAgE;AACtG,uCAAuC,uCAAuC;AAC9E,sCAAsC,6CAA6C;AACnF,+BAA+B,oEAAoE;;AAEnG,4CAA4C,kDAAkD;AAC9F,kDAAkD,6CAA6C;;AAE/F,0CAA0C,iJAA4F;AACtI,6DAA6D,gJAA2F;AACxJ,uCAAuC,kEAAkE;AACzG,0DAA0D,4CAA4C;AACtG;AACA,OAAO,qLAAqL;AAC5L,2DAA2D,sDAAsD;AACjH,4CAA4C,0HAA0H;;AAEtK,wCAAwC,kEAAkE;AAC1G;AACA;;AAEQ;AACR,2EAAgB;;;;;;;;;;;ACrVhB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,oBAAoB,qBAAqB;AACzC;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS,IAAI,aAAa;AACvD;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8DAA8D,oBAAoB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,+BAA+B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,6BAA6B,cAAc,6BAA6B,OAAO;AAC/E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gKAAuE,OAAO,GAAG,MAAM;AACvF;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uKAA8E,MAAM,cAAc,WAAW;AAC7G;AACA,kBAAkB,MAAM,qBAAqB,sBAAsB,2BAA2B,uBAAuB;AACrH;AACA;AACA;AACA;AACA;AACA;AACA,qJAA4D,OAAO;AACnE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAsD;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;;;;;;;;;;;;AC9PR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,YAAY;AACnB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0DAAgB;;;;;;;;;ACtNhB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sCAAsC,QAAQ,MAAM;AACtE;AACA;AACA;AACA,iCAAiC,2BAA2B,OAAO,QAAQ;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,OAAO,KAAK;AACZ,OAAO,8DAA8D;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iCAAiC;AAClD,iBAAiB,uDAAuD;AACxE;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB,MAAM;AACvD;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB,cAAc,OAAO;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE,WAAW,cAAc;AACrD,eAAe,EAAE,KAAK,cAAc;AACpC,OAAO;AACP,sBAAsB,SAAS;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;ACtLA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yJAAgE,gBAAgB;AAChF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD,oBAAoB,yBAAyB;AAC7C,gBAAgB,qBAAqB;AACrC,cAAc,mBAAmB,EAAE;AACnC,kBAAkB,mBAAmB;AACrC,cAAc,mBAAmB,EAAE;AACnC,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C,uBAAuB,wBAAwB;AAC/C,qBAAqB,0BAA0B,EAAE;AACjD,oBAAoB,yBAAyB;AAC7C,uBAAuB,wBAAwB;AAC/C,iBAAiB,sBAAsB;AACvC,wBAAwB,yBAAyB;;AAEjD;AACA,gGAAgG,mEAAmE;AACnK;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,UAAU,gBAAgB,KAAK,EAAE,mBAAmB,qBAAqB,IAAI,yBAAyB,IAAI,gBAAgB;AAC9K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,KAAK;AAC3E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,UAAU;AACtD;AACA,mIAA0C,UAAU;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA,sBAAsB,iDAAiD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;ACjNA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,gBAAgB,qBAAqB;AACrC,0BAA0B,+BAA+B;AACzD,wBAAwB,6BAA6B;AACrD;AACA;AACA,qJAA4D,MAAM;AAClE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,YAAY;;AAExC;AACA;AACA;AACA,wDAAwD,EAAE;AAC1D;AACA;AACA,0BAA0B,kCAAkC,EAAE,eAAe;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;;;;;;;ACvCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C,aAAa,kBAAkB;AAC/B,gBAAgB,sBAAsB;AACtC,uBAAuB,yBAAyB;AAChD,0BAA0B,iCAAiC;;AAE3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iCAAiC;;AAEjE;AACA;AACA;AACA,oCAAoC,2EAA2E;AAC/G;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,qEAAqE;;AAEpG;AACA,iCAAiC,6DAA6D;AAC9F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,4JAAmE,aAAa;AAChF,4CAA4C,iFAAiF;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+HAAsC,aAAa;AACnD;AACA,uCAAuC,oBAAoB,YAAY,cAAc,aAAa,wBAAwB;AAC1H;AACA;AACA,gCAAgC,0GAA0G;AAC1I;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AAAA;AAAA;;;;;;;;ACxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;ACbA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2FAA+B,gEAAgE,4BAA4B;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,QAAQ,GAAG,oBAAoB;AAC7C;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sCAAsC;AACnE;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+FAAmC,0DAA0D;AAC7F,sDAAsD;;AAEtD;AACA;;AAEA;AACA;AACA;AACA;AACA,qDAAqD,gCAAgC;AACrF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA,yBAAyB,qBAAqB;AAC9C;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC9GA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AAAA;AAAA;;;;;;;;;;ACtCA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,GAAG;AACpD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;;;AC3CA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D,KAAK;AACL;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;AChCA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAsD,oBAAoB;AAC1E;AACA;AAAA;AAAA;;;;;;;;;;;AC1BA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;;;;AC3GA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAsD,oBAAoB;AAC1E;AACA;AAAA;AAAA;;;;;;;;;;;AC1BA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;AC9BA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,uBAAuB;AAC7D;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;AC/CA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACjHA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,8DAA8D,wCAAwC,KAAK,kBAAkB;AAC7H,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kCAAkC;AACtD;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;AC1CA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,kCAAkC;AACtD;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;;AClCA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;ACtCA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;;AC1CA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY,uDAAuD;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,SAAS;AAC1C;AACA,4DAA4D;AAC5D;AACA;AACA,0CAA0C,yEAAyE;AACnH;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,0BAA0B;;AAE3C;;;AAGA;AACA;AACA,uC;AACA;AACA;AACA;AACA,2BAA2B,WAAW,+BAA+B,oDAAoD;AACzH;AACA,0G;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW,+BAA+B,iBAAiB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+BAA+B;AAC5D;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,aAAa,+BAA+B,qBAAqB;AACpF;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,a;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;AC1NA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;;;ACrCA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,2DAA2D,4CAA4C;AACvG;AACA;AACA;AACA,mEAAmE,iCAAiC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,sIAA6C,YAAY;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;ACvFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,KAAK,OAAO,KAAK;AAClF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACtLA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;AACpB;AACwB;;AAExB;AACA,eAAe,+FAA+F;AAC9G;AACA,kGAA6C,GAAG;AAChD;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,8CAA8C,mCAAmC;AACjF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,uHAAiE,MAAM;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,0BAA0B;;AAE/C,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,IAAI;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK,MAAM,uBAAuB,IAAI,UAAU,KAAK,gBAAgB,OAAO,kBAAkB;AACjI;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,mCAAmC,GAAG,MAAM,uBAAuB,IAAI,UAAU,KAAK,gBAAgB,WAAW,KAAK;AACtH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,IAAI;;AAEJ,EAAE;;AAEF,EAAE;;AAEF;AACA,EAAE,6BAA6B;AAC/B;;AAEA,4BAA4B,mEAAmE;AAC/F,6GAAwD,iBAAiB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB;AACnB,4JAAmE,kBAAkB,KAAK,wCAAwC;AAClI;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,2BAA2B;AACjD,iBAAiB,sBAAsB;;AAEvC;AACA,uDAAuD,KAAK;AAC5D;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yIAAgD,qBAAqB;AACrE;AACA;;AAEA;AACA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,+HAA+H;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL,QAAQ,0BAA0B;AAClC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;;AAEN;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAsB;AACtB;AACA;AACA;AACA,2CAA2C,oGAAwC;AACnF;AACA;AACA;AACA,SAAS,0BAA0B;AACnC,6BAA6B,yEAAyE;AACtG,yDAAyD,kBAAkB;;AAE3E;AACA;AACA;AACA;AACA,uKAA8E,KAAK;;AAEnF;AACA,sKAA6E,KAAK;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2JAAkE,aAAa;AAC/E;AACA,yHAAgC,gBAAgB;AAChD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+MAAiE,KAAK;;AAEtE;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,8HAAqC,GAAG;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,IAAI;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpiBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,+BAA+B,kBAAkB,SAAS,8BAA8B,SAAS,uGAAuG,SAAS,cAAc,GAAG;AAClO,KAAK;;AAEL;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,+EAA+E,KAAK;AACpF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sDAAsD,4BAA4B,GAAG,uBAAuB,oBAAoB,mBAAmB,cAAc,eAAe;AAChL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oKAA2E,OAAO,2BAA2B,QAAQ;AACrH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,OAAO;AACd;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA,+IAAsD,SAAS,gBAAgB,cAAc;AAC7F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4JAAmE,kBAAkB;;AAErF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;;;;;;;;;;;ACrQA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wFAAwF,SAAS,kBAAkB,OAAO,cAAc,0BAA0B,oBAAoB;AACtL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,KAAK,MAAM,IAAI;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;ACvFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEQ;;;;;;;;;AC3CR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACjBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA,8DAA8D,iBAAiB;AAC/E;AACA;AAAA;AAAA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACPA,yDAKA;AACA;;AAEA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;;AAEA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;;AAEA;AACA,WAAW;;AAEX;AACA;AACA,WAAW;;AAEX;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,yBAAyB,EAAE;AACnF,wDAAwD,yBAAyB,EAAE;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,yBAAyB,EAAE;AACnF,wDAAwD,yBAAyB,EAAE;AACnF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,qBAAqB;AACtC;AACA;;AAEA;;AAEA;AACA,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,uBAAuB;;AAEvB,kCAAkC,8BAA8B;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA,uCAAuC,mBAAmB,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B,sBAAsB,EAAE;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA,8BAA8B,eAAe,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,oCAAoC,SAAS,yBAAyB,EAAE;AACxE,oCAAoC,SAAS,6BAA6B,EAAE;AAC5E;AACA;AACA,oCAAoC,SAAS,4BAA4B,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,kBAAkB;AAClB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,+CAA+C,iCAAiC,EAAE;AAClF,eAAe;AACf;AACA,eAAe;AACf,kCAAkC,KAAK,gCAAgC,UAAU;AACjF;AACA,aAAa;AACbeAAe;AACf;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjeAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,yCAAyC,2CAA2C,EAAE;AACtF,mCAAmC,aAAa,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,qBAAqB;AACrB,4CAA4C;AAC5C,qBAAqB;AACrB,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sCAAsC,yBAAyB,EAAE;AACjE;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;AACd;;AAEA;AACA,cAAc;AACd;;AAEA;AACA,cAAc;AACd;;AAEA;AACA,cAAc;AACd;;AAEA;AACA,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,QAAQ;;AAEjD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,oDAAoD,mBAAmB;AACvE;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,oBAAoB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,oBAAoB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,oBAAoB;AAClE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,uBAAuB;AAC1E;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC,G;;;;;;;ACliOD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yCAAyC,UAAU;;AAEnD,mBAAmB,UAAU;AAC7B;AACA,uBAAuB,sBAAsB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK,GAAG,cAAc;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC1GA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,GAAG,YAAY;AACxC;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,gBAAgB,GAAG,gBAAgB;AACpF;AACA,6CAA6C,gBAAgB;AAC7D,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;ACzDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAC6B;AACH;;AAE1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AAAA;AAAA;;;;;;;;;;AC7BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,2BAA2B;;AAE3B;AACA;AACA,wGAAmD,wDAAwD;AAC3G,KAAK;AACL,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,yBAAyB;AAC5C,oBAAoB,yBAAyB;AAC7C;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;;AAE5D;AACA;AACA,0BAA0B,OAAO;AACjC,0DAA0D,uCAAuC;AACjG;AACA;AACA;;AAEA,YAAY;AACZ;AACA;AAAA;AAAA;;;;;;;;ACrEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,kBAAkB,eAAe;AACjC;AACA;AACA;AACA,gDAAgD;AAChD;AACA;;AAEA,iBAAiB,0DAA0D;AAC3E;AACA,OAAO,iBAAiB,KAAK,sBAAsB;AACnD;AACA,OAAO,4CAA4C;AACnD;;AAEA,eAAe,6BAA6B;AAC5C;AACA,OAAO,qCAAqC;AAC5C;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA,OAAO,wCAAwC;AAC/C;;AAEA,eAAe,yBAAyB;AACxC,yBAAyB,2CAA2C;AACpE;;AAEA,iBAAiB,yBAAyB;AAC1C,yBAAyB,6CAA6C;AACtE;;AAEA,iBAAiB,mBAAmB;AACpC,yBAAyB,uCAAuC;AAChE;;AAEA,kBAAkB,yBAAyB;AAC3C,yBAAyB,8CAA8C;AACvE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,+FAAwC,qCAAqC;AAC7E;;AAEA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0CAA0C;AAC/E;AACA,6BAA6B,eAAe,GAAG,0CAA0C;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACrJA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,4DAA4D;AACvE;AACA;AACA,cAAc;AACd,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kBAAkB;AAClB;AACA,8BAA8B,qDAAqD;AACnF,KAAK;AACL;AACA;AACA;AAAA;AAAA;;;;;;;;;;AC1FA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEQ;;;;;;;;;ACxCR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAC6B;;AAE7B;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,gBAAgB;;AAE3B;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,yCAAyC,EAAE,WAAW;AACtD;AACA;AACA,SAAS,OAAO;AAChB;AACA,+BAA+B,SAAS,EAAE,eAAe;AACzD,yCAAyC,EAAE,WAAW,MAAM,EAAE,cAAc;AAC5E;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,oDAAoD,gBAAgB;AACpE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,sFAAsF;AAC5H,OAAO,OAAO;AACd,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,yCAAyC,4BAA4B;AACrE,2BAA2B;AAC3B;AACA;AACA;AACA,2CAA2C,UAAU,GAAG,EAAE,oBAAoB;AAC9E;AACA;AACA,KAAK;;AAEL,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,MAAM,iBAAiB;AACpD,kBAAkB,QAAQ,aAAa;AACvC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,0GAA0G;AAC1G;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,qBAAqB,IAAI,qBAAqB;AACnE;AACA;AACA;AACA,qBAAqB,iBAAiB,aAAa,eAAe;AAClE;AACA,yBAAyB,EAAE,UAAU,WAAW,qBAAqB;AACrE,4BAA4B,uBAAuB;AACnD;AACA;;AAEA;AACA,iBAAiB,WAAW,EAAE,oBAAoB,OAAO,eAAe;AACxE;AACA,sBAAsB,EAAE,MAAM;AAC9B,cAAc,IAAI,IAAI;AACtB;AACA;;AAEA;AACA,uBAAuB,WAAW,EAAE,eAAe;AACnD;AACA;AACA;AACA,0BAA0B,EAAE,UAAU,WAAW,eAAe,EAAE,UAAU,YAAY;AACxF,kBAAkB,IAAI,UAAU,6CAA6C,UAAU;AACvF;AACA;AACA;AACA,iDAAiD,EAAE,UAAU,EAAE,IAAI;AACnE,2DAA2D,IAAI,UAAU,EAAE,EAAE,mBAAmB;AAChG;AACA;AACA;AACA,sBAAsB,EAAE,UAAU,QAAQ;AAC1C,cAAc,IAAI,UAAU;AAC5B;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,EAAE,WAAW,KAAK;AAC1C,gBAAgB,IAAI,WAAW;AAC/B;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;AChOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uFAAiC,GAAG;AACpC;AACA;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACPA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA,eAAe,cAAc,GAAG,2BAA2B;AAC3D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;AC1EA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,gEAAgE;AAC5F;;AAEA;AACA;AACA,4BAA4B,oDAAoD;AAChF;;AAEA;AACA;AACA,+BAA+B,oDAAoD;AACnF;;AAEA;AACA,0BAA0B,uCAAuC;AACjE;;AAEA;AACA,4BAA4B,uCAAuC;AACnE;;AAEA;AACA,6BAA6B,yCAAyC;AACtE;;AAEA;AACA,4BAA4B,yBAAyB;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gCAAgC;AACrE;AACA;;AAEA,6CAA6C,yBAAyB;AACtE;AACA;AACA;AACA;;AAEA,0CAA0C,aAAa;AACvD;AACA;AACA;;AAEA,2CAA2C,uBAAuB;AAClE;AACA;AACA;;AAEA,uCAAuC,sEAAsE;AAC7G;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,kBAAkB;;AAE1B,uCAAuC,eAAe;;AAEtD,6CAA6C,cAAc;;AAE3D,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA,0BAA0B,qBAAqB,mCAAmC,EAAE,EAAE;AACtF,OAAO;;AAEP,gCAAgC,0BAA0B;;AAE1D,oCAAoC,iCAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C,wBAAwB,uBAAuB;AAC/C,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA;AACA,qCAAqC,4BAA4B;;AAEjE,+CAA+C,yCAAyC,EAAE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mCAAmC,mBAAmB;AACtD;AACA,2CAA2C,cAAc,QAAQ,SAAS;AAC1E;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA,cAAc,aAAa,GAAG,oBAAoB;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,YAAY;AACZ,OAAO;AACP;AACA;AACA,qCAAqC;AACrC;AACA,YAAY;AACZ,OAAO;AACP;AACA;AACA,sCAAsC;AACtC;AACA,YAAY;AACZ,OAAO;AACP;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,oBAAoB,kDAAkD,WAAW;AAC5H;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC/TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B,EAAE;AAC1D;AACA,C;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC3DA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,4BAA4B;AAC3D;AACA;AACA;AACA;;AAEA,0CAA0C,8CAA8C;AACxF;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,oCAAoC,qCAAqC;AACzE,4DAA4D,eAAe;AAC3E;;AAEA,wCAAwC,iBAAiB;AACzD,oCAAoC,mCAAmC;AACvE;;AAEA,2CAA2C,iBAAiB;AAC5D,oCAAoC,sCAAsC;AAC1E;;AAEA,kCAAkC,aAAa,MAAM;AACrD,oCAAoC,aAAa;AACjD,oCAAoC,OAAO;AAC3C,qCAAqC,aAAa;;AAElD,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,mBAAmB;AAC7D,iBAAiB;AACjB,0CAA0C,cAAc;AACxD;;AAEA,8CAA8C,0BAA0B;AACxE;AACA,kDAAkD,oCAAoC;AACtF;;AAEA,2CAA2C,sBAAsB;AACjE,4KAAmF,UAAU;AAC7F;AACA,wCAAwC,GAAG,wBAAwB;AACnE;;AAEA,sCAAsC,kGAAkG;AACxI;AACA;AACA;AACA;AACA,yCAAyC,GAAG,uBAAuB;AACnE;;AAEA,4CAA4C,sBAAsB;AAClE,wGAAmD,wCAAwC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,QAAQ,mBAAmB,0BAA0B;AAC9H,SAAS;AACT,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kDAAkD,kBAAkB,qBAAqB,EAAE;AAC3F;AACA,WAAW;AACX,8BAA8B,QAAQ,6BAA6B,wCAAwC;AAC3G;AACA;AACA,OAAO;AACP;AACA;AACA,oCAAoC,sBAAsB;AAC1D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,6BAA6B,gCAAgC;AAC7D;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,0BAA0B;AACrD;;AAEA;AACA;AACA;AACA,0CAA0C;AAC1C,+CAA+C;AAC/C,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,qDAAqD,kBAAkB;AACvE;AACA;AACA,eAAe,iCAAiC;AAChD,+BAA+B,iCAAiC;AAChE;AACA,cAAc,mBAAmB;AACjC,8BAA8B,mBAAmB;AACjD;AACA;AACA,kCAAkC,sEAAsE;AACxG;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;ACzBA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,uBAAuB,GAAG,oBAAoB,MAAM,qBAAqB,GAAG,kBAAkB;AAC5G;AACA;;AAEA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;ACXA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,qBAAqB;AACrC,cAAc,mBAAmB,EAAE;AACnC,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB,EAAE;AACvC,kBAAkB,uBAAuB,EAAE;;AAE3C,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAuD,eAAe,2BAA2B,mBAAmB,IAAI,UAAU;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa,0BAA0B,mBAAmB,IAAI,UAAU,wCAAwC,oBAAoB;AAClL;AACA;AACA;AACA;AACA;AACA,mDAAmD,eAAe,2BAA2B,mBAAmB,IAAI,UAAU,6CAA6C,yBAAyB;AACpM;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,mDAAmD;AACpE;AACA,qBAAqB,+DAA+D;AACpF;AACA;;AAEA;AACA;AACA,wDAAwD,gBAAgB;AACxE;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;AClMA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+BAA+B;AAC5D;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,qBAAqB;AACrC,mBAAmB,wBAAwB;AAC3C,uBAAuB,wBAAwB;AAC/C,YAAY,iBAAiB,EAAE;AAC/B,cAAc,mBAAmB;AACjC,kBAAkB,mBAAmB;AACrC,cAAc,mBAAmB;AACjC,cAAc,mBAAmB;AACjC,kBAAkB,mBAAmB;AACrC,qBAAqB,0BAA0B,EAAE,KAAK;AACtD,4BAA4B,iCAAiC,EAAE;AAC/D,iCAAiC,sCAAsC;AACvE,qBAAqB,mDAAmD;AACxE,oBAAoB,qBAAqB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oJAA2D,KAAK;;AAEhE;AACA,8HAAqC,KAAK;AAC1C;;AAEA;AACA;AACA;AACA,2DAA2D,qBAAqB,MAAM,KAAK,eAAe,kCAAkC;AAC5I;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,iDAAiD;AACzE;AACA,+BAA+B,iBAAiB;AAChD;AACA,KAAK,OAAO;AACZ,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AChQA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,qBAAqB;AACrC,kBAAkB,uBAAuB;AACzC,cAAc,mBAAmB;AACjC,kBAAkB,uBAAuB;AACzC,oBAAoB,yBAAyB;AAC7C,uBAAuB,4BAA4B;AACnD,cAAc,mBAAmB;AACjC,kBAAkB,mBAAmB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yDAAyD,sBAAsB,yBAAyB,UAAU,gBAAgB,mBAAmB;AACrJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA,4BAA4B,uEAAuE;;AAEnG;AACA;AACA,0DAA0D,gBAAgB;AAC1E;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8JAAqE,OAAO;AAC5E;AACA,yBAAyB,OAAO,MAAM,uDAAuD;AAC7F;AACA,KAAK;AACL;AACA;AACA;;AAEA;;;;;;;;;AC1LA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB,gCAAgC;AAChC;AACA;;AAEA;AACA,iCAAiC;AACjC,uCAAuC;AACvC,mCAAmC;AACnC;;AAEA,gBAAgB,qBAAqB;AACrC,YAAY,iBAAiB;AAC7B,cAAc,eAAe;AAC7B,mBAAmB,wBAAwB;AAC3C,4BAA4B,6BAA6B;AACzD,cAAc,mBAAmB;AACjC,kBAAkB,mBAAmB;AACrC,cAAc,mBAAmB;AACjC,kBAAkB,mBAAmB;AACrC,oBAAoB,yBAAyB;AAC7C,8BAA8B,+BAA+B;AAC7D,2BAA2B,gCAAgC;AAC3D,0BAA0B,+BAA+B;AACzD,0CAA0C,2CAA2C;AACrF,4BAA4B,kCAAkC;AAC9D;AACA;AACA,wBAAwB,uBAAuB;AAC/C,wIAAwI;AACxI;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA,sBAAsB,iDAAiD;AACvE;AACA;AACA,yCAAyC,gBAAgB;AACzD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AC/IA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA,eAAe;AACf,aAAa;AACb;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW;AAC7C;AACA,aAAa;;AAEb,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD,aAAa;AACb,WAAW;AACX;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,2FAA+B,iDAAiD;AAChF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,GAAG;AAC9B,8BAA8B,cAAc,KAAK,iBAAiB,GAAG,YAAY,GAAG,SAAS;AAC7F;;AAEA;AACA;AACA,gBAAgB,cAAc,KAAK,iBAAiB,GAAG,YAAY,GAAG,cAAc;AACpF,cAAc,cAAc;AAC5B;AACA;;AAEA;AACA;AACA,yCAAyC,sBAAsB,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,QAAQ,qBAAqB;AACpC;;AAEA;;AAEA;AACA;AACA,eAAe;AACf;AACA,gBAAgB;AAChB;AACA,4G;AACA;AACA,KAAK;;;AAGL;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uCAAuC;AACnE,KAAK;AACL;;AAEA;AACA,SAAS,cAAc;AACvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,iDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAwD;AACpF,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,SAAS,cAAc;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,iBAAiB,wDAAwD;AAChF;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClSA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,cAAc,KAAK,WAAW,IAAI,cAAc;AAChE;AACA,gBAAgB,cAAc,KAAK,WAAW;AAC9C,cAAc,cAAc;AAC5B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,aAAa;AAC3E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,cAAc;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA,2FAA+B,yDAAyD,iBAAiB;AACzG;AACA;AACA,iBAAiB,OAAO,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA,4BAA4B,sCAAsC;AAClE,eAAe,OAAO,QAAQ;AAC9B;;AAEA;AACA,2FAA+B,0DAA0D,iBAAiB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yCAAyC;AACnE,eAAe,OAAO,QAAQ;AAC9B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,cAAc;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2CAA2C;AACrE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;ACtNA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC1EA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;ACvkEAAkE,OAAO;AACzE;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,mCAAmC,KAAK,0EAA0E,MAAM;AACxH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;;AAEA;;AAEA;AACA;AACA,qDAAqD,QAAQ,GAAG;AAChE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gBAAgB;AACnE,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D,UAAU;AACtE;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxWA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","file":"shell/build/ArcsLib.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 102);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e666a7220d5d8f61c2fb","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nexport default function assert(test, message) {\n  if (!test) {\n    debugger; // eslint-disable-line no-debugger\n    throw new Error(message);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./platform/assert-web.js\n// module id = 0\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport {Strategizer} from '../../strategizer/strategizer.js';\nimport ConnectionConstraint from './connection-constraint.js';\nimport Particle from './particle.js';\nimport Search from './search.js';\nimport Slot from './slot.js';\nimport Handle from './handle.js';\nimport util from './util.js';\nimport digest from './digest-web.js';\n\nclass Recipe {\n  constructor(name) {\n    this._particles = [];\n    this._handles = [];\n    this._slots = [];\n    this.name = name;\n\n    // TODO: Recipes should be collections of records that are tagged\n    // with a type. Strategies should register the record types they\n    // can handle. ConnectionConstraints should be a different record\n    // type to particles/handles.\n    this._connectionConstraints = [];\n\n    // TODO: Change to array, if needed for search strings of merged recipes.\n    this._search = null;\n\n    this._pattern = null;\n  }\n\n  newConnectionConstraint(from, fromConnection, to, toConnection) {\n    this._connectionConstraints.push(new ConnectionConstraint(from, fromConnection, to, toConnection));\n  }\n\n  removeConstraint(constraint) {\n    let idx = this._connectionConstraints.indexOf(constraint);\n    assert(idx >= 0);\n    this._connectionConstraints.splice(idx, 1);\n  }\n\n  clearConnectionConstraints() {\n    this._connectionConstraints = [];\n  }\n\n  newParticle(name) {\n    let particle = new Particle(this, name);\n    this._particles.push(particle);\n    return particle;\n  }\n\n  removeParticle(particle) {\n    let idx = this._particles.indexOf(particle);\n    assert(idx > -1);\n    this._particles.splice(idx, 1);\n    for (let slotConnection of Object.values(particle._consumedSlotConnections))\n      slotConnection.remove();\n  }\n\n  removeSlot(slot) {\n    assert(slot.consumeConnections.length == 0);\n    let idx = this._slots.indexOf(slot);\n    assert(idx > -1);\n    this._slots.splice(idx, 1);\n  }\n\n  newHandle() {\n    let handle = new Handle(this);\n    this._handles.push(handle);\n    return handle;\n  }\n\n  newSlot(name) {\n    let slot = new Slot(this, name);\n    this._slots.push(slot);\n    return slot;\n  }\n\n  isResolved() {\n    assert(Object.isFrozen(this), 'Recipe must be normalized to be resolved.');\n    return this._connectionConstraints.length == 0\n        && (this._search === null || this._search.isResolved())\n        && this._handles.every(handle => handle.isResolved())\n        && this._particles.every(particle => particle.isResolved())\n        && this._slots.every(slot => slot.isResolved())\n        && this.handleConnections.every(connection => connection.isResolved())\n        // Verify slot connections: all required slot connections must be resolved,\n        // and for each particle their must be an at least one resolved slot connection.\n        && this._particles.every(particle => {\n          let connections = Object.values(particle.consumedSlotConnections);\n          if (connections.length == 0) {\n            return true;\n          }\n          return !!connections.find(connection => connection.isResolved())\n              && connections.every(connection => !connection.slotSpec.isRequired || connection.isResolved());\n        });\n  }\n\n  _findDuplicate(items, options) {\n    let seenHandles = new Set();\n    let duplicateHandle = items.find(handle => {\n      if (handle.id) {\n        if (seenHandles.has(handle.id)) {\n          return handle;\n        }\n        seenHandles.add(handle.id);\n      }\n    });\n    if (duplicateHandle && options && options.errors) {\n      options.errors.set(duplicateHandle, `Has Duplicate ${duplicateHandle instanceof Handle ? 'Handle' : 'Slot'} '${duplicateHandle.id}'`);\n    }\n    return duplicateHandle;\n  }\n\n  _isValid(options) {\n    return !this._findDuplicate(this._handles, options)\n        && !this._findDuplicate(this._slots, options)\n        && this._handles.every(handle => handle._isValid(options))\n        && this._particles.every(particle => particle._isValid(options))\n        && this._slots.every(slot => slot._isValid(options))\n        && this.handleConnections.every(connection => connection._isValid(options))\n        && this.slotConnections.every(connection => connection._isValid(options))\n        && (!this.search || this.search.isValid(options));\n  }\n\n  get localName() { return this._localName; }\n  set localName(name) { this._localName = name; }\n  get particles() { return this._particles; } // Particle*\n  set particles(particles) { this._particles = particles; }\n  get handles() { return this._handles; } // Handle*\n  set handles(handles) { this._handles = handles; }\n  get slots() { return this._slots; } // Slot*\n  set slots(slots) { this._slots = slots; }\n  get connectionConstraints() { return this._connectionConstraints; }\n  get search() { return this._search; }\n  set search(search) {\n    this._search = search;\n  }\n  setSearchPhrase(phrase) {\n    assert(!this._search, 'Cannot override search phrase');\n    if (phrase) {\n      this._search = new Search(phrase);\n    }\n  }\n\n  get slotConnections() { // SlotConnection*\n    let slotConnections = [];\n    this._particles.forEach(particle => {\n      slotConnections.push(...Object.values(particle.consumedSlotConnections));\n    });\n    return slotConnections;\n  }\n\n  get handleConnections() {\n    let handleConnections = [];\n    this._particles.forEach(particle => {\n      handleConnections.push(...Object.values(particle.connections));\n      handleConnections.push(...particle._unnamedConnections);\n    });\n    return handleConnections;\n  }\n\n  isEmpty() {\n    return this.particles.length == 0 &&\n           this.handles.length == 0 &&\n           this.slots.length == 0 &&\n           this._connectionConstraints.length == 0;\n  }\n\n  findHandle(id) {\n    for (let handle of this.handles) {\n      if (handle.id == id)\n        return handle;\n    }\n  }\n\n  findSlot(id) {\n    for (let slot of this.slots) {\n      if (slot.id == id)\n        return slot;\n    }\n  }\n  get pattern() { return this._pattern; }\n  set pattern(pattern) { this._pattern = pattern; }\n  set description(description) {\n    let pattern = description.find(desc => desc.name == 'pattern');\n    if (pattern) {\n      this._pattern = pattern.pattern;\n    }\n    description.forEach(desc => {\n      if (desc.name != 'pattern') {\n        let handle = this.handles.find(handle => handle.localName == desc.name);\n        assert(handle, `Cannot set description pattern for nonexistent handle ${desc.name}.`);\n        handle.pattern = desc.pattern;\n      }\n    });\n  }\n\n  async digest() {\n    return digest(this.toString());\n  }\n\n  normalize(options) {\n    if (Object.isFrozen(this)) {\n      if (options && options.errors) {\n        options.errors.set(this, 'already normalized');\n      }\n      return;\n    }\n    if (!this._isValid()) {\n      this._findDuplicate(this._handles, options);\n      this._findDuplicate(this._slots, options);\n      let checkForInvalid = (list) => list.forEach(item => !item._isValid(options));\n      checkForInvalid(this._handles);\n      checkForInvalid(this._particles);\n      checkForInvalid(this._slots);\n      checkForInvalid(this.handleConnections);\n      checkForInvalid(this.slotConnections);\n      return false;\n    }\n    // Get handles and particles ready to sort connections.\n    for (let particle of this._particles) {\n      particle._startNormalize();\n    }\n    for (let handle of this._handles) {\n      handle._startNormalize();\n    }\n    for (let slot of this._slots) {\n      slot._startNormalize();\n    }\n\n    // Sort and normalize handle connections.\n    let connections = this.handleConnections;\n    for (let connection of connections) {\n      connection._normalize();\n    }\n    connections.sort(util.compareComparables);\n\n    // Sort and normalize slot connections.\n    let slotConnections = this.slotConnections;\n    for (let slotConnection of slotConnections) {\n      slotConnection._normalize();\n    }\n    slotConnections.sort(util.compareComparables);\n\n    if (this.search) {\n      this.search._normalize();\n    }\n\n    // Finish normalizing particles and handles with sorted connections.\n    for (let particle of this._particles) {\n      particle._finishNormalize();\n    }\n    for (let handle of this._handles) {\n      handle._finishNormalize();\n    }\n    for (let slot of this._slots) {\n      slot._finishNormalize();\n    }\n\n    let seenHandles = new Set();\n    let seenParticles = new Set();\n    let seenSlots = new Set();\n    let particles = [];\n    let handles = [];\n    let slots = [];\n    // Reorder connections so that interfaces come last.\n    // TODO: update handle-connection comparison method instead?\n    for (let connection of connections.filter(c => !c.type || !c.type.isInterface).concat(connections.filter(c => !!c.type && !!c.type.isInterface))) {\n      if (!seenParticles.has(connection.particle)) {\n        particles.push(connection.particle);\n        seenParticles.add(connection.particle);\n      }\n      if (connection.handle && !seenHandles.has(connection.handle)) {\n        handles.push(connection.handle);\n        seenHandles.add(connection.handle);\n      }\n    }\n\n    for (let slotConnection of slotConnections) {\n      if (slotConnection.targetSlot && !seenSlots.has(slotConnection.targetSlot)) {\n        slots.push(slotConnection.targetSlot);\n        seenSlots.add(slotConnection.targetSlot);\n      }\n      Object.values(slotConnection.providedSlots).forEach(ps => {\n        if (!seenSlots.has(ps)) {\n          slots.push(ps);\n          seenSlots.add(ps);\n        }\n      });\n    }\n\n    let orphanedHandles = this._handles.filter(handle => !seenHandles.has(handle));\n    orphanedHandles.sort(util.compareComparables);\n    handles.push(...orphanedHandles);\n\n    let orphanedParticles = this._particles.filter(particle => !seenParticles.has(particle));\n    orphanedParticles.sort(util.compareComparables);\n    particles.push(...orphanedParticles);\n\n    let orphanedSlots = this._slots.filter(slot => !seenSlots.has(slot));\n    orphanedSlots.sort(util.compareComparables);\n    slots.push(...orphanedSlots);\n\n    // Put particles and handles in their final ordering.\n    this._particles = particles;\n    this._handles = handles;\n    this._slots = slots;\n    this._connectionConstraints.sort(util.compareComparables);\n\n    Object.freeze(this._particles);\n    Object.freeze(this._handles);\n    Object.freeze(this._slots);\n    Object.freeze(this._connectionConstraints);\n    Object.freeze(this);\n\n    return true;\n  }\n\n  clone(cloneMap) {\n    // for now, just copy everything\n\n    let recipe = new Recipe(this.name);\n\n    if (cloneMap == undefined)\n      cloneMap = new Map();\n\n    this._copyInto(recipe, cloneMap);\n\n    // TODO: figure out a better approach than stashing the cloneMap permanently\n    // on the recipe\n    recipe._cloneMap = cloneMap;\n\n    return recipe;\n  }\n\n  mergeInto(recipe) {\n    let cloneMap = new Map();\n    let numHandles = recipe._handles.length;\n    let numParticles = recipe._particles.length;\n    let numSlots = recipe._slots.length;\n    this._copyInto(recipe, cloneMap);\n    return {\n      handles: recipe._handles.slice(numHandles),\n      particles: recipe._particles.slice(numParticles),\n      slots: recipe._slots.slice(numSlots)\n    };\n  }\n\n  _copyInto(recipe, cloneMap) {\n    function cloneTheThing(object) {\n      let clonedObject = object._copyInto(recipe, cloneMap);\n      cloneMap.set(object, clonedObject);\n    }\n\n    this._handles.forEach(cloneTheThing);\n    this._particles.forEach(cloneTheThing);\n    this._slots.forEach(cloneTheThing);\n    this._connectionConstraints.forEach(cloneTheThing);\n    if (this.search) {\n      this.search._copyInto(recipe);\n    }\n    if (this.pattern) {\n      if (recipe.pattern) {\n        // TODO(mmandlis): Join |this.pattern| with the pattern already existing in the recipe.\n      } else {\n        recipe.pattern = this.pattern;\n      }\n    }\n  }\n\n  updateToClone(dict) {\n    let result = {};\n    Object.keys(dict).forEach(key => result[key] = this._cloneMap.get(dict[key]));\n    return result;\n  }\n\n  static over(results, walker, strategy) {\n    return Strategizer.over(results, walker, strategy);\n  }\n\n  _makeLocalNameMap() {\n    let names = new Set();\n    for (let particle of this.particles) {\n      names.add(particle.localName);\n    }\n    for (let handle of this.handles) {\n      names.add(handle.localName);\n    }\n    for (let slot of this.slots) {\n      names.add(slot.localName);\n    }\n\n    let nameMap = new Map();\n    let i = 0;\n    for (let particle of this.particles) {\n      let localName = particle.localName;\n      if (!localName) {\n        do {\n          localName = `particle${i++}`;\n        } while (names.has(localName));\n      }\n      nameMap.set(particle, localName);\n    }\n\n    i = 0;\n    for (let handle of this.handles) {\n      let localName = handle.localName;\n      if (!localName) {\n        do {\n          localName = `view${i++}`;\n        } while (names.has(localName));\n      }\n      nameMap.set(handle, localName);\n    }\n\n    i = 0;\n    for (let slot of this.slots) {\n      let localName = slot.localName;\n      if (!localName) {\n        do {\n          localName = `slot${i++}`;\n        } while (names.has(localName));\n      }\n      nameMap.set(slot, localName);\n    }\n\n    return nameMap;\n  }\n\n  // TODO: Add a normalize() which strips local names and puts and nested\n  //       lists into a normal ordering.\n  //\n  // use { showUnresolved: true } in options to see why a recipe can't resolve.\n  toString(options) {\n    let nameMap = this._makeLocalNameMap();\n    let result = [];\n    result.push(`recipe${this.name ? ' ' + this.name : ''}`);\n    if (this.search) {\n      result.push(this.search.toString(options).replace(/^|(\\n)/g, '$1  '));\n    }\n    for (let constraint of this._connectionConstraints) {\n      let constraintStr = constraint.toString().replace(/^|(\\n)/g, '$1  ');\n      if (options && options.showUnresolved) {\n        constraintStr = constraintStr.concat(' // unresolved connection-constraint');\n      }\n      result.push(constraintStr);\n    }\n    for (let handle of this.handles) {\n      result.push(handle.toString(nameMap, options).replace(/^|(\\n)/g, '$1  '));\n    }\n    for (let slot of this.slots) {\n      let slotString = slot.toString(nameMap, options);\n      if (slotString) {\n        result.push(slotString.replace(/^|(\\n)/g, '$1  '));\n      }\n    }\n    for (let particle of this.particles) {\n      result.push(particle.toString(nameMap, options).replace(/^|(\\n)/g, '$1  '));\n    }\n    if (this.pattern || this.handles.find(h => h.pattern)) {\n      result.push(`  description \\`${this.pattern}\\``);\n      this.handles.forEach(h => {\n        if (h.pattern) {\n          result.push(`    ${h.localName} \\`${h.pattern}\\``);\n        }\n      });\n    }\n    return result.join('\\n');\n  }\n}\n\nexport default Recipe;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/recipe.js\n// module id = 1\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../platform/assert-web.js';\n\nexport class Strategizer {\n  constructor(strategies, evaluators, {maxPopulation, generationSize, discardSize, ruleset}) {\n    this._strategies = strategies;\n    this._evaluators = evaluators;\n    this._generation = 0;\n    this._internalPopulation = [];\n    this._population = [];\n    this._generated = [];\n    this._terminal = [];\n    this._ruleset = ruleset;\n    this._options = {\n      maxPopulation,\n      generationSize,\n      discardSize,\n    };\n    this.populationHash = new Map();\n  }\n  // Latest generation number.\n  get generation() {\n    return this._generation;\n  }\n  // All individuals in the current population.\n  get population() {\n    return this._population;\n  }\n  // Individuals of the latest generation.\n  get generated() {\n    return this._generated;\n  }\n  // Individuals that were discarded in the latest generation.\n  get discarded() {\n    return this._discarded;\n    // TODO: Do we need this?\n  }\n  // Individuals from the previous generation that were not decended from in the\n  // current generation.\n  get terminal() {\n    assert(this._terminal);\n    return this._terminal;\n  }\n  async generate() {\n    // Generate\n    let generation = this.generation + 1;\n    let individualsPerStrategy = Math.floor(this._options.generationSize / this._strategies.length);\n    let generated = await Promise.all(this._strategies.map(strategy => {\n      let recipeFilter = recipe => this._ruleset.isAllowed(strategy, recipe);\n      return strategy.generate({\n        generation: this.generation,\n        generated: this.generated.filter(recipeFilter),\n        terminal: this.terminal.filter(recipeFilter),\n        population: this.population.filter(recipeFilter),\n        outputLimit: individualsPerStrategy\n      });\n    }));\n\n    let record = {};\n    record.generation = generation;\n    record.sizeOfLastGeneration = this.generated.length;\n    record.generatedDerivationsByStrategy = {};\n    for (let i = 0; i < this._strategies.length; i++) {\n      record.generatedDerivationsByStrategy[this._strategies[i].constructor.name] = generated[i].length;\n    }\n\n    generated = [].concat(...generated);\n\n    // TODO: get rid of this additional asynchrony\n    generated = await Promise.all(generated.map(async result => {\n      if (result.hash) result.hash = await result.hash;\n      return result;\n    }));\n\n    record.generatedDerivations = generated.length;\n    record.nullDerivations = 0;\n    record.invalidDerivations = 0;\n    record.duplicateDerivations = 0;\n    record.duplicateSameParentDerivations = 0;\n    record.nullDerivationsByStrategy = {};\n    record.invalidDerivationsByStrategy = {};\n    record.duplicateDerivationsByStrategy = {};\n    record.duplicateSameParentDerivationsByStrategy = {};\n\n    generated = generated.filter(result => {\n      let strategy = result.derivation[0].strategy.constructor.name;\n      if (result.hash) {\n        let existingResult = this.populationHash.get(result.hash);\n        if (existingResult) {\n          if (result.derivation[0].parent == existingResult) {\n            record.nullDerivations += 1;\n            if (record.nullDerivationsByStrategy[strategy] == undefined)\n              record.nullDerivationsByStrategy[strategy] = 0;\n            record.nullDerivationsByStrategy[strategy]++;\n          } else if (existingResult.derivation.map(a => a.parent).indexOf(result.derivation[0].parent) != -1) {\n            record.duplicateSameParentDerivations += 1;\n            if (record.duplicateSameParentDerivationsByStrategy[strategy] == undefined)\n              record.duplicateSameParentDerivationsByStrategy[strategy] = 0;\n            record.duplicateSameParentDerivationsByStrategy[strategy]++;\n          } else {\n            record.duplicateDerivations += 1;\n            if (record.duplicateDerivationsByStrategy[strategy] == undefined)\n              record.duplicateDerivationsByStrategy[strategy] = 0;\n            record.duplicateDerivationsByStrategy[strategy]++;\n            this.populationHash.get(result.hash).derivation.push(result.derivation[0]);\n          }\n          return false;\n        }\n        this.populationHash.set(result.hash, result);\n      }\n      if (result.valid === false) {\n        record.invalidDerivations++;\n        record.invalidDerivationsByStrategy[strategy] = (record.invalidDerivationsByStrategy[strategy] || 0) + 1;\n        return false;\n      }\n      return true;\n    });\n\n    let terminal = new Map();\n    for (let candidate of this.generated) {\n      terminal.set(candidate.result, candidate);\n    }\n    for (let result of generated) {\n      for (let {parent} of result.derivation) {\n        if (parent && terminal.has(parent.result)) {\n          terminal.delete(parent.result);\n        }\n      }\n    }\n    terminal = [...terminal.values()];\n\n    record.survivingDerivations = generated.length;\n\n    generated.sort((a, b) => {\n      if (a.score > b.score)\n        return -1;\n      if (a.score < b.score)\n        return 1;\n      return 0;\n    });\n\n    // Evalute\n    let evaluations = await Promise.all(this._evaluators.map(strategy => {\n      return strategy.evaluate(this, generated);\n    }));\n    let fitness = Strategizer._mergeEvaluations(evaluations, generated);\n    assert(fitness.length == generated.length);\n\n\n    // Merge + Discard\n    let discarded = [];\n    let newGeneration = [];\n\n    for (let i = 0; i < fitness.length; i++) {\n      newGeneration.push({\n        fitness: fitness[i],\n        individual: generated[i],\n      });\n    }\n\n    while (this._internalPopulation.length > (this._options.maxPopulation - this._options.discardSize)) {\n      discarded.push(this._internalPopulation.pop().individual);\n    }\n\n    newGeneration.sort((x, y) => y.fitness - x.fitness);\n\n    for (let i = 0; i < newGeneration.length && i < this._options.discardSize; i++) {\n      if (i < this._options.discardSize) {\n        this._internalPopulation.push(newGeneration[i]);\n      } else {\n        discarded.push(newGeneration[i].individual);\n      }\n    }\n\n    // TODO: Instead of push+sort, merge `internalPopulation` with `generated`.\n    this._internalPopulation.sort((x, y) => y.fitness - x.fitness);\n\n    for (let strategy of this._strategies) {\n      strategy.discard(discarded);\n    }\n\n    // Publish\n    this._terminal = terminal;\n    this._generation = generation;\n    this._generated = generated;\n    this._population = this._internalPopulation.map(x => x.individual);\n\n    return record;\n  }\n\n  static _mergeEvaluations(evaluations, generated) {\n    let n = generated.length;\n    let mergedEvaluations = [];\n    for (let i = 0; i < n; i++) {\n      let merged = NaN;\n      for (let evaluation of evaluations) {\n        let fitness = evaluation[i];\n        if (isNaN(fitness)) {\n          continue;\n        }\n        if (isNaN(merged)) {\n          merged = fitness;\n        } else {\n          // TODO: how should evaluations be combined?\n          merged = (merged * i + fitness) / (i + 1);\n        }\n      }\n      if (isNaN(merged)) {\n        // TODO: What should happen when there was no evaluation?\n        merged = 0.5;\n      }\n      mergedEvaluations.push(merged);\n    }\n    return mergedEvaluations;\n  }\n\n  static over(results, walker, strategy) {\n    walker.onStrategy(strategy);\n    results.forEach(result => {\n      walker.onResult(result);\n      walker.onResultDone();\n    });\n    walker.onStrategyDone();\n    return walker.descendants;\n  }\n}\n\nclass Walker {\n  constructor() {\n    this.descendants = [];\n  }\n\n  onStrategy(strategy) {\n    this.currentStrategy = strategy;\n  }\n\n  onResult(result) {\n    this.currentResult = result;\n  }\n\n  createDescendant(result, score, hash, valid) {\n    assert(this.currentResult, 'no current result');\n    assert(this.currentStrategy, 'no current strategy');\n    if (this.currentResult.score)\n      score += this.currentResult.score;\n    this.descendants.push({\n      result,\n      score,\n      derivation: [{parent: this.currentResult, strategy: this.currentStrategy}],\n      hash,\n      valid,\n    });\n  }\n\n  onResultDone() {\n    this.currentResult = undefined;\n  }\n\n  onStrategyDone() {\n    this.currentStrategy = undefined;\n  }\n}\n\nStrategizer.Walker = Walker;\n\n// TODO: Doc call convention, incl strategies are stateful.\nexport class Strategy {\n  async activate(strategizer) {\n    // Returns estimated ability to generate/evaluate.\n    // TODO: What do these numbers mean? Some sort of indication of the accuracy of the\n    // generated individuals and evaluations.\n    return {generate: 0, evaluate: 0};\n  }\n  getResults(inputParams) {\n    return inputParams.generated;\n  }\n  async generate(inputParams) {\n    return [];\n  }\n  discard(individuals) {\n  }\n  async evaluate(strategizer, individuals) {\n    return individuals.map(() => NaN);\n  }\n}\n\nexport class Ruleset {\n  constructor(orderingRules) {\n    this._orderingRules = orderingRules;\n  }\n\n  isAllowed(strategy, recipe) {\n    let forbiddenAncestors = this._orderingRules.get(strategy.constructor);\n    if (!forbiddenAncestors) return true;\n    // TODO: This can be sped up with AND-ing bitsets of derivation strategies and forbiddenAncestors.\n    return !recipe.derivation.some(d => forbiddenAncestors.has(d.strategy.constructor));\n  }\n}\n\nRuleset.Builder = class {\n  constructor() {\n    // Strategy -> [Strategy*]\n    this._orderingRules = new Map();\n  }\n\n  /**\n   * When invoked for strategies (A, B), ensures that B will never follow A in\n   * the chain of derivations of all generated recipes.\n   *\n   * Following sequences are therefore valid: A, B, AB, AAABB, AC, DBC, CADCBCBD\n   * Following sequences are therefore invalid: BA, ABA, BCA, DBCA\n   *\n   * Transitive closure of the ordering is computed.\n   * I.e. For orderings (A, B) and (B, C), the ordering (A, C) is implied.\n   *\n   * Method can be called with multiple strategies at once.\n   * E.g. (A, B, C) implies (A, B), (B, C) and transitively (A, C).\n   *\n   * Method can be called with arrays of strategies, which represent groups.\n   * The ordering in the group is not enforced, but the ordering between them is.\n   * E.g. ([A, B], [C, D], E) is a shorthand for:\n   * (A, C), (A, D), (B, C), (B, D), (C, E), (D, E).\n   */\n  order(...strategiesOrGroups) {\n    for (let i = 0; i < strategiesOrGroups.length - 1; i++) {\n      let current = strategiesOrGroups[i], next = strategiesOrGroups[i + 1];\n      for (let strategy of Array.isArray(current) ? current : [current]) {\n        let set = this._orderingRules.get(strategy);\n        if (!set) {\n          this._orderingRules.set(strategy, set = new Set());\n        }\n        for (let nextStrategy of Array.isArray(next) ? next : [next]) {\n          set.add(nextStrategy);\n        }\n      }\n    }\n    return this;\n  }\n\n  build() {\n    // Making the ordering transitive.\n    let beingExpanded = new Set();\n    let alreadyExpanded = new Set();\n    for (let strategy of this._orderingRules.keys()) {\n      this._transitiveClosureFor(strategy, beingExpanded, alreadyExpanded);\n    }\n    return new Ruleset(this._orderingRules);\n  }\n\n  _transitiveClosureFor(strategy, beingExpanded, alreadyExpanded) {\n    assert(!beingExpanded.has(strategy), 'Detected a loop in the ordering rules');\n\n    let followingStrategies = this._orderingRules.get(strategy);\n    if (alreadyExpanded.has(strategy)) return followingStrategies || [];\n\n    if (followingStrategies) {\n      beingExpanded.add(strategy);\n      for (let following of followingStrategies) {\n        for (let expanded of this._transitiveClosureFor(\n            following, beingExpanded, alreadyExpanded)) {\n          followingStrategies.add(expanded);\n        }\n      }\n      beingExpanded.delete(strategy);\n    }\n    alreadyExpanded.add(strategy);\n\n    return followingStrategies || [];\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./strategizer/strategizer.js\n// module id = 2\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport Recipe from './recipe.js';\nimport WalkerBase from './walker-base.js';\n\nclass Walker extends WalkerBase {\n  onResult(result) {\n    super.onResult(result);\n    let recipe = result.result;\n    let updateList = [];\n\n    // update phase - walk through recipe and call onRecipe,\n    // onHandle, etc.\n\n    if (this.onRecipe) {\n      result = this.onRecipe(recipe, result);\n      if (!this.isEmptyResult(result))\n        updateList.push({continuation: result});\n    }\n    for (let particle of recipe.particles) {\n      if (this.onParticle) {\n        let result = this.onParticle(recipe, particle);\n        if (!this.isEmptyResult(result))\n          updateList.push({continuation: result, context: particle});\n      }\n    }\n    for (let handleConnection of recipe.handleConnections) {\n      if (this.onHandleConnection) {\n        let result = this.onHandleConnection(recipe, handleConnection);\n        if (!this.isEmptyResult(result))\n          updateList.push({continuation: result, context: handleConnection});\n      }\n    }\n    for (let handle of recipe.handles) {\n      if (this.onHandle) {\n        let result = this.onHandle(recipe, handle);\n        if (!this.isEmptyResult(result))\n          updateList.push({continuation: result, context: handle});\n      }\n    }\n    for (let slotConnection of recipe.slotConnections) {\n      if (this.onSlotConnection) {\n        let result = this.onSlotConnection(recipe, slotConnection);\n        if (!this.isEmptyResult(result))\n          updateList.push({continuation: result, context: slotConnection});\n      }\n    }\n    for (let slot of recipe.slots) {\n      if (this.onSlot) {\n        let result = this.onSlot(recipe, slot);\n        if (!this.isEmptyResult(result))\n          updateList.push({continuation: result, context: slot});\n      }\n    }\n\n    this._runUpdateList(recipe, updateList);\n  }\n}\n\nWalker.Permuted = WalkerBase.Permuted;\nWalker.Independent = WalkerBase.Independent;\n\nexport default Walker;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/walker.js\n// module id = 3\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport assert from '../platform/assert-web.js';\n\nfunction addType(name, arg) {\n  let lowerName = name[0].toLowerCase() + name.substring(1);\n  Object.defineProperty(Type, `new${name}`, {\n    value: function(arg) {\n      return new Type(name, arg);\n    }});\n  let upperArg = arg ? arg[0].toUpperCase() + arg.substring(1) : '';\n  Object.defineProperty(Type.prototype, `${lowerName}${upperArg}`, {\n    get: function() {\n      if (!this[`is${name}`])\n        assert(this[`is${name}`], `{${this.tag}, ${this.data}} is not of type ${name}`);\n      return this.data;\n    }});\n  Object.defineProperty(Type.prototype, `is${name}`, {\n    get: function() {\n      return this.tag == name;\n    }});\n}\n\nclass Type {\n  constructor(tag, data) {\n    assert(typeof tag == 'string');\n    assert(data);\n    if (tag == 'Entity') {\n      assert(data instanceof Schema);\n    }\n    if (tag == 'SetView') {\n      if (!(data instanceof Type) && data.tag && data.data) {\n        data = new Type(data.tag, data.data);\n      }\n    }\n    if (tag == 'Variable') {\n      if (!(data instanceof TypeVariable)) {\n        data = new TypeVariable(data.name, data.constraint);\n      }\n    }\n    this.tag = tag;\n    this.data = data;\n  }\n\n  static newHandle(type) {\n    console.warn('Type.newView is deprecated. Please use Type.newSetView instead');\n    return Type.newSetView(type);\n  }\n\n  get isView() {\n    console.warn('Type.isView is deprecated. Please use Type.isSetView instead');\n    return this.isSetView;\n  }\n\n  get viewType() {\n    console.warn('Type.viewType is deprecated. Please use Type.setViewType isntead');\n    return this.setViewType;\n  }\n\n  viewOf() {\n    console.warn('Type.viewOf is deprecated. Please use Type.setViewOf instead');\n    return this.setViewOf();\n  }\n\n  get manifestReferenceName() {\n    console.warn('Type.manifestReferenceName is deprecated. Please use Type.manifestReference instead');\n    return this.manifestReference;\n  }\n\n  get variableVariable() {\n    console.warn('Type.variableVariable is deprecated. Please use Type.variable instead');\n    return this.variable;\n  }\n\n  // TODO: rename SetView to Collection\n  // Once everything's moved over to this, we can change the\n  // underlying representation\n  get isCollection() {\n    return this.isSetView;\n  }\n  static newCollection(type) {\n    return Type.newSetView(type);\n  }\n  collectionOf() {\n    return Type.newSetView(this);\n  }\n  \n  mergeTypeVariablesByName(variableMap) {\n    if (this.isVariable) {\n      let name = this.variable.name;\n      let variable = variableMap.get(name);\n      if (!variable) {\n        variable = this;\n        variableMap.set(name, this);\n      } else {\n        if (variable.variable.constraint || this.variable.constraint) {\n          let mergedConstraint = TypeVariable.maybeMergeConstraints(variable.variable, this.variable);\n          if (!mergedConstraint) {\n            throw new Error('could not merge type variables');\n          }\n          variable.variable.constraint = mergedConstraint;\n        }\n      }\n      return variable;\n    }\n\n    if (this.isSetView) {\n      let primitiveType = this.primitiveType();\n      let result = primitiveType.mergeTypeVariablesByName(variableMap);\n      if (result === primitiveType) {\n        return this;\n      }\n      return result.setViewOf();\n    }\n\n    if (this.isInterface) {\n      let shape = this.interfaceShape.clone();\n      shape._typeVars.map(({object, field}) => object[field] = object[field].mergeTypeVariablesByName(variableMap));\n      // TODO: only build a new type when a variable is modified\n      return Type.newInterface(shape);\n    }\n\n    return this;\n  }\n\n  static unwrapPair(type1, type2) {\n    assert(type1 instanceof Type);\n    assert(type2 instanceof Type);\n    if (type1.isSetView && type2.isSetView)\n      return Type.unwrapPair(type1.primitiveType(), type2.primitiveType());\n    return [type1, type2];\n  }\n\n\n  // TODO: update call sites to use the type checker instead (since they will\n  // have additional information about direction etc.)\n  equals(type) {\n    return TypeChecker.compareTypes({type: this}, {type});\n  }\n\n  _applyExistenceTypeTest(test) {\n    if (this.isSetView)\n      return this.primitiveType()._applyExistenceTypeTest(test);\n    if (this.isInterface)\n      return this.data._applyExistenceTypeTest(test);\n    return test(this);\n  }\n\n  get hasVariable() {\n    return this._applyExistenceTypeTest(type => type.isVariable);\n  }\n\n  get hasUnresolvedVariable() {\n    return this._applyExistenceTypeTest(type => type.isVariable && !type.variable.isResolved());\n  }\n\n  get hasVariableReference() {\n    return this._applyExistenceTypeTest(type => type.isVariableReference);\n  }\n\n  // TODO: remove this in favor of a renamed setViewType\n  primitiveType() {\n    return this.setViewType;\n  }\n\n  resolvedType() {\n    if (this.isSetView) {\n      let primitiveType = this.primitiveType();\n      let resolvedPrimitiveType = primitiveType.resolvedType();\n      return primitiveType !== resolvedPrimitiveType ? resolvedPrimitiveType.setViewOf() : this;\n    }\n    if (this.isVariable) {\n      let resolution = this.variable.resolution;\n      if (resolution)\n        return resolution;\n    }\n    if (this.isInterface) {\n      return Type.newInterface(this.data.resolvedType());\n    }\n    return this;\n  }\n\n  isResolved() {\n    // TODO: one of these should not exist.\n    return !this.hasUnresolvedVariable;\n  }\n\n  canEnsureResolved() {\n    if (this.isResolved())\n      return true;\n    if (this.isInterface)\n      assert(false, `canEnsureResolved not implemented for ${this}`);\n    if (this.isVariable)\n      return this.variable.canEnsureResolved();\n    if (this.isSetView)\n      return this.primitiveType().canEnsureResolved();\n    return true; \n  }\n\n  maybeEnsureResolved() {\n    if (this.isInterface)\n      assert(false, `maybeEnsureResolved not implemented for ${this}`);\n    if (this.isVariable)\n      return this.variable.maybeEnsureResolved();\n    if (this.isSetView)\n      return this.primitiveType().maybeEnsureResolved();\n    return true;\n  }\n\n  get canWriteSuperset() {\n    if (this.isVariable)\n      return this.variable.canWriteSuperset;\n    if (this.isEntity)\n      return this;\n    if (this.isInterface)\n      return Type.newInterface(this.interfaceShape.canWriteSuperset);\n    assert(false, `canWriteSuperset not implemented for ${this}`);\n  }\n\n  get canReadSubset() {\n    if (this.isVariable)\n      return this.variable.canReadSubset;\n    if (this.isEntity)\n      return this;\n    if (this.isInterface)\n      return Type.newInterface(this.interfaceShape.canReadSubset);\n    assert(false, `canReadSubset not implemented for ${this}`);\n  }\n\n  isMoreSpecificThan(type) {\n    if (this.tag !== type.tag)\n      return false;\n    if (this.isEntity)\n      return this.entitySchema.isMoreSpecificThan(type.entitySchema);\n    if (this.isInterface)\n      return this.interfaceShape.isMoreSpecificThan(type.interfaceShape);\n    assert(false, 'contains not implemented for ${this}');\n  }\n\n  static _canMergeCanReadSubset(type1, type2) {\n    if (type1.canReadSubset && type2.canReadSubset) {\n      if (type1.canReadSubset.tag !== type2.canReadSubset.tag)\n        return false;\n      if (type1.canReadSubset.isEntity)\n        return Schema.intersect(type1.canReadSubset.entitySchema, type2.canReadSubset.entitySchema) !== null;\n      assert(false, `_canMergeCanReadSubset not implemented for types tagged with ${type1.canReadSubset.tag}`);\n    }\n    return true;\n  }\n\n  static _canMergeCanWriteSuperset(type1, type2) {\n    if (type1.canWriteSuperset && type2.canWriteSuperset) {\n      if (type1.canWriteSuperset.tag !== type2.canWriteSuperset.tag)\n        return false;\n      if (type1.canWriteSuperset.isEntity)\n        return Schema.union(type1.canWriteSuperset.entitySchema, type2.canWriteSuperset.entitySchema) !== null;\n      \n    }\n    return true;\n  }\n\n  // Tests whether two types' constraints are compatible with each other\n  static canMergeConstraints(type1, type2) {\n    return Type._canMergeCanReadSubset(type1, type2) && Type._canMergeCanWriteSuperset(type1, type2);\n  }\n\n  toLiteral() {\n    if (this.isVariable && this.isResolved()) {\n      return this.resolvedType().toLiteral();\n    }\n    if (this.data.toLiteral)\n      return {tag: this.tag, data: this.data.toLiteral()};\n    return this;\n  }\n\n  static _deliteralizer(tag) {\n    switch (tag) {\n      case 'Interface':\n        return Shape.fromLiteral;\n      case 'Entity':\n        return Schema.fromLiteral;\n      case 'SetView':\n        return Type.fromLiteral;\n      case 'Tuple':\n        return TupleFields.fromLiteral;\n      case 'Variable':\n        return TypeVariable.fromLiteral;\n      default:\n        return a => a;\n    }\n  }\n\n  static fromLiteral(literal) {\n    return new Type(literal.tag, Type._deliteralizer(literal.tag)(literal.data));\n  }\n\n  setViewOf() {\n    return Type.newSetView(this);\n  }\n\n  // TODO: is this the same as _applyExistenceTypeTest\n  hasProperty(property) {\n    if (property(this))\n      return true;\n    if (this.isSetView)\n      return this.setViewType.hasProperty(property);\n    return false;\n  }\n\n  toString() {\n    if (this.isSetView)\n      return `[${this.primitiveType().toString()}]`;\n    if (this.isEntity)\n      return this.entitySchema.toInlineSchemaString();\n    if (this.isInterface)\n      return this.interfaceShape.name;\n    if (this.isTuple)\n      return this.tupleFields.toString();\n    if (this.isVariableReference)\n      return `~${this.data}`;\n    if (this.isManifestReference)\n      return this.data;\n    if (this.isVariable)\n      return `~${this.data.name}`;\n    assert(false, `Add support to serializing type: ${JSON.stringify(this)}`);\n  }\n\n  getEntitySchema() {\n    if (this.isSetView) {\n      return this.primitiveType().getEntitySchema();\n    }\n    if (this.isEntity) {\n      return this.entitySchema;\n    }\n    if (this.isVariable) {\n      if (this.variable.isResolved()) {\n        return this.resolvedType().getEntitySchema();\n      }\n    }\n  }\n\n  toPrettyString() {\n    // Try extract the description from schema spec.\n    let entitySchema = this.getEntitySchema();\n    if (entitySchema) {\n      if (this.isSetView && entitySchema.description.plural) {\n        return entitySchema.description.plural;\n      }\n      if (this.isEntity && entitySchema.description.pattern) {\n        return entitySchema.description.pattern;\n      }\n    }\n\n    if (this.isRelation) {\n      return JSON.stringify(this.data);\n    }\n    if (this.isSetView) {\n      return `${this.primitiveType().toPrettyString()} List`;\n    }\n    if (this.isVariable)\n      return this.variable.isResolved() ? this.resolvedType().toPrettyString() : `[~${this.name}]`;\n    if (this.isEntity) {\n      // Spit MyTypeFOO to My Type FOO\n      if (this.entitySchema.name) {\n        return this.entitySchema.name.replace(/([^A-Z])([A-Z])/g, '$1 $2').replace(/([A-Z][^A-Z])/g, ' $1').trim();\n      } \n      return JSON.stringify(this.entitySchema._model);\n    }\n    if (this.isTuple)\n      return this.tupleFields.toString();\n    if (this.isInterface)\n      return this.interfaceShape.toPrettyString();\n  }\n}\n\naddType('Entity', 'schema');\naddType('Variable');\naddType('SetView', 'type');\naddType('Relation', 'entities');\naddType('Interface', 'shape');\naddType('Tuple', 'fields');\n\nexport default Type;\n\nimport Shape from './shape.js';\nimport Schema from './schema.js';\nimport TypeVariable from './type-variable.js';\nimport TupleFields from './tuple-fields.js';\nimport TypeChecker from './recipe/type-checker.js';\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/type.js\n// module id = 4\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\nimport assert from '../../platform/assert-web.js';\n\nfunction compareNulls(o1, o2) {\n  if (o1 == o2) return 0;\n  if (o1 == null) return -1;\n  return 1;\n}\nfunction compareStrings(s1, s2) {\n  if (s1 == null || s2 == null) return compareNulls(s1, s2);\n  return s1.localeCompare(s2);\n}\nfunction compareNumbers(n1, n2) {\n  if (n1 == null || n2 == null) return compareNulls(n1, n2);\n  return n1 - n2;\n}\nfunction compareBools(b1, b2) {\n  if (b1 == null || b2 == null) return compareNulls(b1, b2);\n  return b1 - b2;\n}\nfunction compareArrays(a1, a2, compare) {\n  assert(a1 != null);\n  assert(a2 != null);\n  if (a1.length != a2.length) return compareNumbers(a1.length, a2.length);\n  for (let i = 0; i < a1.length; i++) {\n    let result;\n    if ((result = compare(a1[i], a2[i])) != 0) return result;\n  }\n  return 0;\n}\nfunction compareObjects(o1, o2, compare) {\n  let keys = Object.keys(o1);\n  let result;\n  if ((result = compareNumbers(keys.length, Object.keys(o2).length)) != 0) return result;\n  for (let key of keys) {\n    if ((result = compare(o1[key], o2[key])) != 0) return result;\n  }\n  return 0;\n}\nfunction compareComparables(o1, o2) {\n  if (o1 == null || o2 == null) return compareNulls(o1, o2);\n  return o1._compareTo(o2);\n}\n\nexport default {\n  compareNulls,\n  compareStrings,\n  compareNumbers,\n  compareBools,\n  compareArrays,\n  compareObjects,\n  compareComparables,\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/util.js\n// module id = 5\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport Recipe from './recipe.js';\nimport assert from '../../platform/assert-web.js';\n\nclass Shape {\n  constructor(recipe, particles, handles, hcs) {\n    this.recipe = recipe;\n    this.particles = particles;\n    this.handles = handles;\n    this.reverse = new Map();\n    for (let p in particles)\n      this.reverse.set(particles[p], p);\n    for (let h in handles)\n      this.reverse.set(handles[h], h);\n    for (let hc in hcs)\n      this.reverse.set(hcs[hc], hc);\n  }\n}\n\nclass RecipeUtil {\n  static makeShape(particles, handles, map, recipe) {\n    recipe = recipe || new Recipe();\n    let pMap = {};\n    let hMap = {};\n    let hcMap = {};\n    particles.forEach(particle => pMap[particle] = recipe.newParticle(particle));\n    handles.forEach(handle => hMap[handle] = recipe.newHandle());\n    Object.keys(map).forEach(key => {\n      Object.keys(map[key]).forEach(name => {\n        let handle = map[key][name];\n        pMap[key].addConnectionName(name).connectToHandle(hMap[handle]);\n        hcMap[key + ':' + name] = pMap[key].connections[name];\n      });\n    });\n    return new Shape(recipe, pMap, hMap, hcMap);\n  }\n\n  static recipeToShape(recipe) {\n    let particles = {};\n    let id = 0;\n    recipe.particles.forEach(particle => particles[particle.name] = particle);\n    let handles = {};\n    recipe.handles.forEach(handle => handles['h' + id++] = handle);\n    let hcs = {};\n    recipe.handleConnections.forEach(hc => hcs[hc.particle.name + ':' + hc.name] = hc);\n    return new Shape(recipe, particles, handles, hcs);\n  }\n\n  static find(recipe, shape) {\n\n    function _buildNewHCMatches(recipe, shapeHC, match, outputList) {\n      let {forward, reverse, score} = match;\n      let matchFound = false;\n      for (let recipeHC of recipe.handleConnections) {\n        // TODO are there situations where multiple handleConnections should\n        // be allowed to point to the same one in the recipe?\n        if (reverse.has(recipeHC))\n          continue;\n\n        // TODO support unnamed shape particles.\n        if (recipeHC.particle.name != shapeHC.particle.name)\n          continue;\n\n        if (shapeHC.name && shapeHC.name != recipeHC.name)\n          continue;\n\n        // recipeHC is a candidate for shapeHC. shapeHC references a\n        // particle, so recipeHC must reference the matching particle,\n        // or a particle that isn't yet mapped from shape.\n        if (reverse.has(recipeHC.particle)) {\n          if (reverse.get(recipeHC.particle) != shapeHC.particle)\n            continue;\n        } else if (forward.has(shapeHC.particle)) {\n          // we've already mapped the particle referenced by shapeHC\n          // and it doesn't match recipeHC's particle as recipeHC's\n          // particle isn't mapped\n          continue;\n        }\n\n        // shapeHC doesn't necessarily reference a handle, but if it does\n        // then recipeHC needs to reference the matching handle, or one\n        // that isn't yet mapped, or no handle yet.\n        if (shapeHC.handle && recipeHC.handle) {\n          if (reverse.has(recipeHC.handle)) {\n            if (reverse.get(recipeHC.handle) != shapeHC.handle)\n              continue;\n          } else if (forward.has(shapeHC.handle) && forward.get(shapeHC.handle) !== null) {\n            continue;\n          }\n          // Check whether shapeHC and recipeHC reference the same handle.\n          // Note: the id of a handle with 'copy' fate changes during recipe instantiation, hence comparing to original id too.\n          // Skip the check if handles have 'create' fate (their ids are arbitrary).\n          if ((shapeHC.handle.fate != 'create' || (recipeHC.handle.fate != 'create' && recipeHC.handle.originalFate != 'create')) &&\n              shapeHC.handle.id != recipeHC.handle.id && shapeHC.handle.id != recipeHC.handle.originalId) {\n            // this is a different handle.\n            continue;\n          }\n        }\n\n        // clone forward and reverse mappings and establish new components.\n        let newMatch = {forward: new Map(forward), reverse: new Map(reverse), score};\n        assert(!newMatch.forward.has(shapeHC.particle) || newMatch.forward.get(shapeHC.particle) == recipeHC.particle);\n        newMatch.forward.set(shapeHC.particle, recipeHC.particle);\n        newMatch.reverse.set(recipeHC.particle, shapeHC.particle);\n        if (shapeHC.handle) {\n          if (!recipeHC.handle) {\n            if (!newMatch.forward.has(shapeHC.handle)) {\n              newMatch.forward.set(shapeHC.handle, null);\n              newMatch.score -= 2;\n            }\n          } else {\n            newMatch.forward.set(shapeHC.handle, recipeHC.handle);\n            newMatch.reverse.set(recipeHC.handle, shapeHC.handle);\n          }\n        }\n        newMatch.forward.set(shapeHC, recipeHC);\n        newMatch.reverse.set(recipeHC, shapeHC);\n        outputList.push(newMatch);\n        matchFound = true;\n      }\n      if (matchFound == false) {\n        let newMatches = [];\n        _buildNewParticleMatches(recipe, shapeHC.particle, match, newMatches);\n        newMatches.forEach(newMatch => {\n          if (shapeHC.handle && !newMatch.forward.has(shapeHC.handle)) {\n            newMatch.forward.set(shapeHC.handle, null);\n            newMatch.score -= 2;\n          }\n          newMatch.forward.set(shapeHC, null);\n          newMatch.score -= 1;\n          outputList.push(newMatch);\n        });\n      }\n    }\n\n    function _buildNewParticleMatches(recipe, shapeParticle, match, newMatches) {\n      let {forward, reverse, score} = match;\n      let matchFound = false;\n      for (let recipeParticle of recipe.particles) {\n        if (reverse.has(recipeParticle))\n          continue;\n\n        if (recipeParticle.name != shapeParticle.name)\n          continue;\n        let newMatch = {forward: new Map(forward), reverse: new Map(reverse), score};\n        newMatch.forward.set(shapeParticle, recipeParticle);\n        newMatch.reverse.set(recipeParticle, shapeParticle);\n        newMatches.push(newMatch);\n        matchFound = true;\n      }\n      if (matchFound == false) {\n        let newMatch = {forward: new Map(), reverse: new Map(), score: 0};\n        forward.forEach((value, key) => newMatch.forward.set(key, value));\n        reverse.forEach((value, key) => newMatch.reverse.set(key, value));\n        if (!newMatch.forward.has(shapeParticle)) {\n          newMatch.forward.set(shapeParticle, null);\n          newMatch.score = match.score - 1;\n        }\n        newMatches.push(newMatch);\n      }\n    }\n\n    function _assignHandlesToEmptyPosition(match, emptyHandles, nullHandles) {\n      if (emptyHandles.length == 1) {\n        let matches = [];\n        let {forward, reverse, score} = match;\n        for (let nullHandle of nullHandles) {\n          let newMatch = {forward: new Map(forward), reverse: new Map(reverse), score: score + 1};\n          newMatch.forward.set(nullHandle, emptyHandles[0]);\n          newMatch.reverse.set(emptyHandles[0], nullHandle);\n          matches.push(newMatch);\n        }\n        return matches;\n      }\n      let thisHandle = emptyHandles.pop();\n      let matches = _assignHandlesToEmptyPosition(match, emptyHandles, nullHandles);\n      let newMatches = [];\n      for (let match of matches) {\n        let nullHandles = Object.values(shape.handle).filter(handle => match.forward.get(handle) == null);\n        if (nullHandles.length > 0)\n          newMatches = newMatches.concat(_assignHandlesToEmptyPosition(match, [thisHandle], nullHandles));\n        else\n          newMatches.concat(match);\n      }\n      return newMatches;\n    }\n\n    // Particles and Handles are initially stored by a forward map from\n    // shape component to recipe component.\n    // Handle connections, particles and handles are also stored by a reverse map\n    // from recipe component to shape component.\n\n    // Start with a single, empty match\n    let matches = [{forward: new Map(), reverse: new Map(), score: 0}];\n    for (let shapeHC of shape.recipe.handleConnections) {\n      let newMatches = [];\n      for (let match of matches) {\n        // collect matching handle connections into a new matches list\n        _buildNewHCMatches(recipe, shapeHC, match, newMatches);\n      }\n      matches = newMatches;\n    }\n\n    for (let shapeParticle of shape.recipe.particles) {\n      if (Object.keys(shapeParticle.connections).length > 0)\n        continue;\n      if (shapeParticle.unnamedConnections.length > 0)\n        continue;\n      let newMatches = [];\n      for (let match of matches)\n        _buildNewParticleMatches(recipe, shapeParticle, match, newMatches);\n      matches = newMatches;\n    }\n\n    let emptyHandles = recipe.handles.filter(handle => handle.connections.length == 0);\n\n    if (emptyHandles.length > 0) {\n      let newMatches = [];\n      for (let match of matches) {\n        let nullHandles = Object.values(shape.handles).filter(handle => match.forward.get(handle) == null);\n        if (nullHandles.length > 0)\n          newMatches = newMatches.concat(_assignHandlesToEmptyPosition(match, emptyHandles, nullHandles));\n        else\n          newMatches.concat(match);\n      }\n      matches = newMatches;\n    }\n\n    return matches.map(({forward, score}) => {\n      let match = {};\n      forward.forEach((value, key) => match[shape.reverse.get(key)] = value);\n      return {match, score};\n    });\n  }\n\n  static directionCounts(handle) {\n    let counts = {'in': 0, 'out': 0, 'inout': 0, 'unknown': 0};\n    for (let connection of handle.connections) {\n      let direction = connection.direction;\n      if (counts[direction] == undefined)\n        direction = 'unknown';\n      counts[direction]++;\n    }\n    counts.in += counts.inout;\n    counts.out += counts.inout;\n    return counts;\n  }\n}\n\nexport default RecipeUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/recipe-util.js\n// module id = 6\n// module chunks = 0","/*\n  Copyright 2015 Google Inc. All Rights Reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport fs from '../platform/fs-web.js';\n\nlet events = [];\nlet pid;\nlet now;\nif (typeof document == 'object') {\n  pid = 42;\n  now = function() {\n    return performance.now() * 1000;\n  };\n} else {\n  pid = process.pid;\n  now = function() {\n    let t = process.hrtime();\n    return t[0] * 1000000 + t[1] / 1000;\n  };\n}\n\nlet flowId = 0;\n\nfunction parseInfo(info) {\n  if (!info)\n    return {};\n  if (typeof info == 'function')\n    return parseInfo(info());\n  if (info.toTraceInfo)\n    return parseInfo(info.toTraceInfo());\n  return info;\n}\n\nlet streamingCallbacks = [];\nfunction pushEvent(event) {\n    event.pid = pid;\n    event.tid = 0;\n    if (!event.args) {\n      delete event.args;\n    }\n    if (!event.ov) {\n      delete event.ov;\n    }\n    if (!event.cat) {\n      event.cat = '';\n    }\n    events.push(event);\n    Promise.resolve().then(() => {\n      for (let {callback, predicate} of streamingCallbacks) {\n          if (!predicate || predicate(event)) callback(event);\n      }\n    });\n}\n\nlet module = {exports: {}};\nexport default module.exports;\nmodule.exports.enabled = false;\nmodule.exports.enable = function() {\n  module.exports.enabled = true;\n  init();\n};\n\n// TODO: Add back support for options.\n//module.exports.options = options;\n//var enabled = Boolean(options.traceFile);\n\nfunction init() {\n  let result = {\n    wait: async function(v) {\n      return v;\n    },\n    start: function() {\n      return this;\n    },\n    end: function() {\n      return this;\n    },\n    step: function() {\n      return this;\n    },\n    addArgs: function() {\n    },\n    endWith: async function(v) {\n      return v;\n    },\n  };\n  module.exports.wrap = function(info, fn) {\n    return fn;\n  };\n  module.exports.start = function(info, fn) {\n    return result;\n  };\n  module.exports.flow = function(info, fn) {\n    return result;\n  };\n\n  if (!module.exports.enabled) {\n    return;\n  }\n\n  module.exports.wrap = function(info, fn) {\n    return function(...args) {\n      let t = module.exports.start(info);\n      try {\n        return fn(...args);\n      } finally {\n        t.end();\n      }\n    };\n  };\n\n  function startSyncTrace(info) {\n    info = parseInfo(info);\n    let args = info.args;\n    let begin = now();\n    return {\n      addArgs: function(extraArgs) {\n        args = Object.assign(args || {}, extraArgs);\n      },\n      end: function(endInfo) {\n        if (endInfo && endInfo.args) {\n          args = Object.assign(args || {}, endInfo.args);\n        }\n        this.endTs = now();\n        pushEvent({\n          ph: 'X',\n          ts: begin,\n          dur: this.endTs - begin,\n          cat: info.cat,\n          name: info.name,\n          ov: info.overview,\n          args: args,\n        });\n      },\n      beginTs: begin\n    };\n  }\n  module.exports.start = function(info) {\n    let trace = startSyncTrace(info);\n    let flow;\n    let baseInfo = {cat: info.cat, name: info.name + ' (async)', overview: info.overview};\n    return {\n      async wait(v, info) {\n        trace.end(info);\n        if (!flow) {\n          flow = module.exports.flow(Object.assign({ts: trace.endTs}, baseInfo)).start();\n        } else {\n          flow.step(Object.assign({ts: trace.beginTs}, baseInfo));\n        }\n        trace = null;\n        try {\n          return await v;\n        } finally {\n          trace = startSyncTrace(baseInfo);\n        }\n      },\n      addArgs(extraArgs) {\n        trace.addArgs(extraArgs);\n      },\n      end(endInfo) {\n        trace.end(endInfo);\n        if (flow) {\n          flow.end({ts: trace.beginTs});\n        }\n      },\n      async endWith(v, endInfo) {\n        if (Promise.resolve(v) === v) { // If v is a promise.\n          v = this.wait(v);\n          try {\n            return await v;\n          } finally {\n            this.end(endInfo);\n          }\n        } else { // If v is not a promise.\n          this.end(endInfo);\n          return v;\n        }\n      }\n    };\n  };\n  module.exports.flow = function(info) {\n    info = parseInfo(info);\n    let id = flowId++;\n    let started = false;\n    return {\n      start: function() {\n        let begin = (info && info.ts) || now();\n        started = true;\n        pushEvent({\n          ph: 's',\n          ts: begin,\n          cat: info.cat,\n          name: info.name,\n          ov: info.overview,\n          args: info.args,\n          id: id,\n        });\n        return this;\n      },\n      end: function(endInfo) {\n        if (!started) return;\n        let ts = (endInfo && endInfo.ts) || now();\n        endInfo = parseInfo(endInfo);\n        pushEvent({\n          ph: 'f',\n          bp: 'e', // binding point is enclosing slice.\n          ts,\n          cat: info.cat,\n          name: info.name,\n          ov: info.overview,\n          args: endInfo && endInfo.args,\n          id: id,\n        });\n        return this;\n      },\n      step: function(stepInfo) {\n        if (!started) return;\n        let ts = (stepInfo && stepInfo.ts) || now();\n        stepInfo = parseInfo(stepInfo);\n        pushEvent({\n          ph: 't',\n          ts,\n          cat: info.cat,\n          name: info.name,\n          ov: info.overview,\n          args: stepInfo && stepInfo.args,\n          id: id,\n        });\n        return this;\n      },\n    };\n  };\n  module.exports.save = function() {\n    return {traceEvents: events};\n  };\n  module.exports.download = function() {\n    let a = document.createElement('a');\n    a.download = 'trace.json';\n    a.href = 'data:text/plain;base64,' + btoa(JSON.stringify(module.exports.save()));\n    a.click();\n  };\n  module.exports.now = now;\n  module.exports.stream = function(callback, predicate) {\n    streamingCallbacks.push({callback, predicate});\n  };\n  module.exports.__clearForTests = function() {\n    events.length = 0;\n    streamingCallbacks.length = 0;\n  };\n}\n\ninit();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./tracelib/trace.js\n// module id = 7\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\nimport Type from './type.js';\nimport Entity from './entity.js';\n\nexport default class Schema {\n  constructor(model) {\n    let legacy = [];\n    // TODO: remove this (remnants of normative/optional)\n    if (model.sections) {\n      legacy.push('sections');\n      assert(!model.fields);\n      model.fields = {};\n      for (let section of model.sections) {\n        Object.assign(model.fields, section.fields);\n      }\n      delete model.sections;\n    }\n    if (model.name) {\n      legacy.push('name');\n      model.names = [model.name];\n      delete model.name;\n    }\n    if (model.parents) {\n      legacy.push('parents');\n      for (let parent of model.parents) {\n        let parentSchema = new Schema(parent);\n        model.names.push(...parent.names);\n        Object.assign(model.fields, parent.fields);\n      }\n      model.names = [...new Set(model.names)];\n    }\n    if (legacy.length > 0) {\n      console.warn(`Schema ${model.names[0] || '*'} was serialized with legacy format (${legacy.join(', ')})`, new Error());\n    }\n    assert(model.fields);\n    this._model = model;\n    this.description = {};\n    if (model.description) {\n      model.description.description.forEach(desc => this.description[desc.name] = desc.pattern);\n    }\n  }\n\n  toLiteral() {\n    return this._model;\n  }\n\n  static fromLiteral(data) {\n    return new Schema(data);\n  }\n\n  get fields() {\n    return this._model.fields;\n  }\n\n  get names() {\n    return this._model.names;\n  }\n\n  // TODO: This should only be an ident used in manifest parsing.\n  get name() {\n    return this.names[0];\n  }\n\n  static typesEqual(fieldType1, fieldType2) {\n    // TODO: structural check instead of stringification.\n    return Schema._typeString(fieldType1) == Schema._typeString(fieldType2);\n  }\n\n  static _typeString(type) {\n    if (typeof(type) != 'object') {\n      assert(typeof type == 'string');\n      return type;\n    }\n    switch (type.kind) {\n      case 'schema-union':\n        return `(${type.types.join(' or ')})`;\n      case 'schema-tuple':\n        return `(${type.types.join(', ')})`;\n      default:\n        throw new Error(`Unknown type kind ${type.kind} in schema ${this.name}`);\n    }\n  }\n\n  static union(schema1, schema2) {\n    let names = [...new Set([...schema1.names, ...schema2.names])];\n    let fields = {};\n\n    for (let [field, type] of [...Object.entries(schema1.fields), ...Object.entries(schema2.fields)]) {\n      if (fields[field]) {\n        if (!Schema.typesEqual(fields[field], type)) {\n          return null;\n        }\n      } else {\n        fields[field] = type;\n      }\n    }\n\n    return new Schema({\n      names,\n      fields,\n    });\n  }\n\n  static intersect(schema1, schema2) {\n    if (schema1.isMoreSpecificThan(schema2))\n      return schema2;\n    else if (schema2.isMoreSpecificThan(schema1))\n      return schema1;\n    \n    // TODO: Don't be lazy\n    assert(false, 'non-trivial intersection of schemas not implemented.');\n    return null;\n  }\n\n  equals(otherSchema) {\n    return this === otherSchema || (this.name == otherSchema.name\n       // TODO: Check equality without calling contains.\n       && this.isMoreSpecificThan(otherSchema)\n       && otherSchema.isMoreSpecificThan(this));\n  }\n\n  isMoreSpecificThan(otherSchema) {\n    let names = new Set(this.names);\n    for (let name of otherSchema.names) {\n      if (!names.has(name)) {\n        return false;\n      }\n    }\n    let fields = {};\n    for (let [name, type] of Object.entries(this.fields)) {\n      fields[name] = type;\n    }\n    for (let [name, type] of Object.entries(otherSchema.fields)) {\n      if (fields[name] == undefined)\n        return false;\n      if (!Schema.typesEqual(fields[name], type)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get type() {\n    return Type.newEntity(this);\n  }\n\n  entityClass() {\n    let schema = this;\n    let className = this.name;\n    let classJunk = ['toJSON', 'prototype', 'toString', 'inspect'];\n\n    let convertToJsType = fieldType => {\n      switch (fieldType) {\n        case 'Text':\n          return 'string';\n        case 'URL':\n          return 'string';\n        case 'Number':\n          return 'number';\n        case 'Boolean':\n          return 'boolean';\n        case 'Object':\n          return 'object';\n        default:\n          throw new Error(`Unknown field type ${fieldType} in schema ${className}`);\n      }\n    };\n\n    const fieldTypes = this.fields;\n    let validateFieldAndTypes = (op, name, value) => {\n      let fieldType = fieldTypes[name];\n      if (fieldType === undefined) {\n        throw new Error(`Can't ${op} field ${name}; not in schema ${className}`);\n      }\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      if (typeof(fieldType) !== 'object') {\n        // Primitive fields.\n        if (typeof(value) !== convertToJsType(fieldType)) {\n          throw new TypeError(\n              `Type mismatch ${op}ting field ${name} (type ${fieldType}); ` +\n              `value '${value}' is type ${typeof(value)}`);\n        }\n        return;\n      }\n\n      switch (fieldType.kind) {\n        case 'schema-union':\n          // Value must be a primitive that matches one of the union types.\n          for (let innerType of fieldType.types) {\n            if (typeof(value) === convertToJsType(innerType)) {\n              return;\n            }\n          }\n          throw new TypeError(\n              `Type mismatch ${op}ting field ${name} (union [${fieldType.types}]); ` +\n              `value '${value}' is type ${typeof(value)}`);\n\n        case 'schema-tuple':\n          // Value must be an array whose contents match each of the tuple types.\n          if (!Array.isArray(value)) {\n            throw new TypeError(`Cannot ${op} tuple ${name} with non-array value '${value}'`);\n          }\n          if (value.length != fieldType.types.length) {\n            throw new TypeError(`Length mismatch ${op}ting tuple ${name} ` +\n                                `[${fieldType.types}] with value '${value}'`);\n          }\n          fieldType.types.map((innerType, i) => {\n            if (value[i] !== undefined && value[i] !== null &&\n                typeof(value[i]) !== convertToJsType(innerType)) {\n              throw new TypeError(\n                  `Type mismatch ${op}ting field ${name} (tuple [${fieldType.types}]); ` +\n                  `value '${value}' has type ${typeof(value[i])} at index ${i}`);\n            }\n          });\n          break;\n\n        default:\n          throw new Error(`Unknown kind ${fieldType.kind} in schema ${className}`);\n      }\n    };\n\n    let clazz = class extends Entity {\n      constructor(data, userIDComponent) {\n        super(userIDComponent);\n        this.rawData = new Proxy({}, {\n          get: (target, name) => {\n            if (classJunk.includes(name) || name.constructor == Symbol) {\n              return undefined;\n            }\n            let value = target[name];\n            validateFieldAndTypes('get', name, value);\n            return value;\n          },\n          set: (target, name, value) => {\n            validateFieldAndTypes('set', name, value);\n            target[name] = value;\n            return true;\n          }\n        });\n        assert(data, `can't construct entity with null data`);\n        for (let [name, value] of Object.entries(data)) {\n          this.rawData[name] = value;\n        }\n      }\n\n      dataClone() {\n        let clone = {};\n        for (let name of Object.keys(schema.fields)) {\n          if (this.rawData[name] !== undefined)\n            clone[name] = this.rawData[name];\n        }\n        return clone;\n      }\n\n      static get key() {\n        return {\n          tag: 'entity',\n          schema: schema.toLiteral(),\n        };\n      }\n    };\n\n    Object.defineProperty(clazz, 'type', {value: this.type});\n    Object.defineProperty(clazz, 'name', {value: this.name});\n    // TODO: add query / getter functions for user properties\n    for (let name of Object.keys(this.fields)) {\n      Object.defineProperty(clazz.prototype, name, {\n        get: function() {\n          return this.rawData[name];\n        },\n        set: function(v) {\n          this.rawData[name] = v;\n        }\n      });\n    }\n    return clazz;\n  }\n\n  toInlineSchemaString() {\n    let names = (this.names || ['*']).join(' ');\n    let fields = Object.entries(this.fields).map(([name, type]) => `${Schema._typeString(type)} ${name}`).join(', ');\n    return `${names} {${fields}}`;\n  }\n  \n  toManifestString() {\n    let results = [];\n    results.push(`schema ${this.names.join(' ')}`);\n    results.push(...Object.entries(this.fields).map(([name, type]) => `  ${Schema._typeString(type)} ${name}`));\n    if (Object.keys(this.description).length > 0) {\n      results.push(`  description \\`${this.description.pattern}\\``);\n      for (let name of Object.keys(this.description)) {\n        if (name != 'pattern') {\n          results.push(`    ${name} \\`${this.description[name]}\\``);\n        }\n      }\n    }\n    return results.join('\\n');\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/schema.js\n// module id = 8\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport Type from './type.js';\nimport TypeChecker from './recipe/type-checker.js';\nimport Shape from './shape.js';\nimport assert from '../platform/assert-web.js';\n\nclass ConnectionSpec {\n  constructor(rawData, typeVarMap) {\n    this.rawData = rawData;\n    this.direction = rawData.direction;\n    this.name = rawData.name;\n    this.type = rawData.type.mergeTypeVariablesByName(typeVarMap);\n    this.isOptional = rawData.isOptional;\n  }\n\n  get isInput() {\n    // TODO: we probably don't really want host to be here.\n    return this.direction == 'in' || this.direction == 'inout' || this.direction == 'host';\n  }\n\n  get isOutput() {\n    return this.direction == 'out' || this.direction == 'inout';\n  }\n\n  isCompatibleType(type) {\n    return TypeChecker.compareTypes({type}, {type: this.type, direction: this.direction});\n  }\n}\n\nclass SlotSpec {\n  constructor(slotModel) {\n    this.name = slotModel.name;\n    this.isRequired = slotModel.isRequired;\n    this.isSet = slotModel.isSet;\n    this.tags = slotModel.tags || [];\n    this.formFactor = slotModel.formFactor; // TODO: deprecate form factors?\n    this.providedSlots = [];\n    if (!slotModel.providedSlots)\n      return;\n    slotModel.providedSlots.forEach(ps => {\n      this.providedSlots.push(new ProvidedSlotSpec(ps.name, ps.isSet, ps.tags, ps.formFactor, ps.handles));\n    });\n  }\n\n  getProvidedSlotSpec(name) {\n    return this.providedSlots.find(ps => ps.name == name);\n  }\n}\n\nclass ProvidedSlotSpec {\n  constructor(name, isSet, tags, formFactor, handles) {\n    this.name = name;\n    this.isSet = isSet;\n    this.tags = tags || [];\n    this.formFactor = formFactor; // TODO: deprecate form factors?\n    this.handles = handles || [];\n  }\n}\n\nclass ParticleSpec {\n  constructor(model) {\n    this._model = model;\n    this.name = model.name;\n    this.verbs = model.verbs;\n    let typeVarMap = new Map();\n    this.connections = model.args.map(a => new ConnectionSpec(a, typeVarMap));\n    this.connectionMap = new Map();\n    this.connections.forEach(a => this.connectionMap.set(a.name, a));\n    this.inputs = this.connections.filter(a => a.isInput);\n    this.outputs = this.connections.filter(a => a.isOutput);\n\n    // initialize descriptions patterns.\n    model.description = model.description || {};\n    this.validateDescription(model.description);\n    this.pattern = model.description['pattern'];\n    this.connections.forEach(connectionSpec => {\n      connectionSpec.pattern = model.description[connectionSpec.name];\n    });\n\n    this.implFile = model.implFile;\n    this.affordance = model.affordance;\n    this.slots = new Map();\n    if (model.slots)\n      model.slots.forEach(s => this.slots.set(s.name, new SlotSpec(s)));\n    // Verify provided slots use valid view connection names.\n    this.slots.forEach(slot => {\n      slot.providedSlots.forEach(ps => {\n        ps.handles.forEach(v => assert(this.connectionMap.has(v), 'Cannot provide slot for nonexistent view constraint ', v));\n      });\n    });\n  }\n\n  isInput(param) {\n    for (let input of this.inputs) if (input.name == param) return true;\n  }\n\n  isOutput(param) {\n    for (let outputs of this.outputs) if (outputs.name == param) return true;\n  }\n\n  getSlotSpec(slotName) {\n    return this.slots.get(slotName);\n  }\n\n  get primaryVerb() {\n    if (this.verbs.length > 0) {\n      return this.verbs[0];\n    }\n  }\n\n  matchAffordance(affordance) {\n    return this.slots.size <= 0 || this.affordance.includes(affordance);\n  }\n\n  toLiteral() {\n    let {args, name, verbs, description, implFile, affordance, slots} = this._model;\n    args = args.map(a => {\n      let {type, direction, name, isOptional} = a;\n      type = type.toLiteral();\n      return {type, direction, name, isOptional};\n    });\n    return {args, name, verbs, description, implFile, affordance, slots};\n  }\n\n  static fromLiteral(literal) {\n    let {args, name, verbs, description, implFile, affordance, slots} = literal;\n    args = args.map(({type, direction, name, isOptional}) => ({type: Type.fromLiteral(type), direction, name, isOptional}));\n    return new ParticleSpec({args, name, verbs, description, implFile, affordance, slots});\n  }\n\n  clone() {\n    return ParticleSpec.fromLiteral(this.toLiteral());\n  }\n\n  equals(other) {\n    return JSON.stringify(this.toLiteral()) === JSON.stringify(other.toLiteral());\n  }\n\n  validateDescription(description) {\n    Object.keys(description || []).forEach(d => {\n      assert(['kind', 'location', 'pattern'].includes(d) || this.connectionMap.has(d), `Unexpected description for ${d}`);\n    });\n  }\n\n  toInterface() {\n    return Type.newInterface(this._toShape());\n  }\n\n  _toShape() {\n    const handles = this._model.args;\n    // TODO: wat do?\n    assert(!this.slots.length, 'please implement slots toShape');\n    const slots = [];\n    return new Shape(handles, slots);\n  }\n\n  toString() {\n    let results = [];\n    results.push(`particle ${this.name} in '${this.implFile}'`);\n    let connRes = this.connections.map(cs => `${cs.direction} ${cs.type.toString()}${cs.isOptional ? '?' : ''} ${cs.name}`);\n    results.push(`  ${this.primaryVerb}(${connRes.join(', ')})`);\n    this.affordance.filter(a => a != 'mock').forEach(a => results.push(`  affordance ${a}`));\n    // TODO: support form factors\n    this.slots.forEach(s => {\n      // Consume slot.\n      let consume = [];\n      if (s.isRequired) {\n        consume.push('must');\n      }\n      consume.push('consume');\n      if (s.isSet) {\n        consume.push('set of');\n      }\n      consume.push(s.name);\n      if (s.tags.length > 0) {\n        consume.push(s.tags.join(' '));\n      }\n      results.push(`  ${consume.join(' ')}`);\n      if (s.formFactor) {\n        results.push(`    formFactor ${s.formFactor}`);\n      }\n      // Provided slots.\n      s.providedSlots.forEach(ps => {\n        let provide = ['provide'];\n        if (ps.isSet) {\n          provide.push('set of');\n        }\n        provide.push(ps.name);\n        if (ps.tags.length > 0) {\n          provide.push(ps.tags.join(' '));\n        }\n        results.push(`    ${provide.join(' ')}`);\n        if (ps.formFactor) {\n          results.push(`      formFactor ${ps.formFactor}`);\n        }\n        ps.handles.forEach(psv => results.push(`      view ${psv}`));\n      });\n    });\n    // Description\n    if (this.pattern) {\n      results.push(`  description \\`${this.pattern}\\``);\n      this.connections.forEach(cs => {\n        if (cs.pattern) {\n          results.push(`    ${cs.name} \\`${cs.pattern}\\``);\n        }\n      });\n    }\n    return results.join('\\n');\n  }\n\n  toManifestString() {\n    return this.toString();\n  }\n}\n\nexport default ParticleSpec;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/particle-spec.js\n// module id = 9\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport Type from '../type.js';\nimport TypeVariable from '../type-variable.js';\nimport assert from '../../platform/assert-web.js';\n\nclass TypeChecker {\n\n  // resolve a list of handleConnection types against a handle\n  // base type. This is the core type resolution mechanism, but should only\n  // be used when types can actually be associated with each other / constrained.\n  //\n  // By design this function is called exactly once per handle in a recipe during\n  // normalization, and should provide the same final answers regardless of the \n  // ordering of handles within that recipe\n  //\n  // NOTE: you probably don't want to call this function, if you think you\n  // do, talk to shans@.\n  static processTypeList(baseType, list) {\n    if (baseType == undefined)\n      baseType = Type.newVariable(new TypeVariable('a'));\n\n    let concreteTypes = [];\n\n    // baseType might be a variable (and is definitely a variable if no baseType was available).\n    // Some of the list might contain variables too.\n    \n    // First attempt to merge all the variables into the baseType\n    //\n    // If the baseType is a variable then this results in a single place to manipulate the constraints\n    // of all the other connected variables at the same time.\n    for (let item of list) {\n      if (item.type.resolvedType().hasVariable) {\n        baseType = TypeChecker._tryMergeTypeVariable(baseType, item.type);\n        if (baseType == null)\n          return null;\n      } else {\n        concreteTypes.push(item);\n      }\n    }\n\n    for (let item of concreteTypes) {\n      let success = TypeChecker._tryMergeConstraints(baseType, item);\n      if (!success)\n        return null;\n    }\n\n    let getResolution = candidate => {\n      if (candidate.isVariable == false)\n        return candidate;\n      if (candidate.canReadSubset == null || candidate.canWriteSuperset == null)\n        return candidate;\n      if (candidate.canReadSubset.isMoreSpecificThan(candidate.canWriteSuperset)) {\n        if (candidate.canWriteSuperset.isMoreSpecificThan(candidate.canReadSubset))\n          candidate.variable.resolution = candidate.canReadSubset;\n        return candidate;\n      }  \n      return null;\n    };\n\n    let candidate = baseType.resolvedType();\n\n    if (candidate.isSetView) {\n      candidate = candidate.primitiveType();\n      let resolution = getResolution(candidate);\n      if (resolution == null)\n        return null;\n      return resolution.setViewOf();\n    }\n\n    return getResolution(candidate);\n  }\n\n  static _tryMergeTypeVariable(base, onto) {\n    let [primitiveBase, primitiveOnto] = Type.unwrapPair(base.resolvedType(), onto.resolvedType());\n\n    if (primitiveBase.isVariable) {\n      if (primitiveOnto.isVariable) {\n        // base, onto both variables.\n        let result = primitiveBase.variable.maybeMergeConstraints(primitiveOnto.variable);\n        if (result == false)\n          return null;\n        primitiveOnto.variable.resolution = primitiveBase;\n      } else {\n        // base variable, onto not.\n        primitiveBase.variable.resolution = primitiveOnto;\n      }\n    } else if (primitiveOnto.isVariable) {\n      // onto variable, base not.\n      primitiveOnto.variable.resolution = primitiveBase;\n      return onto;\n    } else {\n      assert(false, 'tryMergeTypeVariable shouldn\\'t be called on two types without any type variables');\n    }\n    \n    return base;\n  }\n\n  static _tryMergeConstraints(handleType, {type, direction}) {\n    let [primitiveHandleType, primitiveConnectionType] = Type.unwrapPair(handleType.resolvedType(), type.resolvedType());\n    if (primitiveHandleType.isVariable) {\n      // if this is an undifferentiated variable then we need to create structure to match against. That's\n      // allowed because this variable could represent anything, and it needs to represent this structure\n      // in order for type resolution to succeed.\n      if (primitiveConnectionType.isSetView) {\n        assert(primitiveHandleType.variable.resolution == null && primitiveHandleType.variable.canReadSubset == null && primitiveHandleType.variable.canWriteSuperset == null);\n        primitiveHandleType.variable.resolution = Type.newSetView(Type.newVariable(new TypeVariable('a')));\n        let unwrap = Type.unwrapPair(primitiveHandleType.resolvedType(), primitiveConnectionType);\n        primitiveHandleType = unwrap[0];\n        primitiveConnectionType = unwrap[1];\n      }\n\n      if (direction == 'out' || direction == 'inout') {\n        // the canReadSubset of the handle represents the maximal type that can be read from the\n        // handle, so we need to intersect out any type that is more specific than the maximal type\n        // that could be written.\n        if (!primitiveHandleType.variable.maybeMergeCanReadSubset(primitiveConnectionType.canWriteSuperset))\n          return false;\n      }\n      if (direction == 'in' || direction == 'inout') {\n        // the canWriteSuperset of the handle represents the maximum lower-bound type that is read from the handle,\n        // so we need to union it with the type that wants to be read here.\n        if (!primitiveHandleType.variable.maybeMergeCanWriteSuperset(primitiveConnectionType.canReadSubset))\n          return false;\n      }\n    } else {\n      if (direction == 'out' || direction == 'inout')\n        if (!TypeChecker._writeConstraintsApply(primitiveHandleType, primitiveConnectionType))\n          return false;\n      if (direction == 'in' || direction == 'inout')\n        if (!TypeChecker._readConstraintsApply(primitiveHandleType, primitiveConnectionType))\n          return false;\n    }\n\n    return true;\n  }\n\n  static _writeConstraintsApply(handleType, connectionType) {\n    // this connection wants to write to this handle. If the written type is\n    // more specific than the canReadSubset then it isn't violating the maximal type\n    // that can be read.\n    let writtenType = connectionType.canWriteSuperset;\n    if (writtenType == null || handleType.canReadSubset == null)\n      return true;\n    if (writtenType.isMoreSpecificThan(handleType.canReadSubset))\n      return true;\n    return false;\n  }\n\n  static _readConstraintsApply(handleType, connectionType) {\n    // this connection wants to read from this handle. If the read type\n    // is less specific than the canWriteSuperset, then it isn't violating\n    // the maximum lower-bound read type.\n    let readType = connectionType.canReadSubset;\n    if (readType == null|| handleType.canWriteSuperset == null)\n      return true;\n    if (handleType.canWriteSuperset.isMoreSpecificThan(readType))\n      return true;\n    return false;\n  }\n\n  // TODO: what is this? Does it still belong here?\n  static restrictType(type, instance) {\n    assert(type.isInterface, `restrictType not implemented for ${type}`);\n\n    let shape = type.interfaceShape.restrictType(instance);\n    if (shape == false)\n      return false;\n    return Type.newInterface(shape);\n  }\n\n  // Compare two types to see if they could be potentially resolved (in the absence of other\n  // information). This is used as a filter when selecting compatible handles or checking \n  // validity of recipes. This function returning true never implies that full type resolution\n  // will succeed, but if the function returns false for a pair of types that are associated\n  // then type resolution is guaranteed to fail.\n  //\n  // left, right: {type, direction, connection}\n  static compareTypes(left, right) {\n    let resolvedLeft = left.type.resolvedType();\n    let resolvedRight = right.type.resolvedType();\n    let [leftType, rightType] = Type.unwrapPair(resolvedLeft, resolvedRight);\n\n    if (leftType.isVariable || rightType.isVariable) {\n      // TODO: everything should use this, eventually. Need to implement the\n      // right functionality in Shapes first, though.\n      return Type.canMergeConstraints(leftType, rightType);\n    }\n\n    if (leftType.type != rightType.type) {\n      return false;\n    }\n\n    // TODO: we need a generic way to evaluate type compatibility\n    //       shapes + entities + etc\n    if (leftType.isInterface && rightType.isInterface) {\n      if (leftType.interfaceShape.equals(rightType.interfaceShape)) {\n        return true;\n      }\n    }\n\n    if (!leftType.isEntity || !rightType.isEntity) {\n      return false;\n    }\n\n    let leftIsSub = leftType.entitySchema.isMoreSpecificThan(rightType.entitySchema);\n    let leftIsSuper = rightType.entitySchema.isMoreSpecificThan(leftType.entitySchema);\n\n    if (leftIsSuper && leftIsSub) {\n       return true;\n    }\n    if (!leftIsSuper && !leftIsSub) {\n      return false;\n    }\n    let [superclass, subclass] = leftIsSuper ? [left, right] : [right, left];\n\n    // treat view types as if they were 'inout' connections. Note that this\n    // guarantees that the view's type will be preserved, and that the fact\n    // that the type comes from a view rather than a connection will also\n    // be preserved.\n    let superDirection = superclass.direction || (superclass.connection ? superclass.connection.direction : 'inout');\n    let subDirection = subclass.direction || (subclass.connection ? subclass.connection.direction : 'inout');\n    if (superDirection == 'in') {\n      return true;\n    }\n    if (subDirection == 'out') {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default TypeChecker;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/type-checker.js\n// module id = 10\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\nimport parser from './build/manifest-parser.js';\nimport Recipe from './recipe/recipe.js';\nimport ParticleSpec from './particle-spec.js';\nimport Schema from './schema.js';\nimport Search from './recipe/search.js';\nimport Shape from './shape.js';\nimport Type from './type.js';\nimport util from './recipe/util.js';\nimport StorageProviderFactory from './storage/storage-provider-factory.js';\nimport scheduler from './scheduler.js';\nimport ManifestMeta from './manifest-meta.js';\nimport TypeChecker from './recipe/type-checker.js';\n\nclass ManifestError extends Error {\n  constructor(location, message) {\n    super(message);\n    this.location = location;\n  }\n}\n\n// Calls `this.visit()` for each node in a manfest AST, parents before children.\nclass ManifestVisitor {\n  traverse(ast) {\n    if (['string', 'number', 'boolean'].includes(typeof ast) || ast === null) {\n      return;\n    }\n    if (Array.isArray(ast)) {\n      for (let item of ast) {\n        this.traverse(item);\n      }\n      return;\n    }\n    assert(ast.location, 'expected manifest node to have `location`');\n    assert(ast.kind, 'expected manifest node to have `kind`');\n    let childrenVisited = false;\n    let visitChildren = () => {\n      if (childrenVisited) {\n        return;\n      }\n      childrenVisited = true;\n      for (let key of Object.keys(ast)) {\n        if (['location', 'kind', 'model'].includes(key)) {\n          continue;\n        }\n        this.traverse(ast[key]);\n      }\n    };\n    this.visit(ast, visitChildren);\n    visitChildren();\n  }\n\n  // Parents are visited before children, but an implementation can force\n  // children to be visted by calling `visitChildren()`.\n  visit(node, visitChildren) {\n  }\n}\n\nclass Manifest {\n  constructor({id}) {\n    this._recipes = [];\n    this._imports = [];\n    // TODO: These should be lists, possibly with a separate flattened map.\n    this._particles = {};\n    this._schemas = {};\n    this._stores = [];\n    this._shapes = [];\n    this._handleTags = new Map();\n    this._fileName = null;\n    this._nextLocalID = 0;\n    this._id = id;\n    this._storageProviderFactory = undefined;\n    this._scheduler = scheduler;\n    this._meta = new ManifestMeta();\n    this._resources = {};\n    this._handleManifestUrls = new Map();\n    this._warnings = [];\n  }\n  get id() {\n    if (this._meta.name)\n      return this._meta.name;\n    return this._id;\n  }\n  get storageProviderFactory() {\n    if (this._storageProviderFactory == undefined)\n      this._storageProviderFactory = new StorageProviderFactory(this.id);\n    return this._storageProviderFactory;\n  }\n  get recipes() {\n    return [...new Set(this._findAll(manifest => manifest._recipes))];\n  }\n\n  get activeRecipe() {\n    return this._recipes.find(recipe => recipe.annotation == 'active');\n  }\n\n  get particles() {\n    return [...new Set(this._findAll(manifest => Object.values(manifest._particles)))];\n  }\n  get imports() {\n    return this._imports;\n  }\n  get schemas() {\n    return this._schemas;\n  }\n  get fileName() {\n    return this._fileName;\n  }\n  get handles() {\n    return this._stores;\n  }\n  get scheduler() {\n    return this._scheduler;\n  }\n  get shapes() {\n    return this._shapes;\n  }\n  get meta() {\n    return this._meta;\n  }\n  get resources() {\n    return this._resources;\n  }\n  applyMeta(section) {\n    if (this._storageProviderFactory !== undefined)\n      assert(section.name == this._meta.name || section.name == undefined, `can't change manifest ID after storage is constructed`);\n    this._meta.apply(section);\n  }\n  // TODO: newParticle, Schema, etc.\n  // TODO: simplify() / isValid().\n  async newStore(type, name, id, tags) {\n    assert(!type.hasVariableReference, `handles can't have variable references`);\n    let handle = await this.storageProviderFactory.construct(id, type, `in-memory://${this.id}`);\n    assert(handle._version !== null);\n    handle.name = name;\n    this._handleManifestUrls.set(handle.id, this.fileName);\n    return this._addStore(handle, tags);\n  }\n\n  _addStore(handle, tags) {\n    this._stores.push(handle);\n    this._handleTags.set(handle, tags ? tags : []);\n    return handle;\n  }\n\n  newStorageStub(type, name, id, storageKey, tags) {\n    return this._addStore({type, id, name, storageKey}, tags);\n  }\n\n  _find(manifestFinder) {\n    let result = manifestFinder(this);\n    if (!result) {\n      for (let importedManifest of this._imports) {\n        result = importedManifest._find(manifestFinder);\n        if (result) {\n          break;\n        }\n      }\n    }\n    return result;\n  }\n  * _findAll(manifestFinder) {\n    yield* manifestFinder(this);\n    for (let importedManifest of this._imports) {\n      yield* importedManifest._findAll(manifestFinder);\n    }\n  }\n  findSchemaByName(name) {\n    return this._find(manifest => manifest._schemas[name]);\n  }\n  findTypeByName(name) {\n    let schema = this.findSchemaByName(name);\n    if (schema)\n      return Type.newEntity(schema);\n    let shape = this.findShapeByName(name);\n    if (shape)\n      return Type.newInterface(shape);\n    return null;\n  }\n  findParticleByName(name) {\n    return this._find(manifest => manifest._particles[name]);\n  }\n  findParticlesByVerb(verb) {\n    return [...this._findAll(manifest => Object.values(manifest._particles).filter(particle => particle.primaryVerb == verb))];\n  }\n  findStorageByName(name) {\n    return this._find(manifest => manifest._stores.find(store => store.name == name));\n  }\n  findStorageById(id) {\n    return this._find(manifest => manifest._stores.find(store => store.id == id));\n  }\n  findManifestUrlForHandleId(id) {\n    return this._find(manifest => manifest._handleManifestUrls.get(id));\n  }\n  findStorageByType(type, options={}) {\n    let tags = options.tags || [];\n    let subtype = options.subtype || false;\n    function typePredicate(store) {\n      let resolvedType = type.resolvedType();\n      if (!resolvedType.isResolved()) {\n        return type.isCollection == store.type.isCollection;\n      }\n\n      if (subtype) {\n        let [left, right] = Type.unwrapPair(store.type, resolvedType);\n        if (left.isEntity && right.isEntity) {\n          return left.entitySchema.isMoreSpecificThan(right.entitySchema);\n        }\n        return false;\n      }\n\n      return store.type.equals(type);\n    }\n    function tagPredicate(manifest, handle) {\n      return tags.filter(tag => !manifest._handleTags.get(handle).includes(tag)).length == 0;\n    }\n    return [...this._findAll(manifest => manifest._stores.filter(store => typePredicate(store) && tagPredicate(manifest, store)))];\n  }\n  findShapeByName(name) {\n    return this._find(manifest => manifest._shapes.find(shape => shape.name == name));\n  }\n  findRecipesByVerb(verb) {\n    return [...this._findAll(manifest => manifest._recipes.filter(recipe => recipe.name == verb))];\n  }\n  generateID() {\n    return `${this.id}:${this._nextLocalID++}`;\n  }\n  static async load(fileName, loader, options) {\n    options = options || {};\n    let {registry, id} = options;\n    registry = registry || {};\n    if (registry && registry[fileName]) {\n      return await registry[fileName];\n    }\n    registry[fileName] = (async () => {\n      let content = await loader.loadResource(fileName);\n      // TODO: When does this happen? The loader should probably throw an exception here.\n      assert(content !== undefined, `${fileName} unable to be loaded by Manifest parser`);\n      return await Manifest.parse(content, {\n        id,\n        fileName,\n        loader,\n        registry,\n        position: {line: 1, column: 0}\n      });\n    })();\n    return await registry[fileName];\n  }\n\n  static async parse(content, options) {\n    options = options || {};\n    let {id, fileName, position, loader, registry} = options;\n    registry = registry || {};\n    position = position || {line: 1, column: 0};\n    id = `manifest:${fileName}:`;\n\n    function dumpWarnings(manifest) {\n      for (let warning of manifest._warnings) {\n        // TODO: make a decision as to whether we should be logging these here, or if it should\n        //       be a responsibility of the caller.\n        // TODO: figure out how to have node print the correct message and stack trace\n        console.warn(processError(warning).message);\n      }\n    }\n\n    function processError(e, parseError) {\n      if (!((e instanceof ManifestError) || e.location)) {\n        return e;\n      }\n      let lines = content.split('\\n');\n      let line = lines[e.location.start.line - 1];\n      let span = 1;\n      if (e.location.end.line == e.location.start.line) {\n        span = e.location.end.column - e.location.start.column;\n      } else {\n        span = line.length - e.location.start.column;\n      }\n      span = Math.max(1, span);\n      let highlight = '';\n      for (let i = 0; i < e.location.start.column - 1; i++) {\n        highlight += ' ';\n      }\n      for (let i = 0; i < span; i++) {\n        highlight += '^';\n      }\n      let preamble;\n      if (parseError)\n        preamble = 'Parse error in';\n      else\n        preamble = 'Post-parse processing error caused by';\n      let message = `${preamble} '${fileName}' line ${e.location.start.line}.\n${e.message}\n  ${line}\n  ${highlight}`;\n      let err = new Error(message);\n      if (!parseError)\n        err.stack = e.stack;\n      return err;\n    }\n\n    let items = [];\n    try {\n      items = parser.parse(content);\n    } catch (e) {\n      throw processError(e, true);\n    }\n    let manifest = new Manifest({id});\n    manifest._fileName = fileName;\n\n    try {\n      // Loading of imported manifests is triggered in parallel to avoid a serial loading\n      // of resources over the network. \n      await Promise.all(items.filter(item => item.kind == 'import').map(async item => {\n        let path = loader.path(manifest.fileName);\n        let target = loader.join(path, item.path);\n        try {\n          manifest._imports.push(await Manifest.load(target, loader, {registry}));\n        } catch (e) {\n          manifest._warnings.push(e);\n          manifest._warnings.push(new ManifestError(item.location, `Error importing '${target}'`));\n        }\n      }));\n\n      let processItems = async (kind, f) => {\n        for (let item of items) {\n          if (item.kind == kind) {\n            Manifest._augmentAstWithTypes(manifest, item);\n            await f(item);\n          }\n        }\n      };\n\n      // processing meta sections should come first as this contains identifying\n      // information that might need to be used in other sections. For example,\n      // the meta.name, if present, becomes the manifest id which is relevant\n      // when constructing manifest handles.\n      await processItems('meta', meta => manifest.applyMeta(meta.items));\n      // similarly, resources may be referenced from other parts of the manifest.\n      await processItems('resource', item => this._processResource(manifest, item));\n      await processItems('schema', item => this._processSchema(manifest, item));\n      await processItems('shape', item => this._processShape(manifest, item));\n      await processItems('particle', item => this._processParticle(manifest, item, loader));\n      await processItems('store', item => this._processStore(manifest, item, loader));\n      await processItems('recipe', item => this._processRecipe(manifest, item, loader));\n    } catch (e) {\n      dumpWarnings(manifest);\n      throw processError(e, false);\n    }\n    dumpWarnings(manifest);\n    return manifest;\n  }\n  static _augmentAstWithTypes(manifest, items) {\n    let visitor = new class extends ManifestVisitor {\n      constructor() {\n        super();\n      }\n      visit(node, visitChildren) {\n        // TODO(dstockwell): set up a scope and merge type variables here, so that\n        //     errors relating to failed merges can reference the manifest source.\n        visitChildren();\n        switch (node.kind) {\n        case 'schema-inline': {\n          let schemas = [];\n          let aliases = [];\n          let names = [];\n          for (let name of node.names) {\n            let resolved = manifest.resolveReference(name);\n            if (resolved && resolved.schema && resolved.schema.isAlias) {\n              aliases.push(resolved.schema);\n            } else {\n              names.push(name);\n            }\n            if (resolved && resolved.schema) {\n              schemas.push(resolved.schema);\n            }\n          }\n          let fields = {};\n          for (let {name, type} of node.fields) {\n            for (let schema of schemas) {\n              if (!type) {\n                // If we don't have a type, try to infer one from the schema.\n                type = schema.fields[name];\n              } else {\n                // Validate that the specified or inferred type matches the schema.\n                let externalType = schema.fields[name];\n                if (externalType && !Schema.typesEqual(externalType, type)) {\n                  throw new ManifestError(\n                      node.location,\n                      `Type of '${name}' does not match schema (${type} vs ${externalType})`);\n                }\n              }\n            }\n            if (!type) {\n              throw new ManifestError(\n                  node.location,\n                  `Could not infer type of '${name}' field`);\n            }\n            fields[name] = type;\n          }\n          let schema = new Schema({\n            names,\n            fields,\n          });\n          for (let alias of aliases) {\n            schema = Schema.union(alias, schema);\n            if (!schema) {\n              throw new ManifestError(\n                  node.location,\n                  `Could not merge schema aliases`);\n            }\n          }\n          node.model = Type.newEntity(schema);\n          return;\n        }\n        case 'variable-type': {\n          let constraint = node.constraint && node.constraint.model;\n          node.model = Type.newVariable({name: node.name, constraint});\n          return;\n        }\n        case 'reference-type': {\n          let resolved = manifest.resolveReference(node.name);\n          if (!resolved) {\n            throw new ManifestError(\n                node.location,\n                `Could not resolve type reference '${node.name}'`);\n          }\n          if (resolved.schema) {\n            node.model = Type.newEntity(resolved.schema);\n          } else if (resolved.shape) {\n            node.model = Type.newInterface(resolved.shape);\n          } else {\n            throw new Error('Expected {shape} or {schema}');\n          }\n          return;\n        }\n        case 'list-type':\n          node.model = Type.newCollection(node.type.model);\n          return;\n        default:\n          return;\n        }\n      }\n    }();\n    visitor.traverse(items);\n  }\n  static _processSchema(manifest, schemaItem) {\n    let description = '';\n    let fields = {};\n    let names = [...schemaItem.names];\n    for (let item of schemaItem.items) {\n      switch (item.kind) {\n        case 'schema-field': {\n          let field = item;\n          if (fields[field.name]) {\n            throw new ManifestError(field.location, `Duplicate definition of field '${field.name}'`);\n          }\n          fields[field.name] = field.type;\n          break;\n        }\n        case 'schema-section': {\n          let section = item;\n          manifest._warnings.push(new ManifestError(section.location, `Schema sections are deprecated`));\n          for (let field of section.fields) {\n            if (fields[field.name]) {\n              throw new ManifestError(field.location, `Duplicate definition of field '${field.name}'`);\n            }\n            fields[field.name] = field.type;\n          }\n          break;\n        }\n        case 'description': {\n          if (description) {\n            throw new ManifestError(item.location, `Duplicate schema description`);\n          }\n          description = item;\n        }\n      }\n    }\n\n    for (let parent of schemaItem.parents) {\n      let result = manifest.findSchemaByName(parent);\n      if (!result) {\n        throw new ManifestError(\n            schemaItem.location,\n            `Could not find parent schema '${parent}'`);\n      }\n      for (let [name, type] of Object.entries(result.fields)) {\n        if (fields[name] && !Schema.typesEqual(fields[name], type)) {\n          throw new ManifestError(schemaItem.location,\n              `'${parent}' defines incompatible type for field '${name}'`);\n        }\n      }\n      Object.assign(fields, result.fields);\n      names.push(...result.names);\n    } \n    names = [names[0], ...names.filter(name => name != names[0])];\n    let name = schemaItem.alias || names[0];\n    if (!name) {\n      throw new ManifestError(\n          schemaItem.location,\n          `Schema defined without name or alias`);\n    }\n    let schema = new Schema({\n      names,\n      description: description,\n      fields,\n    });\n    if (schemaItem.alias) {\n      schema.isAlias = true;\n    }\n    manifest._schemas[name] = schema;\n  }\n  static _processResource(manifest, schemaItem) {\n    manifest._resources[schemaItem.name] = schemaItem.data;\n  }\n  static _processParticle(manifest, particleItem, loader) {\n    // TODO: we should be producing a new particleSpec, not mutating\n    //       particleItem directly.\n    // TODO: we should require both of these and update failing tests...\n    assert(particleItem.implFile == null || particleItem.args !== null, 'no valid body defined for this particle');\n    if (!particleItem.args) {\n      particleItem.args = [];\n    }\n    // TODO: loader should not be optional.\n    if (particleItem.implFile && loader) {\n      particleItem.implFile = loader.join(manifest.fileName, particleItem.implFile);\n    }\n\n    for (let arg of particleItem.args) {\n      arg.type = arg.type.model;\n    }\n\n    let particleSpec = new ParticleSpec(particleItem);\n    manifest._particles[particleItem.name] = particleSpec;\n  }\n  // TODO: Move this to a generic pass over the AST and merge with resolveReference.\n  static _processShape(manifest, shapeItem) {\n    for (let arg of shapeItem.interface.args) {\n      if (arg.type) {\n        // TODO: we should copy rather than mutate the AST like this\n        arg.type = arg.type.model;\n      }\n    }\n    let handles = shapeItem.interface.args;\n    let slots = [];\n    for (let slotItem of shapeItem.slots) {\n      slots.push({\n        direction: slotItem.direction,\n        name: slotItem.name,\n        isRequired: slotItem.isRequired,\n        isSet: slotItem.isSet\n      });\n    }\n    // TODO: move shape to recipe/ and add shape builder?\n    let shape = new Shape(shapeItem.name, handles, slots);\n    manifest._shapes.push(shape);\n  }\n  static async _processRecipe(manifest, recipeItem, loader) {\n    // TODO: annotate other things too\n    let recipe = manifest._newRecipe(recipeItem.name);\n    recipe.annotation = recipeItem.annotation;\n    let items = {\n      handles: recipeItem.items.filter(item => item.kind == 'handle'),\n      byHandle: new Map(),\n      particles: recipeItem.items.filter(item => item.kind == 'particle'),\n      byParticle: new Map(),\n      slots: recipeItem.items.filter(item => item.kind == 'slot'),\n      bySlot: new Map(),\n      byName: new Map(),\n      connections: recipeItem.items.filter(item => item.kind == 'connection'),\n      search: recipeItem.items.find(item => item.kind == 'search'),\n      description: recipeItem.items.find(item => item.kind == 'description')\n    };\n\n    for (let connection of items.connections) {\n      let fromParticle = manifest.findParticleByName(connection.from.particle);\n      let toParticle = manifest.findParticleByName(connection.to.particle);\n      if (!fromParticle) {\n        throw new ManifestError(connection.location, `could not find particle '${connection.from.particle}'`);\n      }\n      if (!toParticle) {\n        throw new ManifestError(connection.location, `could not find particle '${connection.to.particle}'`);\n      }\n      if (!fromParticle.connectionMap.has(connection.from.param)) {\n        throw new ManifestError(connection.location, `param '${connection.from.param} is not defined by '${connection.from.particle}'`);\n      }\n      if (!toParticle.connectionMap.has(connection.to.param)) {\n        throw new ManifestError(connection.location, `param '${connection.to.param} is not defined by '${connection.to.particle}'`);\n      }\n      recipe.newConnectionConstraint(fromParticle, connection.from.param,\n                                     toParticle, connection.to.param);\n    }\n\n    if (items.search) {\n      recipe.search = new Search(items.search.phrase, items.search.tokens);\n    }\n\n    for (let item of items.handles) {\n      let handle = recipe.newHandle();\n      let ref = item.ref || {tags: []};\n      if (ref.id) {\n        handle.id = ref.id;\n        let targetStore = manifest.findStorageById(handle.id);\n        if (targetStore)\n          handle.mapToStorage(targetStore);\n      } else if (ref.name) {\n        let targetStore = manifest.findStorageByName(ref.name);\n        // TODO: Error handling.\n        assert(targetStore, `Could not find handle ${ref.name}`);\n        handle.mapToStorage(targetStore);\n      }\n      handle.tags = ref.tags;\n      if (item.name) {\n        assert(!items.byName.has(item.name));\n        handle.localName = item.name;\n        items.byName.set(item.name, {item, handle});\n      }\n      handle.fate = item.fate;\n      items.byHandle.set(handle, item);\n    }\n\n    for (let item of items.slots) {\n      let slot = recipe.newSlot();\n      item.ref = item.ref || {};\n      if (item.ref.id) {\n        slot.id = item.ref.id;\n      }\n      if (item.ref.tags) {\n        slot.tags = item.ref.tags;\n      }\n      if (item.name) {\n        assert(!items.byName.has(item.name), `Duplicate slot local name ${item.name}`);\n        slot.localName = item.name;\n        items.byName.set(item.name, slot);\n      }\n      items.bySlot.set(slot, item);\n    }\n\n    // TODO: disambiguate.\n    for (let item of items.particles) {\n      let particle = recipe.newParticle(item.ref.name);\n      particle.tags = item.ref.tags;\n      particle.verbs = item.ref.verbs;\n      if (item.ref.name) {\n        let spec = manifest.findParticleByName(item.ref.name);\n        if (!spec) {\n          throw new ManifestError(item.location, `could not find particle ${item.ref.name}`);\n        }\n        particle.spec = spec.clone();\n      }\n      if (item.name) {\n        // TODO: errors.\n        assert(!items.byName.has(item.name));\n        particle.localName = item.name;\n        items.byName.set(item.name, {item, particle});\n      }\n      items.byParticle.set(particle, item);\n\n      for (let slotConnectionItem of item.slotConnections) {\n        let slotConn = particle.consumedSlotConnections[slotConnectionItem.param];\n        if (!slotConn) {\n          slotConn = particle.addSlotConnection(slotConnectionItem.param);\n        }\n        slotConn.tags = slotConnectionItem.tags || [];\n        slotConnectionItem.providedSlots.forEach(ps => {\n          let providedSlot = slotConn.providedSlots[ps.param];\n          if (providedSlot) {\n            items.byName.set(ps.name, providedSlot);\n            items.bySlot.set(providedSlot, ps);\n          } else\n            providedSlot = items.byName.get(ps.name);\n          if (!providedSlot) {\n            providedSlot = recipe.newSlot(ps.param);\n            providedSlot.localName = ps.name;\n            providedSlot.sourceConnection = slotConn;\n            assert(!items.byName.has(ps.name));\n            items.byName.set(ps.name, providedSlot);\n            items.bySlot.set(providedSlot, ps);\n          }\n          if (!slotConn.providedSlots[ps.param]) {\n            slotConn.providedSlots[ps.param] = providedSlot;\n          }\n        });\n      }\n    }\n\n    for (let [particle, item] of items.byParticle) {\n      for (let connectionItem of item.connections) {\n        let connection;\n        if (connectionItem.param == '*') {\n          connection = particle.addUnnamedConnection();\n        } else {\n          connection = particle.connections[connectionItem.param];\n          if (!connection) {\n            connection = particle.addConnectionName(connectionItem.param);\n          }\n          // TODO: else, merge tags? merge directions?\n        }\n        connection.tags = connectionItem.target ? connectionItem.target.tags : [];\n        let direction = {'->': 'out', '<-': 'in', '=': 'inout'}[connectionItem.dir];\n        if (connection.direction) {\n          if (connection.direction != direction && direction != 'inout' && !(connection.direction == 'host' && direction == 'in')) {\n            throw new ManifestError(\n                connectionItem.location,\n                `'${connectionItem.dir}' not compatible with '${connection.direction}' param of '${particle.name}'`);\n          }\n        } else {\n          if (connectionItem.param != '*' && particle.spec !== undefined) {\n            throw new ManifestError(\n                connectionItem.location,\n                `param '${connectionItem.param}' is not defined by '${particle.name}'`);\n          }\n          connection.direction = direction;\n        }\n\n        let targetHandle;\n        let targetParticle;\n\n        if (connectionItem.target && connectionItem.target.name) {\n          let entry = items.byName.get(connectionItem.target.name);\n          if (!entry) {\n            throw new ManifestError(\n                connectionItem.location,\n                `Could not find handle '${connectionItem.target.name}'`);\n          }\n          if (entry.item.kind == 'handle') {\n            targetHandle = entry.handle;\n          } else if (entry.item.kind == 'particle') {\n            targetParticle = entry.particle;\n          } else {\n            assert(false, `did not expect ${entry.item.kind}`);\n          }\n        }\n\n        // Handle implicit handle connections in the form `param = SomeParticle`\n        if (connectionItem.target && connectionItem.target.particle) {\n          let hostedParticle = manifest.findParticleByName(connectionItem.target.particle);\n          if (!hostedParticle) {\n            throw new ManifestError(\n                connectionItem.target.location,\n                `Could not find hosted particle '${connectionItem.target.particle}'`);\n          }\n          assert(!connection.type.hasVariableReference);\n          let type = TypeChecker.restrictType(connection.type, hostedParticle);\n          if (!type) {\n            throw new ManifestError(\n                connectionItem.target.location,\n                `Hosted particle '${hostedParticle.name}' does not match shape '${connection.name}'`);\n          }\n          let id = `${manifest.generateID()}:immediate${hostedParticle.name}`;\n          // TODO: Mark as immediate.\n          targetHandle = recipe.newHandle();\n          targetHandle.fate = 'copy';\n          let store = await manifest.newStore(type, null, id, []);\n          // TODO: loader should not be optional.\n          if (hostedParticle.implFile && loader) {\n            hostedParticle.implFile = loader.join(manifest.fileName, hostedParticle.implFile);\n          }\n          store.set(hostedParticle.clone().toLiteral());\n          targetHandle.mapToStorage(store);\n        }\n\n        if (targetParticle) {\n          let targetConnection;\n          if (connectionItem.target.param) {\n            targetConnection = targetParticle.connections[connectionItem.target.param];\n            if (!targetConnection) {\n              targetConnection = targetParticle.addConnectionName(connectionItem.target.param);\n              // TODO: direction?\n            }\n          } else {\n            targetConnection = targetParticle.addUnnamedConnection();\n            // TODO: direction?\n          }\n\n          targetHandle = targetConnection.handle;\n          if (!targetHandle) {\n            // TODO: tags?\n            targetHandle = recipe.newHandle();\n            targetConnection.connectToHandle(targetHandle);\n          }\n        }\n\n        if (targetHandle) {\n          connection.connectToHandle(targetHandle);\n        }\n      }\n\n      for (let slotConnectionItem of item.slotConnections) {\n        // particles that reference verbs should store slot connection information as constraints to be used \n        // during verb matching. However, if there's a spec then the slots need to be validated against it\n        // instead.\n        if (particle.spec !== undefined) {\n          // Validate consumed and provided slots names are according to spec.\n          if (!particle.spec.slots.has(slotConnectionItem.param)) {\n            throw new ManifestError(\n                slotConnectionItem.location,\n                `Consumed slot '${slotConnectionItem.param}' is not defined by '${particle.name}'`);\n          }\n          slotConnectionItem.providedSlots.forEach(ps => {\n            if (!particle.spec.slots.get(slotConnectionItem.param).getProvidedSlotSpec(ps.param)) {\n              throw new ManifestError(\n                  ps.location,\n                  `Provided slot '${ps.param}' is not defined by '${particle.name}'`);\n            }\n          });\n        }\n\n        let targetSlot = items.byName.get(slotConnectionItem.name);\n        if (targetSlot) {\n          assert(items.bySlot.has(targetSlot));\n          if (!targetSlot.name) {\n            targetSlot.name = slotConnectionItem.param;\n          }\n          assert(targetSlot == items.byName.get(slotConnectionItem.name),\n                 `Target slot ${targetSlot.name} doesn't match slot connection ${slotConnectionItem.param}`);\n        } else if (slotConnectionItem.name) {\n          targetSlot = recipe.newSlot(slotConnectionItem.param);\n          targetSlot.localName = slotConnectionItem.name;\n          if (slotConnectionItem.name)\n            items.byName.set(slotConnectionItem.name, targetSlot);\n          items.bySlot.set(targetSlot, slotConnectionItem);\n        }\n        if (targetSlot) {\n          particle.consumedSlotConnections[slotConnectionItem.param].connectToSlot(targetSlot);\n        }\n      }\n    }\n\n    if (items.description && items.description.description) {\n      recipe.description = items.description.description;\n    }\n  }\n  resolveReference(name) {\n    let schema = this.findSchemaByName(name);\n    if (schema) {\n      return {schema};\n    }\n    let shape = this.findShapeByName(name);\n    if (shape) {\n      return {shape};\n    }\n    return null;\n  }\n  static async _processStore(manifest, item, loader) {\n    let name = item.name;\n    let id = item.id;\n    let type = item.type.model;\n    if (id == null) {\n      id = `${manifest._id}store${manifest._stores.length}`;\n    }\n    let tags = item.tags;\n    if (tags == null)\n      tags = [];\n\n    if (item.origin == 'storage') {\n      manifest.newStorageStub(type, name, id, item.source, tags);\n      return;\n    }\n\n    let store = await manifest.newStore(type, name, id, tags);\n    store.source = item.source;\n    store.description = item.description;\n    let json;\n    let source;\n    if (item.origin == 'file') {\n      source = loader.join(manifest.fileName, item.source);\n      // TODO: json5?\n      json = await loader.loadResource(source);\n    } else if (item.origin == 'resource') {\n      source = item.source;\n      json = manifest.resources[source];\n      if (json == undefined)\n        throw new Error(`Resource '${source}' referenced by store '${id}' is not defined in this manifest`);\n    }\n    let entities;\n    try {\n      entities = JSON.parse(json);\n    } catch (e) {\n      throw new ManifestError(item.location, `Error parsing JSON from '${source}' (${e.message})'`);\n    }\n\n    let unitType;\n    if (!type.isCollection) {\n      if (entities.length == 0)\n        return;\n      entities = entities.slice(entities.length - 1);\n      unitType = type;\n    } else {\n      unitType = type.primitiveType();\n    }\n\n    if (unitType.isEntity) {\n      entities = entities.map(entity => {\n        if (entity == null)\n          return null;\n        let id = entity.$id || manifest.generateID();\n        delete entity.$id;\n        return {id, rawData: entity};\n      });\n    }\n\n    let version = item.version || 0;\n\n    if (type.isCollection) {\n      store._fromListWithVersion(entities, version);\n    } else {\n      store._setWithVersion(entities[0], version);\n    }\n  }\n  _newRecipe(name) {\n    let recipe = new Recipe(name);\n    this._recipes.push(recipe);\n    return recipe;\n  }\n\n  toString(options) {\n    // TODO: sort?\n    options = options || {};\n    let results = [];\n\n    this._imports.forEach(i => {\n      if (options.recursive) {\n        results.push(`// import '${i.fileName}'`);\n        let importStr = i.toString(options);\n        results.push(`${i.toString(options)}`);\n      } else {\n        results.push(`import '${i.fileName}'`);\n      }\n    });\n\n    Object.values(this._schemas).forEach(s => {\n      results.push(s.toManifestString());\n    });\n\n    Object.values(this._particles).forEach(p => {\n      results.push(p.toString());\n    });\n\n    this._recipes.forEach(r => {\n      results.push(r.toString(options));\n    });\n\n    let handles = [...this.handles].sort(util.compareComparables);\n    handles.forEach(h => {\n      results.push(h.toString(this._handleTags.get(h)));\n    });\n\n    return results.join('\\n');\n  }\n}\n\nexport default Manifest;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/manifest.js\n// module id = 11\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport DevtoolsChannel from '../../platform/devtools-channel-web.js';\n\nlet instance = null;\nexport default {\n  get: () => {\n    if (!instance) instance = new DevtoolsChannel();\n    return instance;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/debug/devtools-channel-provider.js\n// module id = 12\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport Type from './type.js';\nimport ParticleSpec from './particle-spec.js';\n\nexport default class Description {\n  constructor(arc) {\n    this._arc = arc;\n    this._relevance = null;\n  }\n\n  get arc() { return this._arc; }\n  get relevance() { return this._relevance; }\n  set relevance(relevance) { this._relevance = relevance; }\n\n  async getArcDescription(formatterClass) {\n    let desc = await new (formatterClass || DescriptionFormatter)(this).getDescription(this._arc.activeRecipe);\n    if (desc) {\n      return desc;\n    }\n  }\n\n  async getRecipeSuggestion(formatterClass) {\n    let formatter = await new (formatterClass || DescriptionFormatter)(this);\n    let desc = await formatter.getDescription(this._arc.recipes[this._arc.recipes.length - 1]);\n    if (desc) {\n      return desc;\n    }\n\n    return formatter.descriptionFromString(this._arc.activeRecipe.name || Description.defaultDescription);\n  }\n\n  async getHandleDescription(recipeHandle) {\n    assert(recipeHandle.connections.length > 0, 'handle has no connections?');\n\n    let formatter = new DescriptionFormatter(this);\n    formatter.excludeValues = true;\n    return await formatter.getHandleDescription(recipeHandle);\n  }\n}\n\nDescription.defaultDescription = 'i\\'m feeling lucky';\n\nexport class DescriptionFormatter {\n  constructor(description) {\n    this._description = description;\n    this._arc = description._arc;\n    this._particleDescriptions = [];\n\n    this.seenHandles = new Set();\n    this.seenParticles = new Set();\n    this.excludeValues = false;\n  }\n\n  async getDescription(recipe) {\n    await this._updateDescriptionHandles(this._description);\n\n    if (recipe.pattern) {\n      let recipeDesc = await this.patternToSuggestion(recipe.pattern);\n      if (recipeDesc) {\n        return this._combineSelectedDescriptions([{pattern: recipeDesc}]);\n      }\n    }\n\n    // Choose particles, sort them by rank and generate suggestions.\n    let particlesSet = new Set(recipe.particles);\n    let selectedDescriptions = this._particleDescriptions\n      .filter(desc => (particlesSet.has(desc._particle) && this._isSelectedDescription(desc)));\n    // Prefer particles that render UI, if any.\n    if (selectedDescriptions.find(desc => (desc._particle.spec.slots.size > 0))) {\n      selectedDescriptions = selectedDescriptions.filter(desc => (desc._particle.spec.slots.size > 0));\n    }\n    selectedDescriptions = selectedDescriptions.sort(DescriptionFormatter.sort);\n\n    if (selectedDescriptions.length > 0) {\n      return this._combineSelectedDescriptions(selectedDescriptions);\n    }\n  }\n\n  descriptionFromString(str) {\n    return this._capitalizeAndPunctuate(str);\n  }\n\n  _isSelectedDescription(desc) {\n    return !!desc.pattern;\n  }\n\n  async getHandleDescription(recipeHandle) {\n    await this._updateDescriptionHandles(this._description);\n\n    let handleConnection = this._selectHandleConnection(recipeHandle) || recipeHandle.connections[0];\n    let handle = this._arc.findHandleById(recipeHandle.id);\n    return this._formatDescription(handleConnection, handle);\n  }\n\n  async _updateDescriptionHandles(description) {\n    this._particleDescriptions = [];\n\n    // Combine all particles from direct and inner arcs.\n    let innerParticlesByName = {};\n    description._arc.recipes.forEach(recipe => {\n      let innerArcs = [...recipe.innerArcs.values()];\n      innerArcs.forEach(innerArc => {\n        innerArc.recipes.forEach(innerRecipe => {\n          innerRecipe.particles.forEach(innerParticle => {\n            if (!innerParticlesByName[innerParticle.name]) {\n              innerParticlesByName[innerParticle.name] = innerParticle;\n            }\n          });\n        });\n      });\n    });\n    let allParticles = description.arc.activeRecipe.particles.concat(Object.values(innerParticlesByName));\n\n    await Promise.all(allParticles.map(async particle => {\n      this._particleDescriptions.push(await this._createParticleDescription(particle, description.relevance));\n    }));\n  }\n\n  async _createParticleDescription(particle, relevance) {\n    let pDesc = {\n      _particle: particle,\n      _connections: {}\n    };\n    if (relevance) {\n      pDesc._rank = relevance.calcParticleRelevance(particle);\n    }\n\n    let descByName = await this._getPatternByNameFromDescriptionHandle(particle) || {};\n    pDesc = Object.assign(pDesc, this._populateParticleDescription(particle, descByName));\n    Object.values(particle.connections).forEach(handleConn => {\n      let specConn = particle.spec.connectionMap.get(handleConn.name);\n      let pattern = descByName[handleConn.name] || specConn.pattern;\n      if (pattern) {\n        let handleDescription = {pattern: pattern, _handleConn: handleConn, _handle: this._arc.findHandleById(handleConn.handle.id)};\n        pDesc._connections[handleConn.name] = handleDescription;\n      }\n    });\n    return pDesc;\n  }\n\n  async _getPatternByNameFromDescriptionHandle(particle) {\n    let descriptionConn = particle.connections['descriptions'];\n    if (descriptionConn && descriptionConn.handle && descriptionConn.handle.id) {\n      let descHandle = this._arc.findHandleById(descriptionConn.handle.id);\n      if (descHandle) {\n        let descList = await descHandle.toList();\n        let descByName = {};\n        descList.forEach(d => descByName[d.rawData.key] = d.rawData.value);\n        return descByName;\n      }\n    }\n  }\n\n  _populateParticleDescription(particle, descriptionByName) {\n    let pattern = descriptionByName['_pattern_'] || particle.spec.pattern;\n    return pattern ? {pattern} : {};\n  }\n\n  async _combineSelectedDescriptions(selectedDescriptions) {\n    let suggestions = [];\n    await Promise.all(selectedDescriptions.map(async particle => {\n      if (!this.seenParticles.has(particle._particle)) {\n        suggestions.push(await this.patternToSuggestion(particle.pattern, particle));\n      }\n    }));\n    let jointDescription = this._joinDescriptions(suggestions);\n    if (jointDescription) {\n      return this._capitalizeAndPunctuate(jointDescription);\n    }\n  }\n\n  _joinDescriptions(strings) {\n    let nonEmptyStrings = strings.filter(str => str);\n    let count = nonEmptyStrings.length;\n    if (count > 0) {\n      // Combine descriptions into a sentence:\n      // \"A.\"\n      // \"A and b.\"\n      // \"A, b, ..., and z.\" (Oxford comma ftw)\n      let delim = ['', '', ' and ', ', and '][Math.min(3, count)];\n      const lastString = nonEmptyStrings.pop();\n      return `${nonEmptyStrings.join(', ')}${delim}${lastString}`;\n    }\n  }\n\n  _joinTokens(tokens) {\n    return tokens.join('');\n  }\n\n  _capitalizeAndPunctuate(sentence) {\n    assert(sentence);\n    // \"Capitalize, punctuate.\" (if the sentence doesn't end with a punctuation character).\n    let last = sentence.length - 1;\n    return `${sentence[0].toUpperCase()}${sentence.slice(1, last)}${sentence[last]}${sentence[last].match(/[a-z0-9\\(\\)'>\\]]/i) ? '.' : ''}`;\n  }\n\n  async patternToSuggestion(pattern, particleDescription) {\n    let tokens = this._initTokens(pattern, particleDescription);\n    let tokenPromises = tokens.map(async token => await this.tokenToString(token));\n    let tokenResults = await Promise.all(tokenPromises);\n    if (tokenResults.filter(res => res == undefined).length == 0) {\n      return this._joinTokens(tokenResults);\n    }\n  }\n\n  _initTokens(pattern, particleDescription) {\n    pattern = pattern.replace(/</g, '&lt;');\n    let results = [];\n    while (pattern.length > 0) {\n      let tokens = pattern.match(/\\${[a-zA-Z0-9\\.]+}(?:\\.[_a-zA-Z]+)?/g);\n      let firstToken;\n      let tokenIndex;\n      if (tokens) {\n        firstToken = tokens[0];\n        tokenIndex = pattern.indexOf(firstToken);\n      } else {\n        firstToken = '';\n        tokenIndex = pattern.length;\n      }\n      assert(tokenIndex >= 0);\n      let nextToken = pattern.substring(0, tokenIndex);\n      if (nextToken.length > 0)\n        results.push({text: nextToken});\n      if (firstToken.length > 0) {\n        results.push(this._initHandleToken(firstToken, particleDescription));\n      }\n      pattern = pattern.substring(tokenIndex + firstToken.length);\n    }\n    return results;\n  }\n\n  _initHandleToken(pattern, particleDescription) {\n    let valueTokens = pattern.match(/\\${([a-zA-Z0-9\\.]+)}(?:\\.([_a-zA-Z]+))?/);\n    let handleNames = valueTokens[1].split('.');\n    let extra = valueTokens.length == 3 ? valueTokens[2] : undefined;\n    let valueToken;\n\n    // Fetch the particle description by name from the value token - if it wasn't passed, this is a recipe description.\n    if (!particleDescription) {\n      assert(handleNames.length > 1, `'${valueTokens[1]}' must contain dot-separated particle and handle connection name.`);\n      let particleName = handleNames.shift();\n      assert(particleName[0] === particleName[0].toUpperCase(), `Expected particle name, got '${particleName}' instead.`);\n      let particleDescriptions = this._particleDescriptions.filter(desc => desc._particle.name == particleName);\n      assert(particleDescriptions.length > 0, `Cannot find particles with name ${particleName}.`);\n      if (particleDescriptions.length > 1) {\n        console.warn(`Multiple particles with name ${particleName}.`);\n      }\n      particleDescription = particleDescriptions[0];\n    }\n    let particle = particleDescription._particle;\n\n    let handleConn = particle.connections[handleNames[0]];\n    if (handleConn) { // handle connection\n      assert(handleConn.handle && handleConn.handle.id, 'Missing id???');\n      return {\n        fullName: valueTokens[0],\n        handleName: handleConn.name,\n        properties: handleNames.splice(1),\n        extra,\n        _handleConn: handleConn,\n        _handle: this._arc.findHandleById(handleConn.handle.id)};\n    }\n\n    // slot connection\n    assert(handleNames.length == 2, 'slot connections tokens must have 2 names');\n    let providedSlotConn = particle.consumedSlotConnections[handleNames[0]].providedSlots[handleNames[1]];\n    assert(providedSlotConn, `Could not find handle ${handleNames.join('.')}`);\n    return {fullName: valueTokens[0], consumeSlotName: handleNames[0], provideSlotName: handleNames[1], extra, _providedSlotConn: providedSlotConn};\n  }\n\n  async tokenToString(token) {\n    if (token.text) {\n      return token.text;\n    }\n    if (token.handleName) {\n      return this._handleTokenToString(token);\n    } else if (token.consumeSlotName && token.provideSlotName) {\n      return this._slotTokenToString(token);\n    }\n    assert(false, 'no handle or slot name');\n  }\n\n  async _handleTokenToString(token) {\n    switch (token.extra) {\n      case '_type_':\n        return token._handleConn.type.toPrettyString().toLowerCase();\n      case '_values_':\n        return this._formatHandleValue(token.handleName, token._handle);\n      case '_name_':\n        return this._formatDescription(token._handleConn, token._handle);\n      default: {\n        assert(!token.extra, `Unrecognized extra ${token.extra}`);\n\n        // Transformation's hosted particle.\n        if (token._handleConn.type.isInterface) {\n          let particleSpec = ParticleSpec.fromLiteral(await token._handle.get());\n          // TODO: call this.patternToSuggestion(...) to resolved expressions in the pattern template.\n          return particleSpec.pattern;\n        }\n\n        // singleton handle property.\n        if (token.properties && token.properties.length > 0) {\n          return this._propertyTokenToString(token.handleName, token._handle, token.properties);\n        }\n\n        // full handle description\n        let description = (await this._formatDescriptionPattern(token._handleConn)) ||\n                          this._formatHandleDescription(token._handleConn, token._handle);\n        let handleValue = await this._formatHandleValue(token.handleName, token._handle);\n        if (!description) {\n          // For singleton handle, if there is no real description (the type was used), use the plain value for description.\n          if (handleValue && !token._handle.type.isSetView && !this.excludeValues) {\n            return handleValue;\n          }\n        }\n\n        description = description || this._formatHandleType(token._handleConn);\n        if (handleValue && !this.excludeValues && !this.seenHandles.has(token._handle.id)) {\n          this.seenHandles.add(token._handle.id);\n          return this._combineDescriptionAndValue(token, description, handleValue);\n        }\n        return description;\n      }\n    }\n  }\n\n  _combineDescriptionAndValue(token, description, handleValue) {\n    return `${description} (${handleValue})`;\n  }\n\n  async _slotTokenToString(token) {\n    switch (token.extra) {\n      case '_empty_':\n        // TODO: also return false, if the consuming particles generate an empty description.\n        return token._providedSlotConn.consumeConnections.length == 0;\n      default:\n        assert(!token.extra, `Unrecognized slot extra ${token.extra}`);\n    }\n\n    let results = (await Promise.all(token._providedSlotConn.consumeConnections.map(async consumeConn => {\n      let particle = consumeConn.particle;\n      let particleDescription = this._particleDescriptions.find(desc => desc._particle == particle);\n      this.seenParticles.add(particle);\n      return this.patternToSuggestion(particle.spec.pattern, particleDescription);\n    })));\n\n    return this._joinDescriptions(results);\n  }\n\n  async _propertyTokenToString(handleName, handle, properties) {\n    assert(!handle.type.isSetView, `Cannot return property ${properties.join(',')} for set-view`);\n    // Use singleton value's property (eg. \"09/15\" for person's birthday)\n    let handleVar = await handle.get();\n    if (handleVar) {\n      let value = handleVar.rawData;\n      properties.forEach(p => {\n        if (value) {\n          value = value[p];\n        }\n      });\n      if (value) {\n        return this._formatEntityProperty(handleName, properties, value);\n      }\n    }\n  }\n\n  _formatEntityProperty(handleName, properties, value) {\n    return value;\n  }\n\n  async _formatHandleValue(handleName, handle) {\n    if (!handle) {\n      return;\n    }\n    if (handle.type.isSetView) {\n      let handleList = await handle.toList();\n      if (handleList && handleList.length > 0) {\n        return this._formatSetHandle(handleName, handleList);\n      }\n    } else {\n      let handleVar = await handle.get();\n      if (handleVar) {\n        return this._formatSingleton(handleName, handleVar);\n      }\n    }\n  }\n\n  _formatSetHandle(handleName, handleList) {\n    if (handleList[0].rawData.name) {\n      if (handleList.length > 2) {\n        return `${handleList[0].rawData.name} plus ${handleList.length-1} other items`;\n      }\n      return handleList.map(v => v.rawData.name).join(', ');\n    } else {\n      return `${handleList.length} items`;\n    }\n  }\n\n  _formatSingleton(handleName, handleVar) {\n    if (handleVar.rawData.name) {\n      return handleVar.rawData.name;\n    }\n  }\n\n  async _formatDescription(handleConnection, handle) {\n    return (await this._formatDescriptionPattern(handleConnection)) ||\n           this._formatHandleDescription(handleConnection, handle) ||\n           this._formatHandleType(handleConnection);\n  }\n\n  async _formatDescriptionPattern(handleConnection) {\n    let chosenConnection = handleConnection;\n\n    // For \"out\" connection, use its own description\n    // For \"in\" connection, use description of the highest ranked out connection with description.\n    if (!chosenConnection.spec.isOutput) {\n      let otherConnection = this._selectHandleConnection(handleConnection.handle);\n      if (otherConnection) {\n        chosenConnection = otherConnection;\n      }\n    }\n\n    let chosenParticleDescription = this._particleDescriptions.find(desc => desc._particle == chosenConnection.particle);\n    let handleDescription = chosenParticleDescription ? chosenParticleDescription._connections[chosenConnection.name] : null;\n    // Add description to result array.\n    if (handleDescription) {\n      // Add the connection spec's description pattern.\n      return await this.patternToSuggestion(handleDescription.pattern, chosenParticleDescription);\n    }\n  }\n  _formatHandleDescription(handleConn, handle) {\n    if (handle) {\n      let handleDescription = this._arc.getHandleDescription(handle);\n      let handleType = this._formatHandleType(handleConn);\n      // Use the handle description available in the arc (if it is different than type name).\n      if (!!handleDescription && handleDescription != handleType) {\n        return handleDescription;\n      }\n    }\n  }\n  _formatHandleType(handleConnection) {\n    return handleConnection.type.toPrettyString().toLowerCase();\n  }\n\n  _selectHandleConnection(recipeHandle) {\n    let possibleConnections = recipeHandle.connections.filter(connection => {\n      // Choose connections with patterns (manifest-based or dynamic).\n      let connectionSpec = connection.spec;\n      let particleDescription = this._particleDescriptions.find(desc => desc._particle == connection.particle);\n      return !!connectionSpec.pattern || !!particleDescription._connections[connection.name];\n    });\n\n    possibleConnections.sort((c1, c2) => {\n      let isOutput1 = c1.spec.isOutput;\n      let isOutput2 = c2.spec.isOutput;\n      if (isOutput1 != isOutput2) {\n        // Prefer output connections\n        return isOutput1 ? -1 : 1;\n      }\n\n      let d1 = this._particleDescriptions.find(desc => desc._particle == c1.particle);\n      let d2 = this._particleDescriptions.find(desc => desc._particle == c2.particle);\n      // Sort by particle's rank in descending order.\n      return d2._rank - d1._rank;\n    });\n\n    if (possibleConnections.length > 0) {\n      return possibleConnections[0];\n    }\n  }\n\n  static sort(p1, p2) {\n    let isRoot = (slotSpec) => slotSpec.name == 'root' || slotSpec.tags.includes('#root');\n    // Root slot comes first.\n    let hasRoot1 = Boolean([...p1._particle.spec.slots.values()].find(slotSpec => isRoot(slotSpec)));\n    let hasRoot2 = Boolean([...p2._particle.spec.slots.values()].find(slotSpec => isRoot(slotSpec)));\n    if (hasRoot1 != hasRoot2) {\n      return hasRoot1 ? -1 : 1;\n    }\n\n    // Sort by rank\n    if (p1._rank != p2._rank) {\n      return p2._rank - p1._rank;\n    }\n\n    // Sort by number of singleton slots.\n    let p1Slots = 0, p2Slots = 0;\n    p1._particle.spec.slots.forEach((slotSpec) => { if (!slotSpec.isSet) ++p1Slots; });\n    p2._particle.spec.slots.forEach((slotSpec) => { if (!slotSpec.isSet) ++p2Slots; });\n    return p2Slots - p1Slots;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/description.js\n// module id = 13\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport Symbols from './symbols.js';\nimport Type from './type.js';\n\nclass Entity {\n  constructor(userIDComponent) {\n    assert(!userIDComponent || userIDComponent.indexOf(':') == -1, 'user IDs must not contain the \\':\\' character');\n    this[Symbols.identifier] = undefined;\n    this._userIDComponent = userIDComponent;\n  }\n  get data() {\n    return undefined;\n  }\n\n  getUserID() {\n    return this._userIDComponent;\n  }\n\n  isIdentified() {\n    return this[Symbols.identifier] !== undefined;\n  }\n  // TODO: entity should not be exposing its IDs.\n  get id() {\n    assert(!!this.isIdentified());\n    return this[Symbols.identifier];\n  }\n  identify(identifier) {\n    assert(!this.isIdentified());\n    this[Symbols.identifier] = identifier;\n    let components = identifier.split(':');\n    if (components[components.length - 2] == 'uid')\n      this._userIDComponent = components[components.length - 1];\n  }\n  createIdentity(components) {\n    assert(!this.isIdentified());\n    let id;\n    if (this._userIDComponent)\n      id = `${components.base}:uid:${this._userIDComponent}`;\n    else\n      id = `${components.base}:${components.component()}`;\n    this[Symbols.identifier] = id;\n  }\n  toLiteral() {\n    return this.rawData;\n  }\n\n  static get type() {\n    // TODO: should the entity's key just be its type?\n    // Should it just be called type in that case?\n    return Type.newEntity(this.key.schema);\n  }\n}\n\nexport default Entity;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/entity.js\n// module id = 14\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nexport default {identifier: Symbol('id')};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/symbols.js\n// module id = 15\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport tracing from '../tracelib/trace.js';\nimport assert from '../platform/assert-web.js';\n\nclass Scheduler {\n  constructor() {\n    this.frameQueue = [];\n    this.targetMap = new Map();\n    this._finishNotifiers = [];\n    this._idle = Promise.resolve();\n    this._idleResolver = null;\n    this._idleCallback = null;\n  }\n\n  clone() {\n    return new Scheduler();\n  }\n\n  set idleCallback(idleCallback) { this._idleCallback = idleCallback; }\n\n  enqueue(handle, eventRecords) {\n    let trace = tracing.flow({cat: 'handle', name: 'ViewBase::_fire flow'}).start();\n    if (this.frameQueue.length == 0 && eventRecords.length > 0)\n      this._asyncProcess();\n    if (!this._idleResolver) {\n      this._idle = new Promise((resolve, reject) => this._idleResolver = resolve);\n    }\n    for (let record of eventRecords) {\n      let frame = this.targetMap.get(record.target);\n      if (frame == undefined) {\n        frame = {target: record.target, handles: new Map(), traces: []};\n        this.frameQueue.push(frame);\n        this.targetMap.set(record.target, frame);\n      }\n      frame.traces.push(trace);\n      let handleEvents = frame.handles.get(handle);\n      if (handleEvents == undefined) {\n        handleEvents = new Map();\n        frame.handles.set(handle, handleEvents);\n      }\n      let kindEvents = handleEvents.get(record.kind);\n      if (kindEvents == undefined) {\n        kindEvents = [];\n        handleEvents.set(record.kind, kindEvents);\n      }\n      kindEvents.push(record);\n    }\n  }\n\n  get busy() {\n    return this.frameQueue.length > 0;\n  }\n\n  get idle() {\n    return this._idle;\n  }\n\n  _asyncProcess() {\n    Promise.resolve().then(() => {\n      assert(this.frameQueue.length > 0, '_asyncProcess should not be invoked with 0 length queue');\n      let frame = this.frameQueue.shift();\n      this.targetMap.delete(frame.target);\n      if (this.frameQueue.length > 0)\n        this._asyncProcess();\n      this._applyFrame(frame);\n      if (this.frameQueue.length == 0) {\n        this._idleResolver();\n        this._idleResolver = null;\n        if (this._idleCallback) {\n          this._idleCallback();\n        }\n      }\n    });\n  }\n\n  _applyFrame(frame) {\n    let trace = tracing.start({cat: 'scheduler', name: 'Scheduler::_applyFrame', args: {target: frame.target ? frame.target.constructor.name : 'NULL TARGET'}});\n\n    let totalRecords = 0;\n    for (let [handle, kinds] of frame.handles.entries()) {\n      for (let [kind, records] of kinds.entries()) {\n        let record = records[records.length - 1];\n        record.callback(record.details);\n      }\n    }\n\n    frame.traces.forEach(trace => trace.end());\n\n    trace.end();\n  }\n}\n\n// TODO: Scheduler needs to be per arc, once multi-arc support is implemented.\nexport default new Scheduler();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/scheduler.js\n// module id = 16\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport {\n  Particle,\n  ViewChanges\n} from './particle.js';\n\nimport XenStateMixin from '../shell/components/xen/xen-state.js';\n\n/** @class DomParticle\n * Particle that does stuff with DOM.\n */\nclass DomParticle extends XenStateMixin(Particle) {\n  constructor() {\n    super();\n    this.state = this._state;\n    this.props = this._props;\n  }\n  /** @method get template()\n   * Override to return a String defining primary markup.\n   */\n  get template() {\n    return '';\n  }\n  /** @method getTemplate(slotName)\n   * Override to return a String defining primary markup for the given slot name.\n   */\n  getTemplate(slotName) {\n    // TODO: only supports a single template for now. add multiple templates support.\n    return this.template;\n  }\n  /** @method willReceiveProps(props, state, oldProps, oldState)\n   * Override if necessary, to do things when props change.\n   */\n  willReceiveProps() {\n  }\n  /** @method update(props, state, oldProps, oldState)\n   * Override if necessary, to modify superclass config.\n   */\n  update() {\n  }\n  /** @method shouldRender(props, state, oldProps, oldState)\n   * Override to return false if the Particle won't use\n   * it's slot.\n   */\n  shouldRender() {\n    return true;\n  }\n  /** @method render(props, state, oldProps, oldState)\n   * Override to return a dictionary to map into the template.\n   */\n  render() {\n    return {};\n  }\n  setState(state) {\n    return this._setState(state);\n  }\n  // TODO(sjmiles): deprecated, just use setState\n  setIfDirty(state) {\n    console.warn('DomParticle: `setIfDirty` is deprecated, please use `setState` instead');\n    return this._setState(state);\n  }\n  _willReceiveProps(...args) {\n    this.willReceiveProps(...args);\n  }\n  _update(...args) {\n    this.update(...args);\n    if (this.shouldRender(...args)) { // TODO: should shouldRender be slot specific?\n      this.relevance = 1; // TODO: improve relevance signal.\n    }\n    this.config.slotNames.forEach(s => this.renderSlot(s, ['model']));\n  }\n  /** @method get config()\n   * Override if necessary, to modify superclass config.\n   */\n  get config() {\n    // TODO(sjmiles): getter that does work is a bad idea, this is temporary\n    return {\n      handles: this.spec.inputs.map(i => i.name),\n      // TODO(mmandlis): this.spec needs to be replaced with a particle-spec loaded from\n      // .manifest files, instead of .ptcl ones.\n      slotNames: [...this.spec.slots.values()].map(s => s.name)\n    };\n  }\n  _info() {\n    return `---------- DomParticle::[${this.spec.name}]`;\n  }\n  async setViews(handles) {\n    this.handles = handles;\n    this._views = handles;\n    let config = this.config;\n    this.when([new ViewChanges(handles, config.handles, 'change')], async () => {\n      await this._handlesToProps(handles, config);\n    });\n    // make sure we invalidate once, even if there are no incoming handles\n    this._invalidate();\n  }\n  async _handlesToProps(handles, config) {\n    // acquire (async) list data from handles\n    let data = await Promise.all(\n      config.handles\n      .map(name => handles.get(name))\n      .map(handle => handle.toList ? handle.toList() : handle.get())\n    );\n    // convert handle data (array) into props (dictionary)\n    let props = Object.create(null);\n    config.handles.forEach((name, i) => {\n      props[name] = data[i];\n    });\n    this._setProps(props);\n  }\n  renderSlot(slotName, contentTypes) {\n    const stateArgs = this._getStateArgs();\n    let slot = this.getSlot(slotName);\n    if (!slot) {\n      return; // didn't receive StartRender.\n    }\n\n    // Set this to support multiple slots consumed by a particle, without needing\n    // to pass slotName to particle's render method, where it useless in most cases.\n    this.currentSlotName = slotName;\n\n    contentTypes.forEach(ct => slot._requestedContentTypes.add(ct));\n    // TODO(sjmiles): redundant, same answer for every slot\n    if (this.shouldRender(...stateArgs)) {\n      let content = {};\n      if (slot._requestedContentTypes.has('template')) {\n        content.template = this.getTemplate(slot.slotName);\n      }\n      if (slot._requestedContentTypes.has('model')) {\n        content.model = this.render(...stateArgs);\n      }\n      slot.render(content);\n    } else if (slot.isRendered) {\n      // Send empty object, to clear rendered slot contents.\n      slot.render({});\n    }\n\n    this.currentSlotName = undefined;\n  }\n  fireEvent(slotName, {handler, data}) {\n    if (this[handler]) {\n      // TODO(sjmiles): remove `this._state` parameter\n      this[handler]({data}, this._state);\n    }\n  }\n  setParticleDescription(pattern) {\n    if (typeof pattern === 'string') {\n      return super.setParticleDescription(pattern);\n    }\n    assert(!!pattern.template && !!pattern.model, 'Description pattern must either be string or have template and model');\n    super.setDescriptionPattern('_template_', pattern.template);\n    super.setDescriptionPattern('_model_', JSON.stringify(pattern.model));\n  }\n  updateVariable(handleName, record) {\n    const handle = this.handles.get(handleName);\n    const newRecord = new (handle.entityClass)(record);\n    handle.set(newRecord);\n    return newRecord;\n  }\n  updateSet(handleName, record) {\n    // Set the record into the right place in the set. If we find it\n    // already present replace it, otherwise, add it.\n    // TODO(dstockwell): Replace this with happy entity mutation approach.\n    const handle = this.handles.get(handleName);\n    const records = this._props[handleName];\n    const target = records.find(r => r.id === record.id);\n    if (target) {\n      handle.remove(target);\n    }\n    handle.store(record);\n  }\n}\n\nexport default DomParticle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/dom-particle.js\n// module id = 17\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport fs from '../platform/fs-web.js';\nimport vm from '../platform/vm-web.js';\nimport fetch from './fetch-web.js';\n\nimport assert from '../platform/assert-web.js';\nimport particle from './particle.js';\nimport DomParticle from './dom-particle.js';\nimport MultiplexerDomParticle from './multiplexer-dom-particle.js';\nimport TransformationDomParticle from './transformation-dom-particle.js';\nimport JsonldToManifest from './converters/jsonldToManifest.js';\nconst html = (strings, ...values) => (strings[0] + values.map((v, i) => v + strings[i + 1]).join('')).trim();\n\nfunction schemaLocationFor(name) {\n  return `../entities/${name}.schema`;\n}\n\nclass Loader {\n  path(fileName) {\n    let path = fileName.replace(/[\\/][^\\/]+$/, '/');\n    return path;\n  }\n\n  join(prefix, path) {\n    if (/^https?:\\/\\//.test(path))\n      return path;\n    // TODO: replace this with something that isn't hacky\n    if (path[0] == '/' || path[1] == ':')\n      return path;\n    prefix = this.path(prefix);\n    return prefix + path;\n  }\n\n  loadResource(file) {\n    if (/^https?:\\/\\//.test(file))\n      return this._loadURL(file);\n    return this._loadFile(file);\n  }\n\n  _loadFile(file) {\n    return new Promise((resolve, reject) => {\n      fs.readFile(file, (err, data) => {\n        if (err)\n          reject(err);\n        else\n          resolve(data.toString('utf-8'));\n      });\n    });\n  }\n\n  _loadURL(url) {\n    if (/\\/\\/schema.org\\//.test(url)) {\n      if (url.endsWith('/Thing')) {\n        return fetch('https://schema.org/Product.jsonld').then(res => res.text()).then(data => JsonldToManifest.convert(data, {'@id': 'schema:Thing'}));\n      }\n      return fetch(url + '.jsonld').then(res => res.text()).then(data => JsonldToManifest.convert(data));\n    }\n    return fetch(url).then(res => res.text());\n  }\n\n  async loadParticleClass(spec) {\n    let clazz = await this.requireParticle(spec.implFile);\n    clazz.spec = spec;\n    return clazz;\n  }\n\n  async requireParticle(fileName) {\n    let src = await this.loadResource(fileName);\n    // Note. This is not real isolation.\n    let script = new vm.Script(src, {filename: fileName, displayErrors: true});\n    let result = [];\n    let self = {\n      defineParticle(particleWrapper) {\n        result.push(particleWrapper);\n      },\n      console,\n      importScripts: s => null //console.log(`(skipping browser-space import for [${s}])`)\n    };\n    script.runInNewContext(self, {filename: fileName, displayErrors: true});\n    assert(result.length > 0 && typeof result[0] == 'function', `Error while instantiating particle implementation from ${fileName}`);\n    return this.unwrapParticle(result[0]);\n  }\n\n  unwrapParticle(particleWrapper) {\n    return particleWrapper({particle, Particle: particle.Particle, DomParticle, TransformationDomParticle, MultiplexerDomParticle, html});\n  }\n\n}\n\nexport default Loader;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/loader.js\n// module id = 18\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport runtime from './runtime.js';\nimport ParticleSpec from './particle-spec.js';\nimport tracing from '../tracelib/trace.js';\nimport assert from '../platform/assert-web.js';\nimport Schema from './schema.js';\n\n/** @class Particle\n * A basic particle. For particles that provide UI, you may like to\n * instead use DOMParticle.\n */\nexport class Particle {\n  constructor(capabilities) {\n    this.spec = this.constructor.spec;\n    if (this.spec.inputs.length == 0)\n      this.extraData = true;\n    this.relevances = [];\n    this._idle = Promise.resolve();\n    this._idleResolver = null;\n    this._busy = 0;\n    this.slotHandlers = [];\n    this.stateHandlers = new Map();\n    this.states = new Map();\n    this._slotByName = new Map();\n    this.capabilities = capabilities || {};\n  }\n\n  /** @method setViews(views)\n   * This method is invoked with a handle for each view this particle\n   * is registered to interact with, once those views are ready for\n   * interaction. Override the method to register for events from\n   * the views.\n   *\n   * Views is a map from view names to view handles.\n   */\n  setViews(views) {\n\n  }\n\n  constructInnerArc() {\n    if (!this.capabilities.constructInnerArc)\n      throw new Error('This particle is not allowed to construct inner arcs');\n    return this.capabilities.constructInnerArc(this);\n  }\n\n  get busy() {\n    return this._busy > 0;\n  }\n\n  get idle() {\n    return this._idle;\n  }\n\n  /** @method setBusy()\n   * Prevents this particle from indicating that it's idle until a matching\n   * call to setIdle is made.\n   */\n  setBusy() {\n    if (this._busy == 0)\n    this._idle = new Promise((resolve, reject) => {\n      this._idleResolver = resolve;\n    });\n    this._busy++;\n  }\n\n  /** @method setIdle()\n   * Indicates that a busy period (initiated by a call to setBusy) has completed.\n   */\n  setIdle() {\n    assert(this._busy > 0);\n    this._busy--;\n    if (this._busy == 0)\n      this._idleResolver();\n  }\n\n  set relevance(r) {\n    this.relevances.push(r);\n  }\n\n  inputs() {\n    return this.spec.inputs;\n  }\n\n  outputs() {\n    return this.spec.outputs;\n  }\n\n  /** @method getSlot(name)\n   * Returns the slot with provided name.\n   */\n  getSlot(name) {\n    return this._slotByName.get(name);\n  }\n\n  addSlotHandler(f) {\n    this.slotHandlers.push(f);\n  }\n\n  addStateHandler(states, f) {\n    states.forEach(state => {\n      if (!this.stateHandlers.has(state)) {\n        this.stateHandlers.set(state, []);\n      }\n      this.stateHandlers.get(state).push(f);\n    });\n  }\n\n  emit(state, value) {\n    this.states.set(state, value);\n    this.stateHandlers.get(state).forEach(f => f(value));\n  }\n\n  /** @method on(views, names, kind, f)\n   * Convenience method for registering a callback on multiple views at once.\n   *\n   * views is a map from names to view handles\n   * names indicates the views which should have a callback installed on them\n   * kind is the kind of event that should be registered for\n   * f is the callback function\n   */\n  on(views, names, kind, f) {\n    if (typeof names == 'string')\n      names = [names];\n    let trace = tracing.start({cat: 'particle', names: this.constructor.name + '::on', args: {view: names, event: kind}});\n    names.forEach(name => views.get(name).on(kind, tracing.wrap({cat: 'particle', name: this.constructor.name, args: {view: name, event: kind}}, f), this));\n    trace.end();\n  }\n\n  when(changes, f) {\n    changes.forEach(change => change.register(this, f));\n  }\n\n  fireEvent(slotName, event) {\n    // TODO(sjmiles): tests can get here without a `this.slot`, maybe this needs to be fixed in MockSlotManager?\n    let slot = this.getSlot(slotName);\n    assert(slot, `Particle::fireEvent: slot ${slotName} is falsey`);\n    slot.fireEvent(event);\n  }\n\n  static buildManifest(strings, ...bits) {\n    let output = [];\n    for (let i = 0; i < bits.length; i++) {\n        let str = strings[i];\n        let indent = / *$/.exec(str)[0];\n        let bitStr;\n        if (typeof bits[i] == 'string')\n          bitStr = bits[i];\n        else\n          bitStr = bits[i].toManifestString();\n        bitStr = bitStr.replace(/(\\n)/g, '$1' + indent);\n        output.push(str);\n        output.push(bitStr);\n    }\n    if (strings.length > bits.length)\n      output.push(strings[strings.length - 1]);\n    return output.join('');\n  }\n\n  setParticleDescription(pattern) {\n    return this.setDescriptionPattern('_pattern_', pattern);\n  }\n  setDescriptionPattern(connectionName, pattern) {\n    let descriptions = this._views.get('descriptions');\n    if (descriptions) {\n      descriptions.store(new descriptions.entityClass({key: connectionName, value: pattern}, connectionName));\n      return true;\n    }\n    return false;\n  }\n}\n\nexport class ViewChanges {\n  constructor(views, names, type) {\n    if (typeof names == 'string')\n      names = [names];\n    this.names = names;\n    this.views = views;\n    this.type = type;\n  }\n  register(particle, f) {\n    let modelCount = 0;\n    let afterAllModels = () => { if (++modelCount == this.names.length) { f(); } };\n\n    for (let name of this.names) {\n      let view = this.views.get(name);\n      view.synchronize(this.type, afterAllModels, f, particle);\n    }\n  }\n}\n\nexport class SlotChanges {\n  constructor() {\n  }\n  register(particle, f) {\n    particle.addSlotHandler(f);\n  }\n}\n\nexport class StateChanges {\n  constructor(states) {\n    if (typeof states == 'string')\n      states = [states];\n    this.states = states;\n  }\n  register(particle, f) {\n    particle.addStateHandler(this.states, f);\n  }\n}\n\nexport default {Particle, ViewChanges, SlotChanges, StateChanges};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/particle.js\n// module id = 19\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport Entity from './entity.js';\nimport Type from './type.js';\nimport Symbols from './symbols.js';\n\n// TODO: Should relations normalized by another layer, or here?\nclass Relation extends Entity {\n  constructor(...entities) {\n    super();\n    this.entities = entities;\n  }\n  get data() {\n    return this.entities.map(entity => entity[Symbols.identifier].toLiteral());\n  }\n  static typeFor(relation) {\n    let result = new Type(relation.entities.map(entity => entity.constructor.type), relation.constructor);\n    return result;\n  }\n}\n\nexport default Relation;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/relation.js\n// module id = 20\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\n\n// ShapeHandle {name, direction, type}\n// Slot {name, direction, isRequired, isSet}\n\nfunction _fromLiteral(member) {\n  if (!!member && typeof member == 'object')\n    return Type.fromLiteral(member);\n  return member;\n}\n\nfunction _toLiteral(member) {\n  if (!!member && member.toLiteral)\n    return member.toLiteral();\n  return member;\n}\n\nconst handleFields = ['type', 'name', 'direction'];\nconst slotFields = ['name', 'direction', 'isRequired', 'isSet'];\n\nclass Shape {\n  constructor(name, handles, slots) {\n    assert(name);\n    assert(handles !== undefined);\n    assert(slots !== undefined);\n    this.name = name;\n    this.handles = handles;\n    this.slots = slots;\n    this._typeVars = [];\n    for (let handle of handles)\n      for (let field of handleFields)\n        if (Shape.isTypeVar(handle[field]))\n          this._typeVars.push({object: handle, field});\n\n    for (let slot of slots)\n      for (let field of slotFields)\n        if (Shape.isTypeVar(slot[field]))\n          this._typeVars.push({object: slot, field});\n  }\n\n  toPrettyString() {\n    return 'SHAAAAPE';\n  }\n\n  get canReadSubset() {\n    return this._cloneAndUpdate(typeVar => typeVar.canReadSubset);\n  }\n\n  get canWriteSuperset() {\n    return this._cloneAndUpdate(typeVar => typeVar.canWriteSuperset);\n  }\n\n  isMoreSpecificThan(other) {\n    if (this.handles.length !== other.handles.length || this.slots.length !== other.slots.length)\n      return false;\n    // TODO: should probably confirm that handles and slots actually match.\n    for (let i = 0; i < this._typeVars.length; i++) {\n      let thisTypeVar = this._typeVars[i];\n      let otherTypeVar = other._typeVars[i];\n      if (!thistypeVar.object[thistypeVar.field].isMoreSpecificThan(othertypeVar.object[othertypeVar.field]))\n        return false;\n    }\n    return true;\n  }\n\n  _applyExistenceTypeTest(test) {\n    for (let typeRef of this._typeVars) {\n      if (test(typeRef.object[typeRef.field]))\n        return true;\n    }\n\n    return false;\n  }\n\n  _handlesToManifestString() {\n    return this.handles\n      .map(handle => {\n        let type = handle.type.resolvedType();\n        return `${handle.direction ? handle.direction + ' ': ''}${type.toString()}${handle.name ? ' ' + handle.name : ''}`;\n      }).join(', ');\n  }\n\n  _slotsToManifestString() {\n    // TODO deal with isRequired\n    return this.slots\n      .map(slot => `  ${slot.direction} ${slot.isSet ? 'set of ' : ''}${slot.name ? slot.name + ' ' : ''}`)\n      .join('\\n');\n  }\n  // TODO: Include name as a property of the shape and normalize this to just\n  // toString().\n  toString() {\n    return `shape ${this.name}\n  ${this.name}(${this._handlesToManifestString()})\n${this._slotsToManifestString()}\n`;\n  }\n\n  static fromLiteral(data) {\n    let handles = data.handles.map(handle => ({type: _fromLiteral(handle.type), name: _fromLiteral(handle.name), direction: _fromLiteral(handle.direction)}));\n    let slots = data.slots.map(slot => ({name: _fromLiteral(slot.name), direction: _fromLiteral(slot.direction), isRequired: _fromLiteral(slot.isRequired), isSet: _fromLiteral(slot.isSet)}));\n    return new Shape(data.name, handles, slots);\n  }\n\n  toLiteral() {\n    let handles = this.handles.map(handle => ({type: _toLiteral(handle.type), name: _toLiteral(handle.name), direction: _toLiteral(handle.direction)}));\n    let slots = this.slots.map(slot => ({name: _toLiteral(slot.name), direction: _toLiteral(slot.direction), isRequired: _toLiteral(slot.isRequired), isSet: _toLiteral(slot.isSet)}));\n    return {name: this.name, handles, slots};\n  }\n\n  clone() {\n    let handles = this.handles.map(({name, direction, type}) => ({name, direction, type}));\n    let slots = this.slots.map(({name, direction, isRequired, isSet}) => ({name, direction, isRequired, isSet}));\n    return new Shape(this.name, handles, slots);\n  }\n\n  resolvedType() {\n    return this._cloneAndUpdate(typeVar => typeVar.resolvedType());\n  }\n\n  equals(other) {\n    if (this.handles.length !== other.handles.length)\n      return false;\n\n    // TODO: this isn't quite right as it doesn't deal with duplicates properly\n    if (!this._equalItems(other.handles, this.handles, this._equalHandle)) {\n      return false;\n    }\n\n    if (!this._equalItems(other.slots, this.slots, this._equalSlot)) {\n      return false;\n    }\n    return true;\n  }\n\n  _equalHandle(handle, otherHandle) {\n    return handle.name == otherHandle.name && handle.direction == otherHandle.direction && handle.type.equals(otherHandle.type);\n  }\n\n  _equalSlot(slot, otherSlot) {\n    return slot.name == otherSlot.name && slot.direction == otherSlot.direction && slot.isRequired == otherSlot.isRequired && slot.isSet == otherSlot.isSet;\n  }\n\n  _equalItems(otherItems, items, compareItem) {\n    for (let otherItem of otherItems) {\n      let exists = false;\n      for (let item of items) {\n        if (compareItem(item, otherItem)) {\n          exists = true;\n          break;\n        }\n      }\n      if (!exists)\n        return false;\n    }\n\n    return true;\n  }\n\n  _cloneAndUpdate(update) {\n    let copy = this.clone();\n    copy._typeVars.forEach(typeVar => Shape._updateTypeVar(typeVar, update));\n    return copy;\n  }\n\n  static _updateTypeVar(typeVar, update) {\n    typeVar.object[typeVar.field] = update(typeVar.object[typeVar.field]);\n  }\n\n  static isTypeVar(reference) {\n    return (reference instanceof Type) && reference.hasProperty(r => r.isVariable);\n  }\n\n  static mustMatch(reference) {\n    return !(reference == undefined || Shape.isTypeVar(reference));\n  }\n\n  static handlesMatch(shapeHandle, particleHandle) {\n    if (Shape.mustMatch(shapeHandle.name) && shapeHandle.name !== particleHandle.name)\n      return false;\n    // TODO: direction subsetting?\n    if (Shape.mustMatch(shapeHandle.direction) && shapeHandle.direction !== particleHandle.direction)\n      return false;\n    if (shapeHandle.type == undefined)\n      return true;\n    if (shapeHandle.type.isVariableReference)\n      return false;\n    let [left, right] = Type.unwrapPair(shapeHandle.type, particleHandle.type);\n    if (left.isVariable) {\n      return [{var: left, value: right}];\n    } else {\n      return left.equals(right);\n    }\n\n  }\n\n  static slotsMatch(shapeSlot, particleSlot) {\n    if (Shape.mustMatch(shapeSlot.name) && shapeSlot.name !== particleSlot.name)\n      return false;\n    if (Shape.mustMatch(shapeSlot.direction) && shapeSlot.direction !== particleSlot.direction)\n      return false;\n    if (Shape.mustMatch(shapeSlot.isRequired) && shapeSlot.isRequired !== particleSlot.isRequired)\n      return false;\n    if (Shape.mustMatch(shapeSlot.isSet) && shapeSlot.isSet !== particleSlot.isSet)\n      return false;\n    return true;\n  }\n\n  particleMatches(particleSpec) {\n    return this.restrictType(particleSpec) !== false;\n  }\n\n  restrictType(particleSpec) {\n    let newShape = this.clone();\n    return newShape._restrictThis(particleSpec); \n  }\n\n  _restrictThis(particleSpec) {\n\n    let handleMatches = this.handles.map(\n      handle => particleSpec.connections.map(connection => ({match: connection, result: Shape.handlesMatch(handle, connection)}))\n                                      .filter(a => a.result !== false));\n\n    let particleSlots = [];\n    particleSpec.slots.forEach(consumedSlot => {\n      particleSlots.push({name: consumedSlot.name, direction: 'consume', isRequired: consumedSlot.isRequired, isSet: consumedSlot.isSet});\n      consumedSlot.providedSlots.forEach(providedSlot => {\n        particleSlots.push({name: providedSlot.name, direction: 'provide', isRequired: false, isSet: providedSlot.isSet});\n      });\n    });\n    let slotMatches = this.slots.map(slot => particleSlots.filter(particleSlot => Shape.slotsMatch(slot, particleSlot)));\n    slotMatches = slotMatches.map(matchList => matchList.map(slot => ({match: slot, result: true})));\n\n    let exclusions = [];\n\n    // TODO: this probably doesn't deal with multiple match options.\n    function choose(list, exclusions) {\n      if (list.length == 0)\n        return [];\n      let thisLevel = list.pop();\n      for (let connection of thisLevel) {\n        if (exclusions.includes(connection.match))\n          continue;\n        let newExclusions = exclusions.slice();\n        newExclusions.push(connection.match);\n        let constraints = choose(list, newExclusions);\n        if (constraints !== false) {\n          return connection.result.length ? constraints.concat(connection.result) : constraints;\n        }\n      }\n\n      return false;\n    }\n    \n    let handleOptions = choose(handleMatches, []);\n    let slotOptions = choose(slotMatches, []);\n\n    if (handleOptions === false || slotOptions === false)\n      return false;\n\n    for (let constraint of handleOptions)\n      if (!constraint.var.variable.resolution)\n        constraint.var.variable.resolution = constraint.value;\n\n    return this;\n  }\n}\n\nexport default Shape;\n\nimport Type from './type.js';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/shape.js\n// module id = 21\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport RecipeWalker from '../recipe/walker.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeUtil from '../recipe/recipe-util.js';\nimport assert from '../../platform/assert-web.js';\n\nexport default class HandleMapperBase extends Strategy {\n  async generate(inputParams) {\n    let self = this;\n\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onHandle(recipe, handle) {\n        if (handle.fate !== self.fate)\n          return;\n\n        if (handle.connections.length == 0)\n          return;\n\n        if (handle.id)\n          return;\n\n        if (!handle.type)\n          return;\n\n        // TODO: using the connection to retrieve type information is wrong.\n        // Once validation of recipes generates type information on the handle\n        // we should switch to using that instead.\n        let counts = RecipeUtil.directionCounts(handle);\n        return this.mapHandle(handle, handle.tags, handle.type, counts);\n      }\n\n      mapHandle(handle, tags, type, counts) {\n        let score = -1;\n        if (counts.in == 0 || counts.out == 0) {\n          if (counts.unknown > 0)\n            return;\n          if (counts.out == 0)\n            score = 1;\n          else\n            score = 0;\n        }\n\n        if (tags.length > 0)\n          score += 4;\n\n        let fate = self.fate;\n        if (counts.out > 0 && fate == 'map') {\n          return;\n        }\n        let handles = self.getMappableHandles(type, tags, counts);\n        if (handles.length < 2)\n          return;\n\n        let responses = handles.map(newHandle =>\n          ((recipe, clonedHandle) => {\n            for (let existingHandle of recipe.handles)\n              // TODO: Why don't we link the handle connections to the existingHandle?\n              if (existingHandle.id == newHandle.id)\n                return 0;\n            let tscore = 0;\n\n            assert(newHandle.id);\n            clonedHandle.mapToStorage(newHandle);\n            if (clonedHandle.fate != 'copy') {\n              clonedHandle.fate = fate;\n            }\n            return score + tscore;\n          }));\n\n        responses.push(null); // \"do nothing\" for this handle.\n        return responses;\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/handle-mapper-base.js\n// module id = 22\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\nimport RecipeUtil from '../recipe/recipe-util.js';\nimport assert from '../../platform/assert-web.js';\n\nexport default class MapSlots extends Strategy {\n  constructor(arc) {\n    super();\n    this._arc = arc;\n  }\n  async generate(inputParams) {\n    let arc = this._arc;\n\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onSlotConnection(recipe, slotConnection) {\n        // don't try to connect verb constraints\n        // TODO: is this right? Should constraints be connectible, in order to precompute the\n        // recipe side once the verb is substituted?\n        if (slotConnection.slotSpec == undefined)\n          return;\n\n        if (slotConnection.isConnected()) {\n          return;\n        }\n\n        let selectedSlots = MapSlots.findAllSlotCandidates(slotConnection, arc);\n\n        // ResolveRecipe handles one-slot case.\n        if (selectedSlots.length < 2) {\n          return;\n        }\n\n        return selectedSlots.map(slot => ((recipe, slotConnection) => {\n          MapSlots.connectSlotConnection(slotConnection, slot);\n          return 1;\n        }));\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n\n  // Helper methods.\n  // Connect the given slot connection to the selectedSlot, create the slot, if needed.\n  static connectSlotConnection(slotConnection, selectedSlot) {\n    let recipe = slotConnection.recipe;\n    if (!slotConnection.targetSlot) {\n      let clonedSlot = recipe.updateToClone({selectedSlot}).selectedSlot;\n\n      if (!clonedSlot) {\n        clonedSlot = recipe.slots.find(s => selectedSlot.id && selectedSlot.id == s.id);\n        if (clonedSlot == undefined) {\n          clonedSlot = recipe.newSlot(selectedSlot.name);\n          clonedSlot.id = selectedSlot.id;\n        }\n      }\n      slotConnection.connectToSlot(clonedSlot);\n    }\n\n    assert(!selectedSlot.id || !slotConnection.targetSlot.id || (selectedSlot.id == slotConnection.targetSlot.id),\n           `Cannot override slot id '${slotConnection.targetSlot.id}' with '${selectedSlot.id}'`);\n    slotConnection.targetSlot.id = selectedSlot.id || slotConnection.targetSlot.id;\n\n    // TODO: need to concat to existing tags and dedup?\n    slotConnection.targetSlot.tags = [...selectedSlot.tags];\n  }\n\n  // Returns all possible slot candidates, sorted by \"quality\"\n  static findAllSlotCandidates(slotConnection, arc) {\n    let selectedSlots = [];\n    if (!slotConnection.targetSlot) {\n      // Note: during manfiest parsing, target slot is only set in slot connection, if the slot exists in the recipe.\n      // If this slot is internal to the recipe, it has the sourceConnection set to the providing connection\n      // (and hence the consuming connection is considered connected already). Otherwise, this may only be a remote slot.\n      selectedSlots = MapSlots._findSlotCandidates(slotConnection, slotConnection.recipe.slots);\n    }\n    return selectedSlots.concat(MapSlots._findSlotCandidates(slotConnection, arc.pec.slotComposer.getAvailableSlots()));\n  }\n\n  // Returns the given slot candidates, sorted by \"quality\".\n  static _findSlotCandidates(slotConnection, slots) {\n    let possibleSlots = slots.filter(s => this._filterSlot(slotConnection, s));\n    possibleSlots.sort((slot1, slot2) => {\n        // TODO: implement.\n        return slot1.name < slot2.name;\n    });\n    return possibleSlots;\n  }\n\n  // Returns true, if the given slot is a viable candidate for the slotConnection.\n  static _filterSlot(slotConnection, slot) {\n    // if there's no slotSpec, this is just a slot constraint on a verb\n    if (!slotConnection.slotSpec)\n      return false;\n\n    if (slotConnection.slotSpec.isSet != slot.getProvidedSlotSpec().isSet) {\n      return false;\n    }\n\n    // Match by tag on slot name.\n    if (!MapSlots._tagsMatch(slotConnection, slot)) {\n      // For backward compatibility support explicit slot names matching.\n      if (slotConnection.name !== slot.name) {\n        return false;\n      }\n    }\n\n    // Match handles of the provided slot with the slot-connection particle's handles.\n    if (!MapSlots._handlesMatch(slotConnection.particle, slot.handleConnections.map(connection => connection.handle).filter(a => a !== undefined))) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Returns true, if the slot connection's tags intersection with slot's tags is nonempty.\n  // TODO: replace with generic tag matcher\n  static _tagsMatch(slotConnection, slot) {\n    let consumeConnTags = [].concat(slotConnection.slotSpec.tags || [], slotConnection.tags);\n    let slotTags = new Set([].concat(slot.tags, slot.getProvidedSlotSpec().tags || []));\n    // Consume connection tags aren't empty and intersection with the slot isn't empty.\n    return consumeConnTags.length > 0 && consumeConnTags.filter(t => slotTags.has(t)).length > 0;\n  }\n\n  // Returns true, if the providing slot handle restrictions are satisfied by the consuming slot connection.\n      // TODO: should we move some of this logic to the recipe? Or type matching?\n  static _handlesMatch(consumingParticle, providingSlotHandles) {\n    if (providingSlotHandles.length == 0) {\n      return true; // slot is not limited to specific handles\n    }\n    return Object.values(consumingParticle.connections).find(handleConn => {\n      return providingSlotHandles.includes(handleConn.handle) ||\n              (handleConn.handle && handleConn.handle.id && providingSlotHandles.map(sh => sh.id).includes(handleConn.handle.id));\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/map-slots.js\n// module id = 23\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport DomParticle from './dom-particle.js';\n\n// Regex to separate style and template.\nlet re = /<style>((?:.|[\\r\\n])*)<\\/style>((?:.|[\\r\\n])*)/;\n\n/** @class TransformationDomParticle\n * Particle that does transformation stuff with DOM.\n */\nclass TransformationDomParticle extends DomParticle {\n  getTemplate(slotName) {\n    return this._state.template;\n  }\n  render(props, state) {\n    return state.renderModel;\n  }\n  shouldRender(props, state) {\n    return Boolean(state.template && state.renderModel);\n  }\n\n  renderHostedSlot(slotName, hostedSlotId, content) {\n    this.combineHostedTemplate(slotName, hostedSlotId, content);\n    this.combineHostedModel(slotName, hostedSlotId, content);\n  }\n\n  // abstract\n  combineHostedTemplate(slotName, hostedSlotId, content) {}\n  combineHostedModel(slotName, hostedSlotId, content) {}\n\n  // Helper methods that may be reused in transformation particles to combine hosted content.\n  static combineTemplates(transformationTemplate, hostedTemplate) {\n    let transformationMatch = transformationTemplate.match(re);\n    if (!transformationMatch || transformationMatch.length != 3) {\n      return;\n    }\n    let hostedMatch = hostedTemplate.match(re);\n    if (!hostedMatch || hostedMatch.length != 3) {\n      return;\n    }\n\n    return `\n      <style>${transformationMatch[1].trim()}${hostedMatch[1].trim()}</style>\n      ${transformationMatch[2].trim().replace('{{hostedParticle}}', hostedMatch[2].trim())}\n    `;\n  }\n  static propsToItems(propsValues) {\n    return propsValues ? propsValues.map(({rawData, id}) => Object.assign({}, rawData, {subId: id})) : [];\n  }\n}\n\nexport default TransformationDomParticle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/transformation-dom-particle.js\n// module id = 24\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport Slot from './slot.js';\nimport {DomContext, SetDomContext} from './dom-context.js';\n\nconst templates = new Map();\n\nclass DomSlot extends Slot {\n  constructor(consumeConn, arc, containerKind) {\n    super(consumeConn, arc);\n    this._templateName = [this.consumeConn.particle.name, this.consumeConn.name].concat(\n        Object.values(this.consumeConn.particle.connections).filter(conn => conn.type.isInterface).map(conn => conn.handle.id)).join('::');\n    this._model = null;\n    this._observer = this._initMutationObserver();\n    this._containerKind = containerKind;\n  }\n\n  setContext(context) {\n    let wasNull = true;\n    if (this.getContext()) {\n      this.getContext().clear();\n      wasNull = false;\n    }\n\n    if (context) {\n      if (!this.getContext()) {\n        this._context = this._createDomContext();\n      }\n      this.getContext().initContext(context);\n      if (!wasNull) {\n        this._doRender();\n      }\n    } else {\n      this._context = null;\n    }\n  }\n  _createDomContext() {\n    if (this.consumeConn.slotSpec.isSet) {\n      return new SetDomContext(this._containerKind);\n    }\n    return new DomContext(null, this._containerKind);\n  }\n\n  // TODO(sjmiles): next three functions are a quick-fix for cleaning up MOs when there is\n  // an Arcpocalypse (dropping one Arc, producing another).\n  // Where there are other situations where a DomSlot is dropped, we have to make sure\n  // we disconnect the observer.\n  // Perhaps we need `Arc.cleanup()` or `Arc.dispose()` as a clearing-house for these tasks.\n  static addObserver(observer) {\n    const observers = DomSlot._observers || (DomSlot._observers = []);\n    observers.push(observer);\n  }\n  static dispose() {\n    // disconnect observers\n    const observers = DomSlot._observers;\n    observers && observers.forEach(o => o.disconnect());\n    DomSlot._observers = [];\n    // empty template cache\n    templates.clear();\n  }\n  _initMutationObserver() {\n    const observer = this.__initMutationObserver();\n    DomSlot.addObserver(observer);\n    return observer;\n  }\n  __initMutationObserver() {\n    const observer = new MutationObserver(async (records) => {\n      this._observer.disconnect();\n      if (this.getContext() && records.some(r => this.getContext().isDirectInnerSlot(r.target))) {\n        // Update inner slots.\n        this.getContext().initInnerContexts(this.consumeConn.slotSpec);\n        this.innerSlotsUpdateCallback(this);\n        // Reactivate the observer.\n        this.getContext().observe(this._observer);\n      }\n    });\n    return observer;\n  }\n  isSameContext(context) {\n    return this.getContext().isEqual(context);\n  }\n\n  getTemplate() {\n    return templates.get(this._templateName);\n  }\n\n  // TODO(sjmiles): triggered when innerPEC sends Render message to outerPEC,\n  // (usually by request of DomParticle::render())\n  // `handler` is generated by caller (slot-composer::renderSlot())\n  async setContent(content, handler) {\n    if (!content || Object.keys(content).length == 0) {\n      if (this.getContext()) {\n        this.getContext().clear();\n      }\n      this._model = null;\n      return;\n    }\n    if (!this.getContext()) {\n      return;\n    }\n    if (content.template) {\n      if (this.getTemplate()) {\n        // Template is being replaced.\n        this.getContext().clear();\n      }\n      templates.set(this._templateName, this.getContext().createTemplateElement(content.template));\n    }\n    this.eventHandler = handler;\n    if (Object.keys(content).indexOf('model') >= 0) {\n      if (content.model) {\n        this._model = Object.assign(content.model, await this.populateHandleDescriptions());\n      } else {\n        this._model = undefined;\n      }\n    }\n    this._doRender();\n  }\n\n  _doRender() {\n    assert(this.getContext());\n\n    this.getContext().observe(this._observer);\n\n    // Initialize template, if possible.\n    if (this.getTemplate()) {\n      this.getContext().stampTemplate(this.getTemplate(), this.eventHandler);\n    }\n    // else {\n    // TODO: should trigger request to particle, if template missing?\n    //}\n\n    if (this._model) {\n      this.getContext().updateModel(this._model);\n    }\n  }\n  getInnerContext(slotName) {\n    return this.getContext() && this.getContext().getInnerContext(slotName);\n  }\n  constructRenderRequest() {\n    let request = ['model'];\n    if (!this.getTemplate()) {\n      request.push('template');\n    }\n    return request;\n  }\n  static findRootSlots(context) {\n    return new DomContext(context, this._containerKind).findRootSlots(context);\n  }\n}\n\nexport default DomSlot;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/dom-slot.js\n// module id = 25\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy, Strategizer} from '../strategizer/strategizer.js';\nimport * as Rulesets from './strategies/rulesets.js';\nimport assert from '../platform/assert-web.js';\nimport DeviceInfo from '../platform/deviceinfo-web.js';\nimport Recipe from './recipe/recipe.js';\nimport RecipeUtil from './recipe/recipe-util.js';\nimport RecipeWalker from './recipe/walker.js';\nimport ConvertConstraintsToConnections from './strategies/convert-constraints-to-connections.js';\nimport AssignRemoteHandles from './strategies/assign-remote-handles.js';\nimport CopyRemoteHandles from './strategies/copy-remote-handles.js';\nimport AssignHandlesByTagAndType from './strategies/assign-handles-by-tag-and-type.js';\nimport InitPopulation from './strategies/init-population.js';\nimport MapSlots from './strategies/map-slots.js';\nimport MatchParticleByVerb from './strategies/match-particle-by-verb.js';\nimport MatchRecipeByVerb from './strategies/match-recipe-by-verb.js';\nimport NameUnnamedConnections from './strategies/name-unnamed-connections.js';\nimport AddUseHandles from './strategies/add-use-handles.js';\nimport CreateDescriptionHandle from './strategies/create-description-handle.js';\nimport Manifest from './manifest.js';\nimport InitSearch from './strategies/init-search.js';\nimport SearchTokensToParticles from './strategies/search-tokens-to-particles.js';\nimport FallbackFate from './strategies/fallback-fate.js';\nimport GroupHandleConnections from './strategies/group-handle-connections.js';\nimport MatchFreeHandlesToConnections from './strategies/match-free-handles-to-connections.js';\nimport CreateHandles from './strategies/create-handles.js';\nimport ResolveRecipe from './strategies/resolve-recipe.js';\n\nimport Speculator from './speculator.js';\nimport Description from './description.js';\nimport Tracing from '../tracelib/trace.js';\n\nimport StrategyExplorerAdapter from './debug/strategy-explorer-adapter.js';\n\nclass Planner {\n  // TODO: Use context.arc instead of arc\n  init(arc, {strategies, ruleset} = {}) {\n    this._arc = arc;\n    strategies = strategies || [\n      new InitPopulation(arc),\n      new InitSearch(arc),\n      new SearchTokensToParticles(arc),\n      new GroupHandleConnections(),\n      new FallbackFate(),\n      new CreateHandles(),\n      new AssignHandlesByTagAndType(arc),\n      new ConvertConstraintsToConnections(arc),\n      new MapSlots(arc),\n      new AssignRemoteHandles(arc),\n      new CopyRemoteHandles(arc),\n      new MatchParticleByVerb(arc),\n      new MatchRecipeByVerb(arc),\n      new NameUnnamedConnections(arc),\n      new AddUseHandles(),\n      new CreateDescriptionHandle(),\n      new MatchFreeHandlesToConnections(),\n      new ResolveRecipe(arc)\n    ];\n    this.strategizer = new Strategizer(strategies, [], {\n      maxPopulation: 100,\n      generationSize: 100,\n      discardSize: 20,\n      ruleset: ruleset || Rulesets.Empty\n    });\n  }\n\n  // Specify a timeout value less than zero to disable timeouts.\n  async plan(timeout, generations) {\n    let trace = Tracing.start({cat: 'planning', name: 'Planner::plan', overview: true, args: {timeout}});\n    timeout = timeout || -1;\n    let allResolved = [];\n    let now = () => (typeof performance == 'object') ? performance.now() : process.hrtime();\n    let start = now();\n    do {\n      let record = await trace.wait(this.strategizer.generate());\n      let generated = this.strategizer.generated;\n      trace.addArgs({\n        generated: generated.length,\n      });\n      if (generations) {\n        generations.push({generated, record});\n      }\n\n      let resolved = this.strategizer.generated\n          .map(individual => individual.result)\n          .filter(recipe => recipe.isResolved());\n      allResolved.push(...resolved);\n      const elapsed = now() - start;\n      if (timeout >= 0 && elapsed > timeout) {\n        console.warn(`Planner.plan timed out [elapsed=${Math.floor(elapsed)}ms, timeout=${timeout}ms].`);\n        break;\n      }\n    } while (this.strategizer.generated.length > 0);\n    trace.end();\n    return allResolved;\n  }\n\n  _matchesActiveRecipe(plan) {\n    let planShape = RecipeUtil.recipeToShape(plan);\n    let result = RecipeUtil.find(this._arc._activeRecipe, planShape);\n    return result.some(r => r.score == 0);\n  }\n\n  _speculativeThreadCount() {\n    // TODO(wkorman): We'll obviously have to rework the below when we do\n    // speculation in the cloud.\n    const cores = DeviceInfo.hardwareConcurrency();\n    const memory = DeviceInfo.deviceMemory();\n    // For now, allow occupying half of the available cores while constraining\n    // total memory used to at most a quarter of what's available. In the\n    // absence of resource information we just run two in parallel as a\n    // perhaps-low-end-device-oriented balancing act.\n    const minCores = 2;\n    if (!cores || !memory) {\n      return minCores;\n    }\n\n    // A rough estimate of memory used per thread in gigabytes.\n    const memoryPerThread = 0.125;\n    const quarterMemory = memory / 4;\n    const maxThreadsByMemory = quarterMemory / memoryPerThread;\n    const maxThreadsByCores = cores / 2;\n    return Math.max(minCores, Math.min(maxThreadsByMemory, maxThreadsByCores));\n  }\n  _splitToGroups(items, groupCount) {\n    const groups = [];\n    if (!items || items.length == 0) return groups;\n    const groupItemSize = Math.max(1, Math.floor(items.length / groupCount));\n    let startIndex = 0;\n    for (let i = 0; i < groupCount && startIndex < items.length; i++) {\n      groups.push(items.slice(startIndex, startIndex + groupItemSize));\n      startIndex += groupItemSize;\n    }\n    // Add any remaining items to the end of the last group.\n    if (startIndex < items.length) {\n      groups[groups.length - 1].push(...items.slice(startIndex, items.length));\n    }\n    return groups;\n  }\n  async suggest(timeout, generations) {\n    let trace = Tracing.start({cat: 'planning', name: 'Planner::suggest', overview: true, args: {timeout}});\n    if (!generations && this._arc._debugging) generations = [];\n    let plans = await trace.wait(this.plan(timeout, generations));\n    let suggestions = [];\n    let speculator = new Speculator();\n    // We don't actually know how many threads the VM will decide to use to\n    // handle the parallel speculation, but at least we know we won't kick off\n    // more than this number and so can somewhat limit resource utilization.\n    // TODO(wkorman): Rework this to use a fixed size 'thread' pool for more\n    // efficient work distribution.\n    const threadCount = this._speculativeThreadCount();\n    const planGroups = this._splitToGroups(plans, threadCount);\n    let results = await trace.wait(Promise.all(planGroups.map(async (group, groupIndex) => {\n      let results = [];\n      for (let plan of group) {\n        let hash = ((hash) => { return hash.substring(hash.length - 4);})(await plan.digest());\n\n        if (this._matchesActiveRecipe(plan)) {\n          this._updateGeneration(generations, hash, (g) => g.active = true);\n          continue;\n        }\n\n        // TODO(wkorman): Look at restoring trace.wait() here, and whether we\n        // should do similar for the async getRecipeSuggestion() below as well?\n        let relevance = await speculator.speculate(this._arc, plan);\n        if (!relevance.isRelevant(plan)) {\n          continue;\n        }\n        let rank = relevance.calcRelevanceScore();\n\n        relevance.newArc.description.relevance = relevance;\n        let description = await relevance.newArc.description.getRecipeSuggestion();\n\n        this._updateGeneration(generations, hash, (g) => g.description = description);\n\n        // TODO: Move this logic inside speculate, so that it can stop the arc\n        // before returning.\n        relevance.newArc.stop();\n\n        // Filter plans based on arc._search string.\n        if (this._arc.search) {\n          if (!plan.search) {\n            // This plan wasn't constructed based on the provided search terms.\n            if (description.toLowerCase().indexOf(this._arc.search) < 0) {\n              // Description must contain the full search string.\n              // TODO: this could be a strategy, if description was already available during strategies execution.\n              continue;\n            }\n          } else {\n            // This mean the plan was constructed based on provided search terms,\n            // and at least one of them were resolved (in order for the plan to be resolved).\n          }\n        }\n\n        results.push({\n          plan,\n          rank,\n          description: relevance.newArc.description,\n          descriptionText: description, // TODO(mmandlis): exclude the text description from returned results.\n          hash,\n          groupIndex\n        });\n      }\n      return results;\n    })));\n    results = [].concat(...results);\n\n    if (this._arc._debugging) {\n      StrategyExplorerAdapter.processGenerations(generations);\n    }\n\n    return trace.endWith(results);\n  }\n  _updateGeneration(generations, hash, handler) {\n    if (generations) {\n      generations.forEach(g => {\n        g.generated.forEach(gg => {\n          if (gg.hash.endsWith(hash)) {\n            handler(gg);\n          }\n        });\n      });\n    }\n  }\n}\n\nexport default Planner;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/planner.js\n// module id = 26\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 27\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 28\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nexport default {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./platform/fs-web.js\n// module id = 29\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport ParticleSpec from './particle-spec.js';\nimport Type from './type.js';\nimport OuterPortAttachment from './debug/outer-port-attachment.js';\n\nclass ThingMapper {\n  constructor(prefix) {\n    this._prefix = prefix;\n    this._nextIdentifier = 0;\n    this._idMap = new Map();\n    this._reverseIdMap = new Map();\n  }\n\n  _newIdentifier() {\n    return this._prefix + (this._nextIdentifier++);\n  }\n\n  createMappingForThing(thing, requestedId) {\n    assert(!this._reverseIdMap.has(thing));\n    let id;\n    if (requestedId) {\n      id = requestedId;\n    } else if (thing.apiChannelMappingId) {\n      id = thing.apiChannelMappingId;\n    } else {\n      id = this._newIdentifier();\n    }\n    assert(!this._idMap.has(id), `${requestedId ? 'requestedId' : (thing.apiChannelMappingId ? 'apiChannelMappingId' : 'newIdentifier()')} ${id} already in use`);\n    this.establishThingMapping(id, thing);\n    return id;\n  }\n\n  maybeCreateMappingForThing(thing) {\n    if (this.hasMappingForThing(thing)) {\n      return this.identifierForThing(thing);\n    }\n    return this.createMappingForThing(thing);\n  }\n\n  async establishThingMapping(id, thing) {\n    let continuation;\n    if (Array.isArray(thing)) {\n      [thing, continuation] = thing;\n    }\n    this._idMap.set(id, thing);\n    if (thing instanceof Promise) {\n      assert(continuation == null);\n      await this.establishThingMapping(id, await thing);\n    } else {\n      this._reverseIdMap.set(thing, id);\n      if (continuation) {\n        await continuation();\n      }\n    }\n  }\n\n  hasMappingForThing(thing) {\n    return this._reverseIdMap.has(thing);\n  }\n\n  identifierForThing(thing) {\n    assert(this._reverseIdMap.has(thing), `Missing thing ${thing}`);\n    return this._reverseIdMap.get(thing);\n  }\n\n  thingForIdentifier(id) {\n    assert(this._idMap.has(id), `Missing id: ${id}`);\n    return this._idMap.get(id);\n  }\n}\n\n\nclass APIPort {\n  constructor(messagePort, prefix) {\n    this._port = messagePort;\n    this._mapper = new ThingMapper(prefix);\n    this._messageMap = new Map();\n    this._port.onmessage = async e => this._handle(e);\n    this._debugAttachment = null;\n    this.messageCount = 0;\n\n    this.Direct = {\n      convert: a => a,\n      unconvert: a => a\n    };\n\n    this.Stringify = {\n      convert: a => a.toString(),\n      unconvert: a => eval(a)\n    };\n\n    this.LocalMapped = {\n      convert: a => this._mapper.maybeCreateMappingForThing(a),\n      unconvert: a => this._mapper.thingForIdentifier(a)\n    };\n\n    this.Mapped = {\n      convert: a => this._mapper.identifierForThing(a),\n      unconvert: a => this._mapper.thingForIdentifier(a)\n    };\n\n    this.Dictionary = function(primitive) {\n      return {\n        convert: a => {\n          let r = {};\n          for (let key in a) {\n            r[key] = primitive.convert(a[key]);\n          }\n          return r;\n        }\n      };\n    };\n\n    this.Map = function(keyprimitive, valueprimitive) {\n      return {\n        convert: a => {\n          let r = {};\n          a.forEach((value, key) => r[keyprimitive.convert(key)] = valueprimitive.convert(value));\n          return r;\n        },\n        unconvert: a => {\n          let r = new Map();\n          for (let key in a)\n            r.set(keyprimitive.unconvert(key), valueprimitive.unconvert(a[key]));\n          return r;\n        }\n      };\n    };\n\n    this.List = function(primitive) {\n      return {\n        convert: a => a.map(v => primitive.convert(v)),\n        unconvert: a => a.map(v => primitive.unconvert(v))\n      };\n    };\n\n    this.ByLiteral = function(clazz) {\n      return {\n        convert: a => a.toLiteral(),\n        unconvert: a => clazz.fromLiteral(a)\n      };\n    };\n  }\n\n  close() {\n    this._port.close();\n  }\n\n  async _handle(e) {\n    assert(this._messageMap.has(e.data.messageType));\n\n    this.messageCount++;\n\n    let handler = this._messageMap.get(e.data.messageType);\n    let args;\n    try {\n      args = this._unprocessArguments(handler.args, e.data.messageBody);\n    } catch (exc) {\n      console.error(`Exception during unmarshaling for ${e.data.messageType}`);\n      throw exc;\n    }\n    // If any of the converted arguments are still pending promises\n    // wait for them to complete before processing the message.\n    for (let arg of Object.values(args)) {\n      if (arg instanceof Promise) {\n        arg.then(() => this._handle(e));\n        return;\n      }\n    }\n    let handlerName = 'on' + e.data.messageType;\n    let result = this[handlerName](args);\n    if (this._debugAttachment && this._debugAttachment[handlerName]) {\n      this._debugAttachment[handlerName](args);\n    }\n    if (handler.isInitializer) {\n      assert(args.identifier);\n      await this._mapper.establishThingMapping(args.identifier, result);\n    }\n  }\n\n  _processArguments(argumentTypes, args) {\n    let messageBody = {};\n    for (let argument in argumentTypes)\n      messageBody[argument] = argumentTypes[argument].convert(args[argument]);\n    return messageBody;\n  }\n\n  _unprocessArguments(argumentTypes, args) {\n    let messageBody = {};\n    for (let argument in argumentTypes)\n      messageBody[argument] = argumentTypes[argument].unconvert(args[argument]);\n    return messageBody;\n  }\n\n  registerCall(name, argumentTypes) {\n    this[name] = args => {\n      let call = {messageType: name, messageBody: this._processArguments(argumentTypes, args)};\n      this._port.postMessage(call);\n      if (this._debugAttachment && this._debugAttachment[name]) {\n        this._debugAttachment[name](args);\n      }\n    };\n  }\n\n  registerHandler(name, argumentTypes) {\n    this._messageMap.set(name, {args: argumentTypes});\n  }\n\n  registerInitializerHandler(name, argumentTypes) {\n    argumentTypes.identifier = this.Direct;\n    this._messageMap.set(name, {\n      isInitializer: true,\n      args: argumentTypes,\n    });\n  }\n\n  registerRedundantInitializer(name, argumentTypes, mappingIdArg) {\n    this.registerInitializer(name, argumentTypes, mappingIdArg, true /* redundant */);\n  }\n\n  registerInitializer(name, argumentTypes, mappingIdArg = null, redundant = false) {\n    this[name] = (thing, args) => {\n      if (redundant && this._mapper.hasMappingForThing(thing)) return;\n      let call = {messageType: name, messageBody: this._processArguments(argumentTypes, args)};\n      let requestedId = mappingIdArg && args[mappingIdArg];\n      call.messageBody.identifier = this._mapper.createMappingForThing(thing, requestedId);\n      this._port.postMessage(call);\n      if (this._debugAttachment && this._debugAttachment[name]) {\n        this._debugAttachment[name](thing, args);\n      }\n    };\n  }\n\n  initDebug(arc) {\n    if (!this._debugAttachment) this._debugAttachment = new OuterPortAttachment(arc);\n  }\n}\n\nclass PECOuterPort extends APIPort {\n  constructor(messagePort) {\n    super(messagePort, 'o');\n\n    this.registerCall('Stop', {});\n    this.registerRedundantInitializer('DefineHandle', {type: this.ByLiteral(Type), name: this.Direct});\n    this.registerInitializer('InstantiateParticle',\n      {id: this.Direct, spec: this.ByLiteral(ParticleSpec), handles: this.Map(this.Direct, this.Mapped)}, 'id');\n\n    this.registerCall('UIEvent', {particle: this.Mapped, slotName: this.Direct, event: this.Direct});\n    this.registerCall('SimpleCallback', {callback: this.Direct, data: this.Direct});\n    this.registerCall('AwaitIdle', {version: this.Direct});\n    this.registerCall('StartRender', {particle: this.Mapped, slotName: this.Direct, contentTypes: this.List(this.Direct)});\n    this.registerCall('StopRender', {particle: this.Mapped, slotName: this.Direct});\n\n    this.registerHandler('Render', {particle: this.Mapped, slotName: this.Direct, content: this.Direct});\n    this.registerHandler('Synchronize', {handle: this.Mapped, target: this.Mapped,\n                                    type: this.Direct, callback: this.Direct,\n                                    modelCallback: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleGet', {handle: this.Mapped, callback: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleToList', {handle: this.Mapped, callback: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleSet', {handle: this.Mapped, data: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleStore', {handle: this.Mapped, data: this.Direct, particleId: this.Direct});\n    this.registerHandler('HandleRemove', {handle: this.Mapped, data: this.Direct});\n    this.registerHandler('HandleClear', {handle: this.Mapped, particleId: this.Direct});\n    this.registerHandler('Idle', {version: this.Direct, relevance: this.Map(this.Mapped, this.Direct)});\n\n    this.registerHandler('ConstructInnerArc', {callback: this.Direct, particle: this.Mapped});\n    this.registerCall('ConstructArcCallback', {callback: this.Direct, arc: this.LocalMapped});\n\n    this.registerHandler('ArcCreateHandle', {callback: this.Direct, arc: this.LocalMapped, type: this.ByLiteral(Type), name: this.Direct});\n    this.registerInitializer('CreateHandleCallback', {callback: this.Direct, type: this.ByLiteral(Type), name: this.Direct, id: this.Direct});\n\n    this.registerHandler('ArcMapHandle', {callback: this.Direct, arc: this.LocalMapped, handle: this.Mapped});\n    this.registerInitializer('MapHandleCallback', {callback: this.Direct, id: this.Direct});\n\n    this.registerHandler('ArcCreateSlot',\n      {callback: this.Direct, arc: this.LocalMapped, transformationParticle: this.Mapped, transformationSlotName: this.Direct, hostedParticleName: this.Direct, hostedSlotName: this.Direct});\n    this.registerInitializer('CreateSlotCallback', {callback: this.Direct, hostedSlotId: this.Direct});\n    this.registerCall('InnerArcRender', {transformationParticle: this.Mapped, transformationSlotName: this.Direct, hostedSlotId: this.Direct, content: this.Direct});\n\n    this.registerHandler('ArcLoadRecipe', {arc: this.LocalMapped, recipe: this.Direct, callback: this.Direct});\n  }\n}\n\nclass PECInnerPort extends APIPort {\n  constructor(messagePort) {\n    super(messagePort, 'i');\n\n    this.registerHandler('Stop', {});\n    // particleFunction needs to be eval'd in context or it won't work.\n    this.registerHandler('DefineParticle',\n      {particleDefinition: this.Direct, particleFunction: this.Direct});\n    this.registerInitializerHandler('DefineHandle', {type: this.ByLiteral(Type), name: this.Direct});\n    this.registerInitializerHandler('InstantiateParticle',\n      {id: this.Direct, spec: this.ByLiteral(ParticleSpec), handles: this.Map(this.Direct, this.Mapped)});\n\n    this.registerHandler('UIEvent', {particle: this.Mapped, slotName: this.Direct, event: this.Direct});\n    this.registerHandler('SimpleCallback', {callback: this.LocalMapped, data: this.Direct});\n    this.registerHandler('AwaitIdle', {version: this.Direct});\n    this.registerHandler('StartRender', {particle: this.Mapped, slotName: this.Direct, contentTypes: this.Direct});\n    this.registerHandler('StopRender', {particle: this.Mapped, slotName: this.Direct});\n\n    this.registerCall('Render', {particle: this.Mapped, slotName: this.Direct, content: this.Direct});\n    this.registerCall('Synchronize', {handle: this.Mapped, target: this.Mapped,\n                                 type: this.Direct, callback: this.LocalMapped,\n                                 modelCallback: this.LocalMapped, particleId: this.Direct});\n    this.registerCall('HandleGet', {handle: this.Mapped, callback: this.LocalMapped, particleId: this.Direct});\n    this.registerCall('HandleToList', {handle: this.Mapped, callback: this.LocalMapped, particleId: this.Direct});\n    this.registerCall('HandleSet', {handle: this.Mapped, data: this.Direct, particleId: this.Direct});\n    this.registerCall('HandleStore', {handle: this.Mapped, data: this.Direct, particleId: this.Direct});\n    this.registerCall('HandleRemove', {handle: this.Mapped, data: this.Direct});\n    this.registerCall('HandleClear', {handle: this.Mapped, particleId: this.Direct});\n    this.registerCall('Idle', {version: this.Direct, relevance: this.Map(this.Mapped, this.Direct)});\n\n    this.registerCall('ConstructInnerArc', {callback: this.LocalMapped, particle: this.Mapped});\n    this.registerHandler('ConstructArcCallback', {callback: this.LocalMapped, arc: this.Direct});\n\n    this.registerCall('ArcCreateHandle', {callback: this.LocalMapped, arc: this.Direct, type: this.ByLiteral(Type), name: this.Direct});\n    this.registerInitializerHandler('CreateHandleCallback', {callback: this.LocalMapped, type: this.ByLiteral(Type), name: this.Direct, id: this.Direct});\n    this.registerCall('ArcMapHandle', {callback: this.LocalMapped, arc: this.Direct, handle: this.Mapped});\n    this.registerInitializerHandler('MapHandleCallback', {callback: this.LocalMapped, id: this.Direct});\n    this.registerCall('ArcCreateSlot',\n      {callback: this.LocalMapped, arc: this.Direct, transformationParticle: this.Mapped, transformationSlotName: this.Direct, hostedParticleName: this.Direct, hostedSlotName: this.Direct});\n    this.registerInitializerHandler('CreateSlotCallback', {callback: this.LocalMapped, hostedSlotId: this.Direct});\n    this.registerHandler('InnerArcRender', {transformationParticle: this.Mapped, transformationSlotName: this.Direct, hostedSlotId: this.Direct, content: this.Direct});\n\n    this.registerCall('ArcLoadRecipe', {arc: this.Direct, recipe: this.Direct, callback: this.LocalMapped});\n  }\n}\n\nexport {PECOuterPort as PECOuterPort, PECInnerPort as PECInnerPort};\nexport default {PECOuterPort, PECInnerPort};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/api-channel.js\n// module id = 30\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport Template from '../shell/components/xen/xen-template.js';\n\nclass DomContext {\n  constructor(context, containerKind) {\n    this._context = context;\n    this._containerKind = containerKind;\n    // TODO(sjmiles): _liveDom needs new name\n    this._liveDom = null;\n    this._innerContextBySlotName = {};\n    this._subId = null;\n  }\n  get subId() {return this._subId; }\n  set subId(subId) { this._subId = subId; }\n  static createContext(context, content) {\n    let domContext = new DomContext(context);\n    domContext.stampTemplate(domContext.createTemplateElement(content.template), () => {});\n    domContext.updateModel(content.model);\n    return domContext;\n  }\n  initContext(context) {\n    assert(context);\n    if (!this._context) {\n      this._context = document.createElement(this._containerKind || 'div');\n      this._setParticleName('');\n      context.appendChild(this._context);\n    } else {\n      assert(this._context.parentNode == context,\n             'TODO: add support for moving slot to different context');\n    }\n  }\n  updateParticleName(slotName, particleName) {\n    this._setParticleName(`${slotName}::${particleName}`);\n  }\n  _setParticleName(name) {\n    this._context.setAttribute('particle-host', name);\n  }\n  get context() { return this._context; }\n  isEqual(context) {\n    return this._context.parentNode == context;\n  }\n  updateModel(model) {\n    if (this._liveDom) {\n      this._liveDom.set(model);\n    }\n  }\n  clear() {\n    if (this._liveDom) {\n      this._liveDom.root.textContent = '';\n    }\n    this._liveDom = null;\n    this._innerContextBySlotName = {};\n\n  }\n  static createTemplateElement(template) {\n    return Object.assign(document.createElement('template'), {innerHTML: template});\n  }\n  createTemplateElement(template) {\n    return DomContext.createTemplateElement(template);\n  }\n  stampTemplate(template, eventHandler) {\n    if (!this._liveDom) {\n      // TODO(sjmiles): hack to allow subtree elements (e.g. x-list) to marshal events\n      this._context._eventMapper = this._eventMapper.bind(this, eventHandler);\n      this._liveDom = Template\n          .stamp(template)\n          .events(this._context._eventMapper)\n          .appendTo(this._context);\n    }\n  }\n  observe(observer) {\n    observer.observe(this._context, {childList: true, subtree: true});\n  }\n  getInnerContext(innerSlotName) {\n    return this._innerContextBySlotName[innerSlotName];\n  }\n  isDirectInnerSlot(slot) {\n    if (slot === this._context) {\n      return true;\n    }\n\n    let parentNode = slot.parentNode;\n    while (parentNode) {\n      if (parentNode == this._context) {\n        return true;\n      }\n      if (parentNode.getAttribute('slotid')) {\n        // this is an inner slot of an inner slot.\n        return false;\n      }\n      parentNode = parentNode.parentNode;\n    }\n    assert(false);\n  }\n  // get a value from node that could be an attribute, if not a property\n  getNodeValue(node, name) {\n    // TODO(sjmiles): remember that attribute names from HTML are lower-case\n    return node[name] || node.getAttribute(name);\n  }\n  initInnerContexts(slotSpec) {\n    this._innerContextBySlotName = {};\n    Array.from(this._context.querySelectorAll('[slotid]')).forEach(elem => {\n      if (!this.isDirectInnerSlot(elem)) {\n        // Skip inner slots of an inner slot of the given slot.\n        return;\n      }\n      const slotId = this.getNodeValue(elem, 'slotid');\n      const providedSlotSpec = slotSpec.getProvidedSlotSpec(slotId);\n      if (!providedSlotSpec) { // Skip non-declared slots\n        console.warn(`Slot ${slotSpec.name} has unexpected inner slot ${slotId}`);\n        return;\n      }\n      const subId = this.getNodeValue(elem, 'subid');\n      this._validateSubId(providedSlotSpec, subId);\n      this._initInnerSlotContext(slotId, subId, elem);\n    });\n  }\n  _initInnerSlotContext(slotId, subId, elem) {\n    if (subId) {\n      if (!this._innerContextBySlotName[slotId]) {\n        this._innerContextBySlotName[slotId] = {};\n      }\n      assert(!this._innerContextBySlotName[slotId][subId], `Multiple ${slotId}:${subId} inner slots cannot be provided`);\n      this._innerContextBySlotName[slotId][subId] = elem;\n    } else {\n      this._innerContextBySlotName[slotId] = elem;\n    }\n  }\n  _validateSubId(providedSlotSpec, subId) {\n    assert(!this.subId || !subId || this.subId == subId, `Unexpected sub-id ${subId}, expecting ${this.subId}`);\n    assert(Boolean(this.subId || subId) === providedSlotSpec.isSet,\n        `Sub-id ${subId} for provided slot ${providedSlotSpec.name} doesn't match set spec: ${providedSlotSpec.isSet}`);\n  }\n  findRootSlots() {\n    let innerSlotById = {};\n    Array.from(this._context.querySelectorAll('[slotid]')).forEach(s => {\n      assert(this.isDirectInnerSlot(s), 'Unexpected inner slot');\n      let slotId = s.getAttribute('slotid');\n      assert(!innerSlotById[slotId], `Duplicate root slot ${slotId}`);\n      innerSlotById[slotId] = s;\n    });\n    return innerSlotById;\n  }\n  _eventMapper(eventHandler, node, eventName, handlerName) {\n    node.addEventListener(eventName, event => {\n      // TODO(sjmiles): we have an extremely minimalist approach to events here, this is useful IMO for\n      // finding the smallest set of features that we are going to need.\n      // First problem: click event firing multiple times as it bubbles up the tree, minimalist solution\n      // is to enforce a 'first listener' rule by executing `stopPropagation`.\n      event.stopPropagation();\n      // propagate keyboard information\n      const {altKey, ctrlKey, metaKey, shiftKey, code, key, repeat} = event;\n      eventHandler({\n        handler: handlerName,\n        data: {\n          // TODO(sjmiles): this is a data-key (as in key-value pair), may be confusing vs `keys`\n          key: node.key,\n          value: node.value,\n          keys: {altKey, ctrlKey, metaKey, shiftKey, code, key, repeat}\n        }\n      });\n    });\n  }\n}\n\nclass SetDomContext {\n  constructor(containerKind) {\n    this._contextBySubId = {};\n    this._containerKind = containerKind;\n  }\n  initContext(context) {\n    Object.keys(context).forEach(subId => {\n      if (!this._contextBySubId[subId] || !this._contextBySubId[subId].isEqual(context[subId])) {\n        this._contextBySubId[subId] = new DomContext(null, this._containerKind);\n        this._contextBySubId[subId].subId = subId;\n      }\n      this._contextBySubId[subId].initContext(context[subId]);\n    });\n    // Delete sub-contexts that are not found in the new context.\n    Object.keys(this._contextBySubId).forEach(subId => {\n      if (!context[subId]) {\n        delete this._contextBySubId[subId];\n      }\n    });\n  }\n  updateParticleName(slotName, particleName) {\n    Object.values(this._contextBySubId).forEach(context => context.updateParticleName(slotName, particleName));\n  }\n  isEqual(context) {\n    return Object.keys(this._contextBySubId).length == Object.keys(context).length &&\n           !Object.keys(this._contextBySubId).find(c => this._contextBySubId[c] != context[c]);\n  }\n  updateModel(model) {\n    assert(model.items, `Model must contain items`);\n    model.items.forEach(item => {\n      // Properties from item override properties from model.\n      item = Object.assign(Object.assign({}, model), item);\n      delete item.items;\n      if (this._contextBySubId[item.subId]) {\n        this._contextBySubId[item.subId].updateModel(item);\n      }\n    });\n  }\n  clear() {\n    Object.values(this._contextBySubId).forEach(context => context.clear());\n  }\n  createTemplateElement(template) {\n    let templates = {};\n    if (typeof template === 'string') {\n      templates[''] = DomContext.createTemplateElement(template);\n    } else {\n      Object.keys(template).forEach(subId => {\n        templates[subId] = this._contextBySubId[subId].createTemplateElement(template[subId]);\n      });\n    }\n    return templates;\n  }\n  stampTemplate(template, eventHandler, eventMapper) {\n    Object.keys(this._contextBySubId).forEach(subId => {\n      let templateForSubId = template[subId] || template[''];\n      if (templateForSubId) {\n        this._contextBySubId[subId].stampTemplate(templateForSubId, eventHandler, eventMapper);\n      }\n    });\n  }\n  observe(observer) {\n    Object.values(this._contextBySubId).forEach(context => context.observe(observer));\n  }\n  getInnerContext(innerSlotName) {\n    let innerContexts = {};\n    Object.keys(this._contextBySubId).forEach(subId => {\n      innerContexts[subId] = this._contextBySubId[subId].getInnerContext(innerSlotName);\n    });\n    return innerContexts;\n  }\n  initInnerContexts(slotSpec) {\n    Object.keys(this._contextBySubId).forEach(subId => this._contextBySubId[subId].initInnerContexts(slotSpec, subId));\n  }\n  isDirectInnerSlot(slot) {\n    return Object.values(this._contextBySubId).find(context => context.isDirectInnerSlot(slot)) != null;\n  }\n}\n\nexport {DomContext, SetDomContext};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/dom-context.js\n// module id = 31\n// module chunks = 0","/** @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport Entity from './entity.js';\nimport Relation from './relation.js';\nimport Symbols from './symbols.js';\nlet identifier = Symbols.identifier;\nimport assert from '../platform/assert-web.js';\nimport ParticleSpec from './particle-spec.js';\n\n// TODO: This won't be needed once runtime is transferred between contexts.\nfunction cloneData(data) {\n  return data;\n  //return JSON.parse(JSON.stringify(data));\n}\n\nfunction restore(entry, entityClass) {\n  let {id, rawData} = entry;\n  let entity = new entityClass(cloneData(rawData));\n  if (entry.id) {\n    entity.identify(entry.id);\n  }\n\n  // TODO some relation magic, somewhere, at some point.\n\n  return entity;\n}\n\n/** @class Handle\n * Base class for Collections and Variables.\n */\nclass Handle {\n  constructor(proxy, particleId, canRead, canWrite) {\n    assert(!(proxy instanceof Handle));\n    this._proxy = proxy;\n    this.canRead = canRead;\n    this.canWrite = canWrite;\n    this._particleId = particleId;\n  }\n  underlyingProxy() {\n    return this._proxy;\n  }\n  /** @method on(kind, callback, target)\n   * Register for callbacks every time the requested kind of event occurs.\n   * Events are grouped into delivery sets by target, which should therefore\n   * be the recieving particle.\n   */\n  on(kind, callback, target) {\n    return this._proxy.on(kind, callback, target, this._particleId);\n  }\n\n  synchronize(kind, modelCallback, callback, target) {\n    return this._proxy.synchronize(kind, modelCallback, callback, target, this._particleId);\n  }\n\n  generateID() {\n    assert(this._proxy.generateID);\n    return this._proxy.generateID();\n  }\n\n  generateIDComponents() {\n    assert(this._proxy.generateIDComponents);\n    return this._proxy.generateIDComponents();\n  }\n\n  _serialize(entity) {\n    if (!entity.isIdentified())\n      entity.createIdentity(this.generateIDComponents());\n    let id = entity[identifier];\n    let rawData = entity.dataClone();\n    return {\n      id,\n      rawData\n    };\n  }\n\n  _restore(entry) {\n    assert(this.entityClass, 'Handles need entity classes for deserialization');\n    return restore(entry, this.entityClass);\n  }\n\n  get type() {\n    return this._proxy._type;\n  }\n  get name() {\n    return this._proxy.name;\n  }\n\n  get _id() {\n    return this._proxy._id;\n  }\n\n  toManifestString() {\n    return `'${this._id}'`;\n  }\n}\n\n/** @class Collection\n * A handle on a set of Entity data. Note that, as a set, a Collection can only\n * contain a single version of an Entity for each given ID. Further, no order is\n * implied by the set. A particle's manifest dictates the types of handles that\n * need to be connected to that particle, and the current recipe identifies\n * which handles are connected.\n */\nclass Collection extends Handle {\n  constructor(proxy, particleId, canRead, canWrite) {\n    // TODO: this should talk to an API inside the PEC.\n    super(proxy, particleId, canRead, canWrite);\n  }\n  query() {\n    // TODO: things\n  }\n  /** @method async toList()\n   * Returns a list of the Entities contained by the handle.\n   * throws: Error if this handle is not configured as a readable handle (i.e. 'in' or 'inout')\n     in the particle's manifest.\n   */\n  async toList() {\n    // TODO: remove this and use query instead\n    if (!this.canRead)\n      throw new Error('Handle not readable');\n    return (await this._proxy.toList(this._particleId)).map(a => this._restore(a));\n  }\n\n  /** @method store(entity)\n   * Stores a new entity into the Handle.\n   * throws: Error if this handle is not configured as a writeable handle (i.e. 'out' or 'inout')\n     in the particle's manifest.\n   */\n  async store(entity) {\n    if (!this.canWrite)\n      throw new Error('Handle not writeable');\n    let serialization = this._serialize(entity);\n    return this._proxy.store(serialization, this._particleId);\n  }\n\n  /** @method remove(entity)\n   * Removes an entity from the Handle.\n   * throws: Error if this handle is not configured as a writeable handle (i.e. 'out' or 'inout')\n     in the particle's manifest.\n   */\n  async remove(entity) {\n    if (!this.canWrite)\n      throw new Error('View not writeable');\n    let serialization = this._serialize(entity);\n    return this._proxy.remove(serialization.id, this._particleId);\n  }\n}\n\n/** @class Variable\n * A handle on a single entity. A particle's manifest dictates\n * the types of handles that need to be connected to that particle, and\n * the current recipe identifies which handles are connected.\n */\nclass Variable extends Handle {\n  constructor(proxy, particleId, canRead, canWrite) {\n    super(proxy, particleId, canRead, canWrite);\n  }\n\n  /** @method async get()\n  * Returns the Entity contained by the Variable, or undefined if the Variable\n  * is cleared.\n  * throws: Error if this variable is not configured as a readable handle (i.e. 'in' or 'inout')\n    in the particle's manifest.\n   */\n  async get() {\n    if (!this.canRead)\n      throw new Error('View not readable');\n    let result = await this._proxy.get(this._particleId);\n    if (result == null)\n      return undefined;\n    if (this.type.isEntity)\n      return this._restore(result);\n    if (this.type.isInterface)\n      return ParticleSpec.fromLiteral(result);\n    return result;\n  }\n\n  /** @method set(entity)\n   * Stores a new entity into the Variable, replacing any existing entity.\n   * throws: Error if this variable is not configured as a writeable handle (i.e. 'out' or 'inout')\n     in the particle's manifest.\n   */\n  async set(entity) {\n    if (!this.canWrite)\n      throw new Error('View not writeable');\n    return this._proxy.set(this._serialize(entity), this._particleId);\n  }\n\n  /** @method clear()\n   * Clears any entity currently in the Variable.\n   * throws: Error if this variable is not configured as a writeable handle (i.e. 'out' or 'inout')\n     in the particle's manifest.\n   */\n  async clear() {\n    if (!this.canWrite)\n      throw new Error('View not writeable');\n    await this._proxy.clear(this._particleId);\n  }\n}\n\nfunction handleFor(proxy, isSet, particleId, canRead = true, canWrite = true) {\n  return (isSet || (isSet == undefined && proxy.type.isSetView))\n      ? new Collection(proxy, particleId, canRead, canWrite)\n      : new Variable(proxy, particleId, canRead, canWrite);\n}\n\nexport default {handleFor};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/handle.js\n// module id = 32\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport ParticleSpec from './particle-spec.js';\nimport TransformationDomParticle from './transformation-dom-particle.js';\n\nexport default class MultiplexerDomParticle extends TransformationDomParticle {\n  constructor() {\n    super();\n    this._itemSubIdByHostedSlotId = new Map();\n    this._connByHostedConn = new Map();\n  }\n\n  async _mapParticleConnections(\n      listHandleName,\n      particleHandleName,\n      hostedParticle,\n      views,\n      arc) {\n    let otherMappedViews = [];\n    let otherConnections = [];\n    let index = 2;\n    const skipConnectionNames = [listHandleName, particleHandleName];\n    for (let [connectionName, otherView] of views) {\n      if (skipConnectionNames.includes(connectionName)) {\n        continue;\n      }\n      // TODO(wkorman): For items with embedded recipes we may need a map\n      // (perhaps id to index) to make sure we don't map a handle into the inner\n      // arc multiple times unnecessarily.\n      otherMappedViews.push(\n          `map '${await arc.mapHandle(otherView._proxy)}' as v${index}`);\n      let hostedOtherConnection = hostedParticle.connections.find(\n          conn => conn.isCompatibleType(otherView.type));\n      if (hostedOtherConnection) {\n        otherConnections.push(`${hostedOtherConnection.name} <- v${index++}`);\n        // TODO(wkorman): For items with embedded recipes where we may have a\n        // different particle rendering each item, we need to track\n        // |connByHostedConn| keyed on the particle type.\n        this._connByHostedConn.set(hostedOtherConnection.name, connectionName);\n      }\n    }\n    return [otherMappedViews, otherConnections];\n  }\n\n  async setViews(views) {\n    this.handleIds = {};\n    let arc = await this.constructInnerArc();\n    const listHandleName = 'list';\n    const particleHandleName = 'hostedParticle';\n    let particleView = views.get(particleHandleName);\n    let hostedParticle = null;\n    let otherMappedViews = [];\n    let otherConnections = [];\n    if (particleView) {\n      hostedParticle = await particleView.get();\n      if (hostedParticle) {\n        [otherMappedViews, otherConnections] =\n            await this._mapParticleConnections(\n                listHandleName, particleHandleName, hostedParticle, views, arc);\n      }\n    }\n    this.setState({\n      arc,\n      type: views.get(listHandleName).type,\n      hostedParticle,\n      otherMappedViews,\n      otherConnections\n    });\n\n    super.setViews(views);\n  }\n\n  async willReceiveProps(\n      {list},\n      {arc, type, hostedParticle, otherMappedViews, otherConnections}) {\n    if (list.length > 0) {\n      this.relevance = 0.1;\n    }\n\n    for (let [index, item] of list.entries()) {\n      if (this.handleIds[item.id]) {\n        let itemView = await this.handleIds[item.id];\n        itemView.set(item);\n        continue;\n      }\n\n      let itemViewPromise =\n          arc.createHandle(type.primitiveType(), 'item' + index);\n      this.handleIds[item.id] = itemViewPromise;\n\n      let itemView = await itemViewPromise;\n\n      if (!hostedParticle) {\n        // If we're muxing on behalf of an item with an embedded recipe, the\n        // hosted particle should be retrievable from the item itself. Else we\n        // just skip this item.\n        if (!item.renderParticleSpec) {\n          continue;\n        }\n        hostedParticle =\n            ParticleSpec.fromLiteral(JSON.parse(item.renderParticleSpec));\n        // Re-map compatible handles and compute the connections specific\n        // to this item's render particle.\n        const listHandleName = 'list';\n        const particleHandleName = 'renderParticle';\n        [otherMappedViews, otherConnections] =\n            await this._mapParticleConnections(\n                listHandleName,\n                particleHandleName,\n                hostedParticle,\n                this._views,\n                arc);\n      }\n      let hostedSlotName = [...hostedParticle.slots.keys()][0];\n      let slotName = [...this.spec.slots.values()][0].name;\n      let slotId = await arc.createSlot(\n          this, slotName, hostedParticle.name, hostedSlotName);\n\n      if (!slotId) {\n        continue;\n      }\n\n      this._itemSubIdByHostedSlotId.set(slotId, item.id);\n\n      try {\n        await arc.loadRecipe(\n            this.constructInnerRecipe(\n                hostedParticle,\n                item,\n                itemView,\n                {name: hostedSlotName, id: slotId},\n                {connections: otherConnections, views: otherMappedViews}),\n            this);\n        itemView.set(item);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  combineHostedModel(slotName, hostedSlotId, content) {\n    let subId = this._itemSubIdByHostedSlotId.get(hostedSlotId);\n    if (!subId) {\n      return;\n    }\n    let items = this._state.renderModel ? this._state.renderModel.items : [];\n    let listIndex = items.findIndex(item => item.subId == subId);\n    let item = Object.assign({}, content.model, {subId});\n    if (listIndex >= 0 && listIndex < items.length) {\n      items[listIndex] = item;\n    } else {\n      items.push(item);\n    }\n    this._setState({renderModel: {items}});\n  }\n\n  combineHostedTemplate(slotName, hostedSlotId, content) {\n    if (!this._state.template && !!content.template) {\n      let template = content.template;\n      // Replace hosted particle connection in template with the corresponding particle connection names.\n      // TODO: make this generic!\n      this._connByHostedConn.forEach((conn, hostedConn) => {\n        template = template.replace(\n            new RegExp(`{{${hostedConn}.description}}`, 'g'),\n            `{{${conn}.description}}`);\n      });\n      this._setState({template});\n    }\n  }\n\n  // Abstract\n  constructInnerRecipe(hostedParticle, item, itemView, slot, other) {\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/multiplexer-dom-particle.js\n// module id = 33\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport util from './util.js';\nimport TypeChecker from './type-checker.js';\n\nclass Handle {\n  constructor(recipe) {\n    assert(recipe);\n    this._recipe = recipe;\n    this._id = null;\n    this._localName = undefined;\n    this._tags = [];\n    this._type = undefined;\n    this._fate = null;\n    // TODO: replace originalFate and originalId with more generic mechanism for tracking\n    // how and from what the recipe was generated.\n    this._originalFate = null;\n    this._originalId = null;\n    this._connections = [];\n    this._mappedType = undefined;\n    this._storageKey = undefined;\n    this._pattern = undefined;\n  }\n\n  _copyInto(recipe) {\n    let handle = undefined;\n    if (this._id !== null && ['map', 'use', 'copy'].includes(this.fate))\n      handle = recipe.findHandle(this._id);\n\n    if (handle == undefined) {\n      handle = recipe.newHandle();\n      handle._id = this._id;\n      handle._tags = [...this._tags];\n      handle._type = this._type;\n      handle._fate = this._fate;\n      handle._originalFate = this._originalFate;\n      handle._originalId = this._originalId;\n      handle._mappedType = this._mappedType;\n      handle._storageKey = this._storageKey;\n\n      // the connections are re-established when Particles clone their\n      // attached HandleConnection objects.\n      handle._connections = [];\n      handle._pattern = this._pattern;\n    }\n    return handle;\n  }\n\n  _startNormalize() {\n    this._localName = null;\n    this._tags.sort();\n    // TODO: type?\n  }\n\n  _finishNormalize() {\n    for (let connection of this._connections) {\n      assert(Object.isFrozen(connection), `Handle connection '${connection.name}' is not frozen.`);\n    }\n    this._connections.sort(util.compareComparables);\n    Object.freeze(this);\n  }\n\n  _compareTo(other) {\n    let cmp;\n    if ((cmp = util.compareStrings(this._id, other._id)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this._localName, other._localName)) != 0) return cmp;\n    if ((cmp = util.compareArrays(this._tags, other._tags, util.compareStrings)) != 0) return cmp;\n    // TODO: type?\n    if ((cmp = util.compareStrings(this.fate, other.fate)) != 0) return cmp;\n    return 0;\n  }\n\n  // a resolved Handle has either an id or create=true\n  get fate() { return this._fate || '?'; }\n  set fate(fate) {\n    if (this._originalFate == null) {\n      this._originalFate = this._fate;\n    }\n    this._fate = fate;\n  }\n  get originalFate() { return this._originalFate || '?'; }\n  get originalId() { return this._originalId; }\n  get recipe() { return this._recipe; }\n  get tags() { return this._tags; } // only tags owned by the handle\n  set tags(tags) { this._tags = tags; }\n  get type() { return this._type; } // nullable\n  get id() { return this._id; }\n  set id(id) {\n    if (!this._originalId) {\n      this._originalId = this._id;\n    }\n    this._id = id;\n  }\n  mapToStorage(storage) {\n    this._id = storage.id;\n    this._type = undefined;\n    assert(storage.type == undefined || !(storage.type.hasVariableReference), `variable references shouldn't be part of handle types`);\n    this._mappedType = storage.type;\n    this._storageKey = storage.storageKey;\n  }\n  get localName() { return this._localName; }\n  set localName(name) { this._localName = name; }\n  get connections() { return this._connections; } // HandleConnection*\n  get storageKey() { return this._storageKey; }\n  set storageKey(key) { this._storageKey = key; }\n  get pattern() { return this._pattern; }\n  set pattern(pattern) { this._pattern = pattern; }\n\n  static effectiveType(handleType, connections) {\n    let typeSet = connections.filter(connection => connection.type != null).map(connection => ({type: connection.type, direction: connection.direction, connection}));\n    return TypeChecker.processTypeList(handleType, typeSet);\n  }\n\n  _isValid(options) {\n    let tags = new Set();\n    for (let connection of this._connections) {\n      // A remote handle cannot be connected to an output param.\n      if (this.fate == 'map' && ['out', 'inout'].includes(connection.direction)) {\n        if (options && options.errors) {\n          options.errors.set(this, `Invalid fate '${this.fate}' for handle '${this}'; it is used for '${connection.direction}' ${connection.particle.name}::${connection.name} connection`);\n        }\n        return false;\n      }\n      connection.tags.forEach(tag => tags.add(tag));\n    }\n    let type = Handle.effectiveType(this._mappedType, this._connections);\n    if (type) {\n      this._type = type;\n      this._tags.forEach(tag => tags.add(tag));\n      this._tags = [...tags];\n      return true;\n    }\n    if (options && options.errors) {\n      // TODO: pass options to TypeChecker.processTypeList for better error.\n      options.errors.set(this, `Type validations failed for handle '${this}'`);\n    }\n    return false;\n  }\n\n  isResolved(options) {\n    assert(Object.isFrozen(this));\n    if (!this._type) {\n      if (options) {\n        options.details = 'missing type';\n      }\n      return false;\n    }\n    if ((!this.type.isResolved() && this.fate !== 'create') || (!this.type.canEnsureResolved() && this.fate == 'create')) {\n      if (options) {\n        options.details = 'unresolved type';\n      }\n      return false;\n    }\n    switch (this.fate) {\n      case '?': {\n        if (options) {\n          options.details = 'missing fate';\n        }\n        return false;\n      }\n      case 'copy':\n      case 'map':\n      case 'use': {\n        if (options && this.id === null) {\n          options.details = 'missing id';\n        }\n        return this.id !== null;\n      }\n      case 'create':\n        return true;\n      default: {\n        if (options) {\n          options.details = `invalid fate ${this.fate}`;\n        }\n        assert(false, `Unexpected fate: ${this.fate}`);\n      }\n    }\n  }\n\n  toString(nameMap, options) {\n    // TODO: type? maybe output in a comment\n    let result = [];\n    result.push(this.fate);\n    if (this.id) {\n      result.push(`'${this.id}'`);\n    }\n    result.push(...this.tags);\n    result.push(`as ${(nameMap && nameMap.get(this)) || this.localName}`);\n    if (this.type) {\n      result.push('//');\n      result.push(this.type.resolvedType().toString());\n    }\n    if (options && options.showUnresolved) {\n      let options = {};\n      if (!this.isResolved(options)) {\n        result.push(` // unresolved handle: ${options.details}`);\n      }\n    }\n\n    return result.join(' ');\n  }\n}\n\nexport default Handle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/handle.js\n// module id = 34\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport util from './util.js';\n\nclass Search {\n  constructor(phrase, unresolvedTokens) {\n    assert(phrase);\n\n    this._phrase = '';\n    this._unresolvedTokens = [];\n    this._resolvedTokens = [];\n\n    this.appendPhrase(phrase, unresolvedTokens);\n  }\n  appendPhrase(phrase, unresolvedTokens) {\n    // concat phrase\n    if (this._phrase.length > 0) {\n      this._phrase = this.phrase.concat(' ');\n    }\n    this._phrase = this._phrase.concat(phrase);\n\n    // update tokens\n    let newTokens = phrase.toLowerCase().split(/[^a-z0-9]/g);\n    newTokens.forEach(t => {\n      if (!unresolvedTokens || unresolvedTokens.indexOf(t) >= 0) {\n        this._unresolvedTokens.push(t);\n      } else {\n        this._resolvedTokens.push(t);\n      }\n    });\n  }\n  get phrase() { return this._phrase; }\n  get unresolvedTokens() { return this._unresolvedTokens; }\n  get resolvedTokens() { return this._resolvedTokens; }\n  resolveToken(token) {\n    let index = this.unresolvedTokens.indexOf(token.toLowerCase());\n    assert(index >= 0, `Cannot resolved nonexistent token ${token}`);\n    this._unresolvedTokens.splice(index, 1);\n    this._resolvedTokens.push(token.toLowerCase());\n  }\n\n  isValid() {\n    return this._unresolvedTokens.length > 0 || this._resolvedTokens.length > 0;\n  }\n\n  isResolved() {\n    assert(Object.isFrozen(this));\n    // Recipe is considered resolved, if at least one of the search tokens was resolved.\n    // TODO: Unresolved tokens don't prevent the recipe from being resolved. For now...\n    return this._resolvedTokens.length > 0;\n  }\n\n  _normalize() {\n    this._unresolvedTokens.sort();\n    this._resolvedTokens.sort();\n\n    Object.freeze(this);\n  }\n\n  _copyInto(recipe) {\n    if (recipe.search) {\n      recipe.search.appendPhrase(this.phrase, this.unresolvedTokens);\n    } else {\n      recipe.search = new Search(this.phrase, this.unresolvedTokens);\n      assert(recipe.search.resolvedTokens.length == this.resolvedTokens.length);\n    }\n    assert(this.resolvedTokens.every(rt => recipe.search.resolvedTokens.indexOf(rt) >= 0) &&\n           this.unresolvedTokens.every(rt => recipe.search.unresolvedTokens.indexOf(rt) >= 0));\n    return recipe.search;\n  }\n\n  toString(options) {\n    let result = [];\n    result.push(`search \\`${this.phrase}\\``);\n\n    let tokenStr = [];\n    tokenStr.push('  tokens');\n    if (this.unresolvedTokens.length > 0) {\n      tokenStr.push(this.unresolvedTokens.map(t => `\\`${t}\\``).join(' '));\n    }\n    if (this.resolvedTokens.length > 0) {\n      tokenStr.push(`// ${this.resolvedTokens.map(t => `\\`${t}\\``).join(' ')}`);\n    }\n    if (options && options.showUnresolved) {\n      if (this.unresolvedTokens.length > 0) {\n        tokenStr.push('// unresolved search tokens');\n      }\n    }\n    result.push(tokenStr.join(' '));\n\n    return result.join('\\n');\n  }\n}\n\nexport default Search;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/search.js\n// module id = 35\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\nimport Symbols from './symbols.js';\nimport Entity from './entity.js';\nimport Schema from './schema.js';\nimport Type from './type.js';\nimport Relation from './relation.js';\n\nfunction testEntityClass(type) {\n  return new Schema({\n    names: [type],\n    fields: {\n      id: 'Number',\n      value: 'Text',\n    },\n  }).entityClass();\n}\n\nlet BasicEntity = testEntityClass('BasicEntity');\n\nexport default {\n  Entity,\n  Relation,\n  testing: {\n    testEntityClass,\n  },\n  internals: {\n    identifier: Symbols.identifier,\n    Type,\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/runtime.js\n// module id = 36\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\n\nexport default class Slot {\n  constructor(consumeConn, arc) {\n    assert(consumeConn);\n    assert(arc);\n    this._consumeConn = consumeConn;\n    this._arc = arc;\n    this._context = null;\n    this.startRenderCallback = null;\n    this.stopRenderCallback = null;\n    this._hostedSlotById = new Map();\n  }\n  get consumeConn() { return this._consumeConn; }\n  get arc() { return this._arc; }\n  getContext() { return this._context; }\n  setContext(context) { this._context = context; }\n  isSameContext(context) { return this._context == context; }\n\n  updateContext(context) {\n    // do nothing, if context unchanged.\n    if ((!this.getContext() && !context) ||\n        (this.getContext() && context && this.isSameContext(context))) {\n      return;\n    }\n\n    // update the context;\n    let wasNull = !this.getContext();\n    this.setContext(context);\n    if (this.getContext()) {\n      if (wasNull) {\n        this.startRender();\n      }\n    } else {\n      this.stopRender();\n    }\n  }\n  startRender() {\n    if (this.startRenderCallback) {\n      const slotName = this.consumeConn.name;\n      const particle = this.consumeConn.particle;\n      const context = this.getContext();\n      if (context.updateParticleName) {\n        context.updateParticleName(slotName, particle.name);\n      }\n      const contentTypes = this.constructRenderRequest();\n      this.startRenderCallback({particle, slotName, contentTypes});\n\n      for (let hostedSlot of this._hostedSlotById.values()) {\n        if (hostedSlot.particle) {\n          // Note: hosted particle may still not be set, if the hosted slot was already created, but the inner recipe wasn't instantiate yet.\n          this.startRenderCallback({particle: hostedSlot.particle, slotName: hostedSlot.slotName, contentTypes});\n        }\n      }\n    }\n  }\n\n  stopRender() {\n    if (this.stopRenderCallback) {\n      this.stopRenderCallback({particle: this.consumeConn.particle, slotName: this.consumeConn.name});\n\n      for (let hostedSlot of this._hostedSlotById.values()) {\n        this.stopRenderCallback({particle: hostedSlot.particle, slotName: hostedSlot.slotName});\n      }\n    }\n  }\n\n  async populateHandleDescriptions() {\n    let descriptions = {};\n    await Promise.all(Object.values(this.consumeConn.particle.connections).map(async handleConn => {\n      if (handleConn.handle) {\n        descriptions[`${handleConn.name}.description`] = (await this._arc.description.getHandleDescription(handleConn.handle)).toString();\n      }\n    }));\n    return descriptions;\n  }\n\n  addHostedSlot(hostedSlotId, hostedParticleName, hostedSlotName) {\n    assert(hostedSlotId, `Hosted slot ID must be provided`);\n    assert(!this._hostedSlotById.has(hostedSlotId), `Hosted slot ${hostedSlotId} already exists`);\n    this._hostedSlotById.set(hostedSlotId, {slotId: hostedSlotId, particleName: hostedParticleName, slotName: hostedSlotName});\n    return hostedSlotId;\n  }\n  getHostedSlot(hostedSlotId) {\n    return this._hostedSlotById.get(hostedSlotId);\n  }\n  findHostedSlot(hostedParticle, hostedSlotName) {\n    for (let hostedSlot of this._hostedSlotById.values()) {\n      if (hostedSlot.particle == hostedParticle && hostedSlot.slotName == hostedSlotName) {\n        return hostedSlot;\n      }\n    }\n  }\n  initHostedSlot(hostedSlotId, hostedParticle) {\n    let hostedSlot = this.getHostedSlot(hostedSlotId);\n    assert(hostedSlot, `Hosted slot ${hostedSlotId} doesn't exist`);\n    assert(hostedSlot.particleName == hostedParticle.name,\n           `Unexpected particle name ${hostedParticle.name} for slot ${hostedSlotId}; expected: ${hostedSlot.particleName}`);\n    hostedSlot.particle = hostedParticle;\n    if (this.getContext() && this.startRenderCallback) {\n      this.startRenderCallback({particle: hostedSlot.particle, slotName: hostedSlot.slotName, contentTypes: this.constructRenderRequest()});\n    }\n  }\n\n  // Abstract methods.\n  async setContent(content, handler) {}\n  getInnerContext(slotName) {}\n  constructRenderRequest() {}\n  static findRootSlots(context) { }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/slot.js\n// module id = 37\n// module chunks = 0","// @\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nexport default class KeyBase {\n  childKeyForHandle(id) {\n    throw 'NotImplemented';\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/storage/key-base.js\n// module id = 38\n// module chunks = 0","// @\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport tracing from '../../tracelib/trace.js';\nimport util from '../recipe/util.js';\n\nexport default class StorageProviderBase {\n  constructor(type, arcId, name, id, key) {\n    assert(id, 'id must be provided when constructing StorageProviders');\n    assert(!type.hasUnresolvedVariable, 'Storage types must be concrete');\n    let trace = tracing.start({cat: 'handle', name: 'StorageProviderBase::constructor', args: {type: type.key, name: name}});\n    this._type = type;\n    this._arcId = arcId;\n    this._listeners = new Map();\n    this.name = name;\n    this._version = 0;\n    this.id = id;\n    this.source = null;\n    this._storageKey = key;\n    this._nextLocalID = 0;\n    trace.end();\n  }\n\n  get storageKey() {\n    return this._storageKey;\n  }\n\n  generateID() {\n    return `${this.id}:${this._nextLocalID++}`;\n  }\n\n  generateIDComponents() {\n    return {base: this.id, component: () => this._nextLocalID++};\n  }\n\n  get type() {\n    return this._type;\n  }\n  // TODO: add 'once' which returns a promise.\n  on(kind, callback, target) {\n    assert(target !== undefined, 'must provide a target to register a storage event handler');\n    let scheduler = target._scheduler;\n    assert(scheduler !== undefined, 'must provider a scheduler to register a storage event handler');\n    let listeners = this._listeners.get(kind) || new Map();\n    listeners.set(callback, {version: -Infinity, target, scheduler});\n    this._listeners.set(kind, listeners);\n  }\n\n  _fire(kind, details) {\n    let listenerMap = this._listeners.get(kind);\n    if (!listenerMap || listenerMap.size == 0)\n      return;\n\n    let callTrace = tracing.start({cat: 'handle', name: 'StorageProviderBase::_fire', args: {kind, type: this._type.key,\n        name: this.name, listeners: listenerMap.size}});\n\n    // TODO: wire up a target (particle)\n    let eventRecords = new Map();\n\n    for (let [callback, registration] of listenerMap.entries()) {\n      let target = registration.target;\n      if (!eventRecords.has(registration.scheduler))\n        eventRecords.set(registration.scheduler, []);\n      eventRecords.get(registration.scheduler).push({target, callback, kind, details});\n    }\n    eventRecords.forEach((records, scheduler) => scheduler.enqueue(this, records));\n    callTrace.end();\n  }\n\n  _compareTo(other) {\n    let cmp;\n    if ((cmp = util.compareStrings(this.name, other.name)) != 0) return cmp;\n    if ((cmp = util.compareNumbers(this._version, other._version)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this.source, other.source)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this.id, other.id)) != 0) return cmp;\n    return 0;\n  }\n\n  toString(handleTags) {\n    let results = [];\n    let handleStr = [];\n    handleStr.push(`view`);\n    if (this.name) {\n      handleStr.push(`${this.name}`);\n    }\n    handleStr.push(`of ${this.type.toString()}`);\n    if (this.id) {\n      handleStr.push(`'${this.id}'`);\n    }\n    if (handleTags && handleTags.length) {\n      handleStr.push(`${[...handleTags].join(' ')}`);\n    }\n    if (this.source) {\n      handleStr.push(`in '${this.source}'`);\n    }\n    results.push(handleStr.join(' '));\n    if (this.description)\n      results.push(`  description \\`${this.description}\\``);\n    return results.join('\\n');\n  }\n\n  get apiChannelMappingId() {\n    return this.id;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/storage/storage-provider-base.js\n// module id = 39\n// module chunks = 0","// @\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport InMemoryStorage from './in-memory-storage.js';\nimport FirebaseStorage from './firebase-storage.js';\n\nexport default class StorageProviderFactory {\n  constructor(arcId) {\n    this._arcId = arcId;\n    this._storageInstances = {'in-memory': new InMemoryStorage(arcId), 'firebase': new FirebaseStorage(arcId)};\n  }\n\n  _storageForKey(key) {\n    let protocol = key.split(':')[0];\n    return this._storageInstances[protocol];\n  }\n\n  async construct(id, type, keyFragment) {\n    return this._storageForKey(keyFragment).construct(id, type, keyFragment);\n  }\n\n  async connect(id, type, key) {\n    return this._storageForKey(key).connect(id, type, key);\n  }\n\n  parseStringAsKey(string) {\n    return this._storageForKey(string).parseStringAsKey(string);\n  }\n\n  newKey(id, associatedKeyFragment) {\n\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/storage/storage-provider-factory.js\n// module id = 40\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\n\nexport default class AddUseHandles extends Strategy {\n  // TODO: move generation to use an async generator.\n  async generate(inputParams) {\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onRecipe(recipe) {\n        // Don't add use handles while there are outstanding constraints\n        if (recipe.connectionConstraints.length > 0)\n          return;\n        // Don't add use handles to a recipe with free handles\n        let freeHandles = recipe.handles.filter(handle => handle.connections.length == 0);\n        if (freeHandles.length > 0)\n          return;\n\n        // TODO: \"description\" handles are always created, and in the future they need to be \"optional\" (blocked by optional handles\n        // not being properly supported in arc instantiation). For now just hardcode skiping them.\n        let disconnectedConnections = recipe.handleConnections.filter(hc => hc.handle == null && !hc.isOptional && hc.name != 'descriptions');\n        if (disconnectedConnections.length == 0) {\n          return;\n        }\n\n        return recipe => {\n          disconnectedConnections.forEach(hc => {\n            let clonedHC = recipe.updateToClone({hc}).hc;\n            let handle = recipe.newHandle();\n            handle.fate = 'use';\n            clonedHC.connectToHandle(handle);\n          });\n          return 0;\n        };\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/add-use-handles.js\n// module id = 41\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport RecipeWalker from '../recipe/walker.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeUtil from '../recipe/recipe-util.js';\nimport HandleMapperBase from './handle-mapper-base.js';\n\nimport assert from '../../platform/assert-web.js';\n\nexport default class AssignHandlesByTagAndType extends HandleMapperBase {\n  constructor(arc) {\n    super();\n    this.arc = arc;\n    this.fate = 'use';\n  }\n\n  getMappableHandles(type, tags, counts) {\n    // We can use a handle that has a subtype only when all of the connections\n    // are inputs.\n    let subtype = counts.out == 0;\n    if (tags.length > 0) {\n      return this.arc.findHandlesByType(type, {tags, subtype});\n    } else {\n      return this.arc.findHandlesByType(type);\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/assign-handles-by-tag-and-type.js\n// module id = 42\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport RecipeWalker from '../recipe/walker.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeUtil from '../recipe/recipe-util.js';\nimport HandleMapperBase from './handle-mapper-base.js';\nimport Schema from '../schema.js';\n\nimport assert from '../../platform/assert-web.js';\n\nexport default class AssignRemoteHandles extends HandleMapperBase {\n  constructor(arc) {\n    super();\n    this._arc = arc;\n    this.fate = 'map';\n  }\n\n  getMappableHandles(type, tags=[]) {\n    return this._arc.context.findStorageByType(type, {tags, subtype: true});\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/assign-remote-handles.js\n// module id = 43\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\nimport RecipeUtil from '../recipe/recipe-util.js';\n\nexport default class ConvertConstraintsToConnections extends Strategy {\n  constructor(arc) {\n    super();\n    this.affordance = arc.pec.slotComposer ? arc.pec.slotComposer.affordance : null;\n  }\n  async generate(inputParams) {\n    let affordance = this.affordance;\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onRecipe(recipe) {\n        let particles = new Set();\n        let handles = new Set();\n        let map = {};\n        let particlesByName = {};\n        let handleCount = 0;\n        if (recipe.connectionConstraints.length == 0) {\n          return;\n        }\n\n        for (let constraint of recipe.connectionConstraints) {\n          if (affordance && (!constraint.fromParticle.matchAffordance(affordance) || !constraint.toParticle.matchAffordance(affordance))) {\n            return;\n          }\n          particles.add(constraint.fromParticle.name);\n          if (map[constraint.fromParticle.name] == undefined) {\n            map[constraint.fromParticle.name] = {};\n            particlesByName[constraint.fromParticle.name] = constraint.fromParticle;\n          }\n          particles.add(constraint.toParticle.name);\n          if (map[constraint.toParticle.name] == undefined) {\n            map[constraint.toParticle.name] = {};\n            particlesByName[constraint.toParticle.name] = constraint.toParticle;\n          }\n          let handle = map[constraint.fromParticle.name][constraint.fromConnection] || map[constraint.toParticle.name][constraint.toConnection];\n          if (handle == undefined) {\n            handle = 'v' + handleCount++;\n            handles.add(handle);\n          }\n          map[constraint.fromParticle.name][constraint.fromConnection] = handle;\n          map[constraint.toParticle.name][constraint.toConnection] = handle;\n        }\n        let shape = RecipeUtil.makeShape([...particles.values()], [...handles.values()], map);\n        let results = RecipeUtil.find(recipe, shape);\n\n        return results.filter(match => {\n          // Ensure that every handle is either matched, or an input of at least one\n          // connected particle in the constraints.\n          let resolvedHandles = {};\n          for (let particle in map) {\n            for (let connection in map[particle]) {\n              let handle = map[particle][connection];\n              if (resolvedHandles[handle]) {\n                continue;\n              }\n              if (match.match[handle]) {\n                resolvedHandles[handle] = true;\n              } else {\n                let spec = particlesByName[particle];\n                resolvedHandles[handle] = spec.isOutput(connection);\n              }\n            }\n          }\n          return Object.values(resolvedHandles).every(value => value);\n        }).map(match => {\n          return (recipe) => {\n            let score = recipe.connectionConstraints.length + match.score;\n            let recipeMap = recipe.updateToClone(match.match);\n            for (let particle in map) {\n              for (let connection in map[particle]) {\n                let handle = map[particle][connection];\n                let recipeParticle = recipeMap[particle];\n                if (recipeParticle == null) {\n                  recipeParticle = recipe.newParticle(particle);\n                  recipeParticle.spec = particlesByName[particle];\n                  recipeMap[particle] = recipeParticle;\n                }\n                let recipeHandleConnection = recipeParticle.connections[connection];\n                if (recipeHandleConnection == undefined)\n                  recipeHandleConnection = recipeParticle.addConnectionName(connection);\n                let recipeHandle = recipeMap[handle];\n                if (recipeHandle == null) {\n                  recipeHandle = recipe.newHandle();\n                  recipeHandle.fate = 'create';\n                  recipeMap[handle] = recipeHandle;\n                }\n                if (recipeHandleConnection.handle == null)\n                  recipeHandleConnection.connectToHandle(recipeHandle);\n              }\n            }\n            recipe.clearConnectionConstraints();\n            return score;\n          };\n        });\n      }\n    }(RecipeWalker.Independent), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/convert-constraints-to-connections.js\n// module id = 44\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport RecipeWalker from '../recipe/walker.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeUtil from '../recipe/recipe-util.js';\nimport HandleMapperBase from './handle-mapper-base.js';\nimport Schema from '../schema.js';\n\nimport assert from '../../platform/assert-web.js';\n\nexport default class CopyRemoteHandles extends HandleMapperBase {\n  constructor(arc) {\n    super();\n    this._arc = arc;\n    this.fate = 'copy';\n  }\n\n  getMappableHandles(type, tags=[]) {\n    return this._arc.context.findStorageByType(type, {tags, subtype: true});\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/copy-remote-handles.js\n// module id = 45\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\n\nexport default class CreateDescriptionHandle extends Strategy {\n  async generate(inputParams) {\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onHandleConnection(recipe, handleConnection) {\n        if (handleConnection.handle)\n          return;\n        if (handleConnection.name != 'descriptions')\n          return;\n\n        return (recipe, handleConnection) => {\n          let handle = recipe.newHandle();\n          handle.fate = 'create';\n          handleConnection.connectToHandle(handle);\n          return 1;\n        };\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/create-description-handle.js\n// module id = 46\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeUtil from '../recipe/recipe-util.js';\nimport RecipeWalker from '../recipe/walker.js';\n\nexport default class CreateHandles extends Strategy {\n  // TODO: move generation to use an async generator.\n  async generate(inputParams) {\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onHandle(recipe, handle) {\n        let counts = RecipeUtil.directionCounts(handle);\n\n        // Don't make a 'create' handle, unless there is someone reading,\n        // someone writing and at least 2 particles invloved.\n        if (counts.in == 0 || counts.out == 0\n            // TODO: Allow checking number of particles without touching privates.\n            || new Set(handle.connections.map(hc => hc._particle)).size <= 1) {\n          return;\n        }\n\n        if (!handle.id && handle.fate == '?') {\n          return (recipe, handle) => {handle.fate = 'create'; return 1;};\n        }\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/create-handles.js\n// module id = 47\n// module chunks = 0","\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\n\nexport default class FallbackFate extends Strategy {\n  getResults(inputParams) {\n    assert(inputParams);\n    let generated = inputParams.generated.filter(result => !result.result.isResolved());\n    let terminal = inputParams.terminal;\n    return [...generated, ...terminal];\n  }\n\n  async generate(inputParams) {\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onHandle(recipe, handle) {\n        // Only apply this strategy only to user query based recipes with resolved tokens.\n        if (!recipe.search || (recipe.search.resolvedTokens.length == 0)) {\n          return;\n        }\n\n        // Only apply to handles whose fate is set, but wasn't explicitly defined in the recipe.\n        if (handle.isResolved() || handle.fate == '?' || handle.originalFate != '?') {\n          return;\n        }\n\n        let hasOutConns = handle.connections.some(hc => hc.isOutput);\n        let newFate = hasOutConns ? 'copy' : 'map';\n        if (handle.fate == newFate) {\n          return;\n        }\n\n        return (recipe, clonedHandle) => {\n          clonedHandle.fate = newFate;\n          return 0;\n        };\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/fallback-fate.js\n// module id = 48\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\n\nexport default class GroupHandleConnections extends Strategy {\n  constructor() {\n    super();\n\n    this._walker = new class extends RecipeWalker {\n      onRecipe(recipe) {\n        // Only apply this strategy if ALL handle connections are named and have types.\n        if (recipe.handleConnections.find(hc => !hc.type || !hc.name || hc.isOptional)) {\n          return;\n        }\n        // Find all unique types used in the recipe that have unbound handle connections.\n        let types = new Set();\n        recipe.handleConnections.forEach(hc => {\n          if (!hc.isOptional && !hc.handle && !Array.from(types).find(t => t.equals(hc.type))) {\n            types.add(hc.type);\n          }\n        });\n\n        let groupsByType = new Map();\n        types.forEach(type => {\n          // Find the particle with the largest number of unbound connections of the same type.\n          let countConnectionsByType = (connections) => Object.values(connections).filter(conn => {\n            return !conn.isOptional && !conn.handle && type.equals(conn.type);\n          }).length;\n          let sortedParticles = [...recipe.particles].sort((p1, p2) => {\n            return countConnectionsByType(p2.connections) - countConnectionsByType(p1.connections);\n          }).filter(p => countConnectionsByType(p.connections) > 0);\n          assert(sortedParticles.length > 0);\n\n          // Handle connections of the same particle cannot be bound to the same handle. Iterate on handle connections of the particle\n          // with the most connections of the given type, and group each of them with same typed handle connections of other particles.\n          let particleWithMostConnectionsOfType = sortedParticles[0];\n          let groups = new Map();\n          let allTypeHandleConnections = recipe.handleConnections.filter(c => {\n            return !c.isOptional && !c.handle && type.equals(c.type) && (c.particle != particleWithMostConnectionsOfType);\n          });\n\n          let iteration = 0;\n          while (allTypeHandleConnections.length > 0) {\n            Object.values(particleWithMostConnectionsOfType.connections).forEach(handleConnection => {\n              if (!type.equals(handleConnection.type)) {\n                return;\n              }\n              if (!groups.has(handleConnection)) {\n                groups.set(handleConnection, []);\n              }\n              let group = groups.get(handleConnection);\n\n              // filter all connections where this particle is already in a group.\n              let possibleConnections = allTypeHandleConnections.filter(c => !group.find(gc => gc.particle == c.particle));\n              let selectedConn = possibleConnections.find(c => handleConnection.isInput != c.isInput || handleConnection.isOutput != c.isOutput);\n              // TODO: consider tags.\n              // TODO: Slots handle restrictions should also be accounted for when grouping.\n              if (!selectedConn) {\n                if (possibleConnections.length == 0 || iteration == 0) {\n                  // During first iteration only bind opposite direction connections (\"in\" with \"out\" and vice versa)\n                  // to ensure each group has both direction connections as much as possible.\n                  return;\n                }\n                selectedConn = possibleConnections[0];\n              }\n              group.push(selectedConn);\n              allTypeHandleConnections = allTypeHandleConnections.filter(c => c != selectedConn);\n            });\n            iteration++;\n          }\n          // Remove groups where no connections were bound together.\n          groups.forEach((otherConns, conn) => {\n            if (otherConns.length == 0) {\n              groups.delete(conn);\n            } else {\n              otherConns.push(conn);\n            }\n          });\n\n          if (groups.size !== 0) {\n            groupsByType.set(type, groups);\n          }\n        });\n\n        if (groupsByType.size > 0) return recipe => {\n          groupsByType.forEach((groups, type) => {\n            groups.forEach(group => {\n              let recipeHandle = recipe.newHandle();\n              group.forEach(conn => {\n                let cloneConn = recipe.updateToClone({conn}).conn;\n                cloneConn.connectToHandle(recipeHandle);\n              });\n            });\n          });\n          // TODO: score!\n        };\n      }\n    }(RecipeWalker.Permuted);\n  }\n  get walker() {\n    return this._walker;\n  }\n  async generate(inputParams) {\n    return Recipe.over(this.getResults(inputParams), this.walker, this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/group-handle-connections.js\n// module id = 49\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\n\nexport default class InitPopulation extends Strategy {\n  constructor(arc) {\n    super();\n    this._recipes = [];\n    for (let recipe of (arc.context.recipes || [])) {\n      // Filter out recipes containing particles that don't support the current affordance.\n      if (arc.pec.slotComposer) {\n        if (recipe.particles.find(p => p.spec && !p.spec.matchAffordance(arc.pec.slotComposer.affordance)) !== undefined) {\n          continue;\n        }\n      }\n      recipe = recipe.clone();\n      let options = {errors: new Map()};\n      if (!recipe.normalize(options)) {\n        console.warn(`could not normalize a context recipe: ${[...options.errors.values()].join('\\n')}.\\n${recipe.toString()}`);\n      } else {\n        this._recipes.push(recipe);\n      }\n    }\n    this._loadedParticles = new Set(arc.loadedParticles().map(spec => spec.implFile));\n  }\n  async generate({generation}) {\n    if (generation != 0) {\n      return [];\n    }\n    return this._recipes.map(recipe => ({\n      result: recipe,\n      score: 1 - recipe.particles.filter(particle => particle.spec && this._loadedParticles.has(particle.spec.implFile)).length,\n      derivation: [{strategy: this, parent: undefined}],\n      hash: recipe.digest(),\n      valid: Object.isFrozen(recipe),\n    }));\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/init-population.js\n// module id = 50\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport assert from '../../platform/assert-web.js';\n\nexport default class InitSearch extends Strategy {\n  constructor(arc) {\n    super();\n    // TODO: Figure out where this should really come from.\n    this._search = arc.search;\n  }\n  async generate({generation}) {\n    if (this._search == null || generation != 0) {\n      return [];\n    }\n\n    let recipe = new Recipe();\n    recipe.setSearchPhrase(this._search);\n    assert(recipe.normalize());\n    assert(!recipe.isResolved());\n\n    return [{\n      result: recipe,\n      score: 0,\n      derivation: [{strategy: this, parent: undefined}],\n      hash: recipe.digest(),\n    }];\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/init-search.js\n// module id = 51\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport RecipeWalker from '../recipe/walker.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeUtil from '../recipe/recipe-util.js';\nimport assert from '../../platform/assert-web.js';\n\n/*\n * Match free handles (i.e. handles that aren't connected to any connections)\n * to connections.\n */\nexport default class MatchFreeHandlesToConnections extends Strategy {\n  async generate(inputParams) {\n    let self = this;\n\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onHandle(recipe, handle) {\n        if (handle.connections.length > 0)\n          return;\n\n        let matchingConnections = recipe.handleConnections.filter(connection => connection.handle == undefined && connection.name !== 'descriptions');\n\n        return matchingConnections.map(connection => {\n          return (recipe, handle) => {\n            let newConnection = recipe.updateToClone({connection}).connection;\n            newConnection.connectToHandle(handle);\n            return 1;\n          };\n        });\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/match-free-handles-to-connections.js\n// module id = 52\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\n\nexport default class MatchParticleByVerb extends Strategy {\n  constructor(arc) {\n    super();\n    this._arc = arc;\n  }\n\n  async generate(inputParams) {\n    let arc = this._arc;\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onParticle(recipe, particle) {\n        if (particle.name) {\n          // Particle already has explicit name.\n          return;\n        }\n\n        let particleSpecs = arc.context.findParticlesByVerb(particle.primaryVerb)\n            .filter(spec => !arc.pec.slotComposer || spec.matchAffordance(arc.pec.slotComposer.affordance));\n\n        return particleSpecs.map(spec => {\n          return (recipe, particle) => {\n            let score = 1;\n\n            particle.name = spec.name;\n            particle.spec = spec;\n\n            return score;\n          };\n        });\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/match-particle-by-verb.js\n// module id = 53\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\nimport Handle from '../recipe/handle.js';\nimport assert from '../../platform/assert-web.js';\n\n// This strategy substitutes 'particle can verb' declarations with recipes, \n// according to the following conditions:\n// 1) the recipe is named by the verb described in the particle\n// 2) the recipe has the slot pattern (if any) owned by the particle\n//\n// The strategy also reconnects any slots that were connected to the \n// particle, so that the substituted recipe fully takes the particle's place. \n//\n// Note that the recipe may have the slot pattern multiple times over, but\n// this strategy currently only connects the first instance of the pattern up\n// if there are multiple instances.\nexport default class MatchRecipeByVerb extends Strategy {\n  constructor(arc) {\n    super();\n    this._arc = arc;\n  }\n\n  async generate(inputParams) {\n    let arc = this._arc;\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onParticle(recipe, particle) {\n        if (particle.name) {\n          // Particle already has explicit name.\n          return;\n        }\n\n        let recipes = arc.context.findRecipesByVerb(particle.primaryVerb);\n\n        // Extract slot information from recipe. This is extracted in the form:\n        // {consume-slot-name: targetSlot: <slot>, providedSlots: {provide-slot-name: <slot>}}\n        // \n        // Note that slots are only included if connected to other components of the recipe - e.g.\n        // the target slot has a source connection. \n        let slotConstraints = {};\n        for (let consumeSlot of Object.values(particle.consumedSlotConnections)) {\n          let targetSlot = consumeSlot.targetSlot && consumeSlot.targetSlot.sourceConnection ? consumeSlot.targetSlot : null;\n          slotConstraints[consumeSlot.name] = {targetSlot, providedSlots: {}};\n          for (let providedSlot of Object.keys(consumeSlot.providedSlots)) {\n            let sourceSlot = consumeSlot.providedSlots[providedSlot].consumeConnections.length > 0 ? consumeSlot.providedSlots[providedSlot] : null;\n            slotConstraints[consumeSlot.name].providedSlots[providedSlot] = sourceSlot;\n          }\n        }\n\n        let handleConstraints = {named: {}, unnamed: []};\n        for (let handleConnection of Object.values(particle.connections)) {\n          handleConstraints.named[handleConnection.name] = {direction: handleConnection.direction, handle: handleConnection.handle};\n        }\n        for (let unnamedConnection of particle.unnamedConnections) {\n          handleConstraints.unnamed.push({direction: unnamedConnection.direction, handle: unnamedConnection.handle});\n        }\n\n        recipes = recipes.filter(recipe => MatchRecipeByVerb.satisfiesSlotConstraints(recipe, slotConstraints))\n                         .filter(recipe => MatchRecipeByVerb.satisfiesHandleConstraints(recipe, handleConstraints));\n\n        return recipes.map(recipe => {\n          return (outputRecipe, particleForReplacing) => {\n            let {handles, particles, slots} = recipe.mergeInto(outputRecipe);\n\n            particleForReplacing.remove();\n\n\n            for (let consumeSlot in slotConstraints) {\n              if (slotConstraints[consumeSlot].targetSlot || Object.values(slotConstraints[consumeSlot].providedSlots).filter(a => a != null).length > 0) {\n                let slotMapped = false;                \n                for (let particle of particles) {\n                  if (MatchRecipeByVerb.slotsMatchConstraint(particle.consumedSlotConnections, consumeSlot, slotConstraints[consumeSlot].providedSlots)) {\n                    if (slotConstraints[consumeSlot].targetSlot) {\n                      let {mappedSlot} = outputRecipe.updateToClone({mappedSlot: slotConstraints[consumeSlot].targetSlot});\n                      particle.consumedSlotConnections[consumeSlot]._targetSlot = mappedSlot;\n                      mappedSlot._consumerConnections.push(particle.consumedSlotConnections[consumeSlot]); \n                    }\n                    for (let slotName in slotConstraints[consumeSlot].providedSlots) {\n                      let slot = slotConstraints[consumeSlot].providedSlots[slotName];\n                      if (slot == null)\n                        continue;\n                      let {mappedSlot} = outputRecipe.updateToClone({mappedSlot: slot});\n                      let oldSlot = particle.consumedSlotConnections[consumeSlot].providedSlots[slotName];\n                      oldSlot.remove();\n                      particle.consumedSlotConnections[consumeSlot].providedSlots[slotName] = mappedSlot;\n                      mappedSlot._sourceConnection = particle.consumedSlotConnections[consumeSlot];\n                    }\n                    slotMapped = true;\n                    break;\n                  }\n                }\n                assert(slotMapped);\n              }\n            }\n\n            function tryApplyHandleConstraint(name, connection, constraint, handle) {\n              if (connection.handle != null)\n                return false;\n              if (!MatchRecipeByVerb.connectionMatchesConstraint(connection, constraint))\n                return false;\n              for (let i = 0; i < handle.connections.length; i++) {\n                let candidate = handle.connections[i];\n                if (candidate.particle == particleForReplacing && candidate.name == name) {\n                  connection._handle = handle;\n                  handle.connections[i] = connection;\n                  return true;\n                }              \n              }\n              return false;\n            }\n\n            function applyHandleConstraint(name, constraint, handle) {\n              let {mappedHandle} = outputRecipe.updateToClone({mappedHandle: handle});\n              for (let particle of particles) {\n                if (name) {\n                  if (tryApplyHandleConstraint(name, particle.connections[name], constraint, mappedHandle))\n                    return true;\n                } else {\n                  for (let connection of Object.values(particle.connections)) {\n                    if (tryApplyHandleConstraint(name, connection, constraint, mappedHandle))\n                      return true;\n                  }\n                }\n              }\n              return false;\n            } \n\n            for (let name in handleConstraints.named) {\n              if (handleConstraints.named[name].handle)\n                assert(applyHandleConstraint(name, handleConstraints.named[name], handleConstraints.named[name].handle));\n            }\n\n            for (let connection of handleConstraints.unnamed) {\n              if (connection.handle)\n                assert(applyHandleConstraint(null, connection, connection.handle));\n            }\n\n            return 1;\n          };\n        });\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n\n  static satisfiesHandleConstraints(recipe, handleConstraints) {\n    for (let handleName in handleConstraints.named)\n      if (!MatchRecipeByVerb.satisfiesHandleConnection(recipe, handleName, handleConstraints.named[handleName]))\n        return false;\n    for (let handleData of handleConstraints.unnamed) {\n      if (!MatchRecipeByVerb.satisfiesUnnamedHandleConnection(recipe, handleData))\n        return false;\n    }\n    return true;\n  }\n\n  static satisfiesUnnamedHandleConnection(recipe, handleData) {\n    // refuse to match unnamed handle connections unless some type information is present.\n    if (!handleData.handle)\n      return false;\n    for (let particle of recipe.particles) {\n      for (let connection of Object.values(particle.connections)) {\n        if (MatchRecipeByVerb.connectionMatchesConstraint(connection, handleData))\n          return true;\n      }\n    }\n    return false;\n  }\n\n  static satisfiesHandleConnection(recipe, handleName, handleData) {\n    for (let particle of recipe.particles) {\n      if (particle.connections[handleName]) {\n        if (MatchRecipeByVerb.connectionMatchesConstraint(particle.connections[handleName], handleData))\n          return true;\n      }\n    }\n    return false;\n  }\n\n  static connectionMatchesConstraint(connection, handleData) {\n    if (connection.direction !== handleData.direction)\n      return false;\n    if (!handleData.handle)\n      return true;\n    return Handle.effectiveType(handleData.handle._mappedType, handleData.handle.connections.concat(connection)) != null;\n  }\n\n  static satisfiesSlotConstraints(recipe, slotConstraints) {\n    for (let slotName in slotConstraints)\n      if (!MatchRecipeByVerb.satisfiesSlotConnection(recipe, slotName, slotConstraints[slotName]))\n        return false;\n    return true;\n  }\n\n  static satisfiesSlotConnection(recipe, slotName, constraints) {\n    for (let particle of recipe.particles) {\n      if (MatchRecipeByVerb.slotsMatchConstraint(particle.consumedSlotConnections, slotName, constraints))\n        return true;\n    }\n    return false;\n  }\n\n  static slotsMatchConstraint(connections, name, constraints) {\n    if (connections[name] == null)\n      return false;\n    if (connections[name]._targetSlot != null && constraints.targetSlot != null)\n      return false;\n    for (let provideName in constraints.providedSlots)\n      if (connections[name].providedSlots[provideName] == null)\n        return false;\n    return true;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/match-recipe-by-verb.js\n// module id = 54\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\n\nexport default class NameUnnamedConnections extends Strategy {\n  async generate(inputParams) {\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onHandleConnection(recipe, handleConnection) {\n        if (handleConnection.name)\n          return; // it is already named.\n\n        if (!handleConnection.particle.spec)\n          return; // the particle doesn't have spec yet.\n\n        let possibleSpecConns = handleConnection.particle.spec.connections.filter(specConn => {\n          // filter specs with matching types that don't have handles bound to the corresponding handle connection.\n          return !specConn.isOptional &&\n                 handleConnection.handle.type.equals(specConn.type) &&\n                 !handleConnection.particle.getConnectionByName(specConn.name).handle;\n        });\n\n        return possibleSpecConns.map(specConn => {\n          return (recipe, handleConnection) => {\n            handleConnection.particle.nameConnection(handleConnection, specConn.name);\n            return 1;\n          };\n        });\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/name-unnamed-connections.js\n// module id = 55\n// module chunks = 0","// Copyright (c) 2018 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport RecipeWalker from '../recipe/walker.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeUtil from '../recipe/recipe-util.js';\nimport assert from '../../platform/assert-web.js';\nimport MapSlots from './map-slots.js';\n\nexport default class ResolveRecipe extends Strategy {\n  constructor(arc) {\n    super();\n    this._arc = arc;\n  }\n\n  async generate(inputParams) {\n    let arc = this._arc;\n    return Recipe.over(this.getResults(inputParams), new class extends RecipeWalker {\n      onHandle(recipe, handle) {\n        if (handle.connections.length == 0 || handle.id || (!handle.type) || (!handle.fate))\n          return;\n\n        const counts = RecipeUtil.directionCounts(handle);\n\n        let mappable;\n\n        switch (handle.fate) {\n          case 'use':\n            mappable = arc.findHandlesByType(handle.type, {tags: handle.tags, subtype: counts.out == 0});\n            break;\n          case 'map':\n          case 'copy':\n            mappable = arc.context.findStorageByType(handle.type, {tags: handle.tags, subtype: true});\n            break;\n          case 'create':\n          case '?':\n            mappable = [];\n            break;\n          default:\n            assert(false, `unexpected fate ${handle.fate}`);\n        }\n\n        mappable = mappable.filter(incomingHandle => {\n          for (let existingHandle of recipe.handles)\n            if (incomingHandle.id == existingHandle.id)\n              return false;\n          return true;\n        });\n\n        if (mappable.length == 1) {\n          return (recipe, handle) => {\n            handle.mapToStorage(mappable[0]);\n          };\n        }\n      }\n\n      onSlotConnection(recipe, slotConnection) {\n        if (slotConnection.isConnected()) {\n          return;\n        }\n\n        let selectedSlots = MapSlots.findAllSlotCandidates(slotConnection, arc);\n\n        // MapSlots handles a multi-slot case.\n        if (selectedSlots.length !== 1) {\n          return;\n        }\n\n        let selectedSlot = selectedSlots[0];\n\n        return (recipe, slotConnection) => {\n          MapSlots.connectSlotConnection(slotConnection, selectedSlot);\n          return 1;\n        };\n      }\n    }(RecipeWalker.Permuted), this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/resolve-recipe.js\n// module id = 56\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\n\nexport default class SearchTokensToParticles extends Strategy {\n  constructor(arc) {\n    super();\n    // TODO: Recipes. Handles?\n    this._byToken = {};\n    for (let particle of arc.context.particles) {\n      let name = particle.name.toLowerCase();\n      this._addParticle(name, particle);\n\n      let verb = particle.primaryVerb;\n      if (verb != name) {\n        this._addParticle(verb, particle);\n      }\n    }\n\n    let findParticles = token => this._byToken[token] || [];\n    class Walker extends RecipeWalker {\n      onRecipe(recipe) {\n        if (!recipe.search || !recipe.search.unresolvedTokens.length) {\n          return;\n        }\n\n        let specsByToken = {};\n        for (let token of recipe.search.unresolvedTokens) {\n          for (let spec of findParticles(token)) {\n            // TODO: Skip particles that are already in the active recipe?\n            specsByToken[token] = specsByToken[token] || [];\n            specsByToken[token].push(spec);\n          }\n        }\n        let resolvedTokens = Object.keys(specsByToken);\n        if (resolvedTokens.length == 0) {\n          return;\n        }\n\n        const flatten = (arr) => [].concat(...arr);\n        const product = (...sets) =>\n          sets.reduce((acc, set) =>\n            flatten(acc.map(x => set.map(y => [...x, y]))),\n            [[]]);\n        let possibleCombinations = product(...Object.values(specsByToken).map(v => flatten(v)));\n\n        return possibleCombinations.map(combination => {\n          return recipe => {\n            resolvedTokens.forEach(token => recipe.search.resolveToken(token));\n            combination.forEach(spec => {\n              let particle = recipe.newParticle(spec.name);\n              particle.spec = spec;\n            });\n            return resolvedTokens.size;\n          };\n        });\n      }\n    }\n    this._walker = new Walker(RecipeWalker.Permuted);\n  }\n\n  get walker() {\n    return this._walker;\n  }\n\n  getResults(inputParams) {\n    assert(inputParams);\n    let generated = super.getResults(inputParams).filter(result => !result.result.isResolved());\n    let terminal = inputParams.terminal;\n    return [...generated, ...terminal];\n  }\n\n  _addParticle(token, particle) {\n    this._byToken[token] = this._byToken[token] || [];\n    this._byToken[token].push(particle);\n  }\n  async generate(inputParams) {\n    return Recipe.over(this.getResults(inputParams), this.walker, this);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/search-tokens-to-particles.js\n// module id = 57\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport Type from './type.js';\nimport assert from '../platform/assert-web.js';\nimport Schema from './schema.js';\nimport TypeChecker from './recipe/type-checker.js';\n\nclass TypeVariable {\n  constructor(name, canWriteSuperset, canReadSubset) {\n    assert(typeof name == 'string');\n    assert(canWriteSuperset == null || canWriteSuperset instanceof Type);\n    assert(canReadSubset == null || canReadSubset instanceof Type);\n    this.name = name;\n    this._canWriteSuperset = canWriteSuperset;\n    this._canReadSubset = canReadSubset;\n    this._resolution = null;\n  }\n\n  // Merge both the read subset (upper bound) and write superset (lower bound) constraints\n  // of two variables together. Use this when two separate type variables need to resolve\n  // to the same value.\n  maybeMergeConstraints(variable) {\n    assert(variable instanceof TypeVariable);\n\n    if (!this.maybeMergeCanReadSubset(variable.canReadSubset))\n      return false;\n    return this.maybeMergeCanWriteSuperset(variable.canWriteSuperset);\n  }\n\n  // merge a type variable's read subset (upper bound) constraints into this variable.\n  // This is used to accumulate read constraints when resolving a handle's type.\n  maybeMergeCanReadSubset(constraint) {\n    if (constraint == null)\n      return true;\n    \n    if (this.canReadSubset == null) {\n      this.canReadSubset = constraint;\n      return true;\n    }\n\n    let mergedSchema = Schema.intersect(this.canReadSubset.entitySchema, constraint.entitySchema);\n    if (!mergedSchema)\n      return false;\n    \n    this.canReadSubset = Type.newEntity(mergedSchema);\n    return true;\n  }\n\n  // merge a type variable's write superset (lower bound) constraints into this variable.\n  // This is used to accumulate write constraints when resolving a handle's type.\n  maybeMergeCanWriteSuperset(constraint) {\n    if (constraint == null)\n      return true;\n\n    if (this.canWriteSuperset == null) {\n      this.canWriteSuperset = constraint;\n      return true;\n    }\n\n    let mergedSchema = Schema.union(this.canWriteSuperset.entitySchema, constraint.entitySchema);\n    if (!mergedSchema)\n      return false;\n\n    this.canWriteSuperset = Type.newEntity(mergedSchema);\n    return true;\n  }\n\n  isSatisfiedBy(type) {\n    let constraint = this._canWriteSuperset;\n    if (!constraint) {\n      return true;\n    }\n    if (!constraint.isEntity || !type.isEntity) {\n      throw new Error(`constraint checking not implemented for ${this} and ${type}`);\n    }\n    return type.entitySchema.isMoreSpecificThan(constraint.entitySchema);\n  }\n\n  get resolution() {\n    if (this._resolution) {\n      return this._resolution.resolvedType();\n    }\n    return null;\n  }\n\n  set resolution(value) {\n    assert(value instanceof Type);\n    assert(!this._resolution);\n    let probe = value;\n    while (probe) {\n      if (!probe.isVariable)\n        break;\n      if (probe.variable == this)\n        return;\n      probe = probe.resolution;\n    }\n\n    this._resolution = value;\n    this._canWriteSuperset = null;\n    this._canReadSubset = null;\n  }\n\n  get canWriteSuperset() {\n    if (this._resolution) {\n      assert(!this._canWriteSuperset);\n      if (this._resolution.isVariable) {\n        return this._resolution.variable.canWriteSuperset;\n      }\n      return null;\n    }\n    return this._canWriteSuperset;\n  }\n\n  set canWriteSuperset(value) {\n    assert(!this._resolution);\n    this._canWriteSuperset = value;\n  }\n\n  get canReadSubset() {\n    if (this._resolution) {\n      assert(!this._canReadSubset);\n      if (this._resolution.isVariable) {\n        return this._resolution.variable.canReadSubset;\n      }\n      return null;\n    }\n    return this._canReadSubset;\n  }\n\n  set canReadSubset(value) {\n    assert(!this._resolution);\n    this._canReadSubset = value;\n  }\n\n  canEnsureResolved() {\n    if (this._resolution)\n      return this._resolution.canEnsureResolved();\n    return (this._canWriteSuperset || this._canReadSubset);\n  }\n\n  maybeEnsureResolved() {\n    if (this._resolution)\n      return this._resolution.maybeEnsureResolved();\n    if (this._canWriteSuperset) {\n      this._resolution = this._canWriteSuperset;\n      return true;\n    }\n    if (this._canReadSubset) {\n      this._resolution = this._canReadSubset;\n      return true;\n    }\n    return false;\n  }\n\n  toLiteral() {\n    assert(this.resolution == null);\n    return {\n      name: this.name,\n      canWriteSuperset: this._canWriteSuperset && this._canWriteSuperset.toLiteral(),\n      canReadSubset: this._canReadSubset && this._canReadSubset.toLiteral()\n    };\n  }\n\n  static fromLiteral(data) {\n    return new TypeVariable(\n        data.name,\n        data.canWriteSuperset ? Type.fromLiteral(data.canWriteSuperset) : null,\n        data.canReadSubset ? Type.fromLiteral(data.canReadSubset) : null);\n  }\n\n  isResolved() {\n    return (this._resolution && this._resolution.isResolved());\n  }\n}\n\nexport default TypeVariable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/type-variable.js\n// module id = 58\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport runtime from './runtime.js';\nimport assert from '../platform/assert-web.js';\nimport Type from './type.js';\nimport Relation from './relation.js';\nimport handle from './handle.js';\nimport OuterPec from './outer-PEC.js';\nimport Recipe from './recipe/recipe.js';\nimport Manifest from './manifest.js';\nimport Description from './description.js';\nimport util from './recipe/util.js';\nimport FakePecFactory from './fake-pec-factory.js';\nimport StorageProviderFactory from './storage/storage-provider-factory.js';\nimport scheduler from './scheduler.js';\nimport {registerArc} from '../devtools/shared/arc-registry.js';\nimport Id from './id.js';\nimport {ArcDebugHandler} from './debug/arc-debug-handler.js';\n\nclass Arc {\n  constructor({id, context, pecFactory, slotComposer, loader, storageKey, storageProviderFactory, speculative}) {\n    // TODO: context should not be optional.\n    this._context = context || new Manifest({id});\n    // TODO: pecFactory should not be optional. update all callers and fix here.\n    this._pecFactory = pecFactory || FakePecFactory.bind(null);\n\n    // for now, every Arc gets its own session\n    this.sessionId = Id.newSessionId();\n    this.id = this.sessionId.fromString(id);\n    this._speculative = !!speculative; // undefined => false\n    this._nextLocalID = 0;\n    this._activeRecipe = new Recipe();\n    // TODO: rename: this are just tuples of {particles, handles, slots, pattern} of instantiated recipes merged into active recipe.\n    this._recipes = [];\n    this._loader = loader;\n    this._scheduler = scheduler;\n\n    // All the handles, mapped by handle ID\n    this._handlesById = new Map();\n\n    // information about last-seen-versions of handles\n    this._lastSeenVersion = new Map();\n\n    // storage keys for referenced handles\n    this._storageKeys = {};\n    this._storageKey = storageKey;\n\n\n    this.particleHandleMaps = new Map();\n    let pecId = this.generateID();\n    let innerPecPort = this._pecFactory(pecId);\n    this.pec = new OuterPec(innerPecPort, slotComposer, this, `${pecId}:outer`);\n    if (slotComposer) {\n      slotComposer.arc = this;\n    }\n    this._storageProviderFactory = storageProviderFactory || new StorageProviderFactory(this.id);\n\n    // Dictionary from each tag string to a list of handles\n    this._tags = {};\n    // Map from each handle to a list of tags.\n    this._handleTags = new Map();\n    // Map from each handle to its description (originating in the manifest).\n    this._handleDescriptions = new Map();\n\n    this._search = null;\n    this._description = new Description(this);\n    this._debugging = false;\n\n    registerArc(this);\n  }\n  get loader() {\n    return this._loader;\n  }\n\n  get scheduler() {\n    return this._scheduler;\n  }\n\n  set search(search) {\n    this._search = search ? search.toLowerCase().trim() : null;\n  }\n\n  get search() {\n    return this._search;\n  }\n\n  get description() { return this._description; }\n\n  get makeSuggestions() { return this._makeSuggestions; }\n  set makeSuggestions(callback) {\n    this._makeSuggestions = callback;\n    this._scheduler.idleCallback = callback;\n  }\n\n  get idle() {\n    let awaitCompletion = async () => {\n      await this.scheduler.idle;\n      let messageCount = this.pec.messageCount;\n      await this.pec.idle;\n      if (this.pec.messageCount !== messageCount + 1)\n        return awaitCompletion();\n    };\n\n    return awaitCompletion();\n  }\n\n  get isSpeculative() {\n    return this._speculative;\n  }\n\n  async _serializeHandles() {\n    let handles = '';\n    let resources = '';\n    let interfaces = '';\n\n    let id = 0;\n    let importSet = new Set();\n    let handleSet = new Set();\n    for (let handle of this._activeRecipe.handles) {\n      if (handle.fate == 'map')\n        importSet.add(this.context.findManifestUrlForHandleId(handle.id));\n      else\n        handleSet.add(handle.id);\n    }\n    for (let url of importSet.values())\n      resources += `import '${url}'\\n`;\n\n    for (let handle of this._handles) {\n      if (!handleSet.has(handle.id))\n        continue;\n      let type = handle.type;\n      if (type.isCollection)\n        type = type.primitiveType();\n      if (type.isInterface) {\n        interfaces += type.interfaceShape.toString() + '\\n';\n      }\n      let key = this._storageProviderFactory.parseStringAsKey(handle.storageKey);\n      switch (key.protocol) {\n        case 'firebase':\n          handles += `store Store${id++} of ${handle.type.toString()} '${handle.id}' @${handle._version} at '${handle.storageKey}'\\n`;\n          break;\n        case 'in-memory': {\n          resources += `resource Store${id}Resource\\n`;\n          let indent = '  ';\n          resources += indent + 'start\\n';\n\n          let serializedData = (await handle.serializedData()).map(a => {\n            if (a == null)\n              return null;\n            if (a.rawData) {\n              let result = {};\n              result.$id = a.id;\n              for (let field in a.rawData) {\n                result[field] = a.rawData[field];\n              }\n              return result;\n            }\n            return a;\n          });\n          let data = JSON.stringify(serializedData);\n          resources += data.split('\\n').map(line => indent + line).join('\\n');\n          resources += '\\n';\n          handles += `store Store${id} of ${handle.type.toString()} '${handle.id}' @${handle._version} in Store${id++}Resource\\n`;\n          break;\n        }\n      }\n    }\n\n    return resources + interfaces + handles;\n  }\n\n  _serializeParticles() {\n    return this._activeRecipe.particles.map(entry => entry.spec.toString()).join('\\n');\n  }\n\n  _serializeStorageKey() {\n    if (this._storageKey)\n      return `storageKey: '${this._storageKey}'\\n`;\n    return '';\n  }\n\n  async serialize() {\n    await this.idle;\n    return `\nmeta\n  name: '${this.id}'\n  ${this._serializeStorageKey()}\n\n${await this._serializeHandles()}\n\n${this._serializeParticles()}\n\n@active\n${this.activeRecipe.toString()}`;\n  }\n\n  static async deserialize({serialization, pecFactory, slotComposer, loader, fileName, context}) {\n    let manifest = await Manifest.parse(serialization, {loader, fileName});\n    let arc = new Arc({\n      id: manifest.meta.name,\n      storageKey: manifest.meta.storageKey,\n      slotComposer,\n      pecFactory,\n      loader,\n      storageProviderFactory: manifest._storageProviderFactory,\n      context\n    });\n    // TODO: pass tags through too\n    manifest.handles.forEach(handle => arc._registerHandle(handle, []));\n    let recipe = manifest.activeRecipe.clone();\n    let options = {errors: new Map()};\n    assert(recipe.normalize(options), `Couldn't normalize recipe ${recipe.toString()}:\\n${[...options.errors.values()].join('\\n')}`);\n    await arc.instantiate(recipe);\n    return arc;\n  }\n\n  get context() {\n    return this._context;\n  }\n\n  get activeRecipe() { return this._activeRecipe; }\n  get recipes() { return this._recipes; }\n\n  loadedParticles() {\n    return [...this.particleHandleMaps.values()].map(({spec}) => spec);\n  }\n\n  _instantiateParticle(recipeParticle) {\n    let id = this.generateID('particle');\n    let handleMap = {spec: recipeParticle.spec, handles: new Map()};\n    this.particleHandleMaps.set(id, handleMap);\n\n    for (let [name, connection] of Object.entries(recipeParticle.connections)) {\n      if (!connection.handle) {\n        assert(connection.isOptional);\n        continue;\n      }\n      let handle = this.findHandleById(connection.handle.id);\n      assert(handle, `can't find handle of id ${connection.handle.id}`);\n      this._connectParticleToHandle(id, recipeParticle, name, handle);\n    }\n\n    // At least all non-optional connections must be resolved\n    assert(handleMap.handles.size >= handleMap.spec.connections.filter(c => !c.isOptional).length,\n           `Not all mandatory connections are resolved for {$particle}`);\n    this.pec.instantiate(recipeParticle, id, handleMap.spec, handleMap.handles, this._lastSeenVersion);\n    recipeParticle._scheduler = this.scheduler;\n    return id;\n  }\n\n  generateID(component) {\n    return this.id.createId(component).toString();\n  }\n\n  generateIDComponents() {\n    return {base: this.id, component: () => this._nextLocalID++};\n  }\n\n  get _handles() {\n    return [...this._handlesById.values()];\n  }\n\n  // Makes a copy of the arc used for speculative execution.\n  async cloneForSpeculativeExecution() {\n    let arc = new Arc({id: this.generateID().toString(), pecFactory: this._pecFactory, context: this.context, loader: this._loader, speculative: true});\n    arc._scheduler = this._scheduler.clone();\n    let handleMap = new Map();\n    for (let handle of this._handles) {\n      let clone = await arc._storageProviderFactory.construct(handle.id, handle.type, 'in-memory');\n      await clone.cloneFrom(handle);\n      handleMap.set(handle, clone);\n      if (this._handleDescriptions.has(handle)) {\n        arc._handleDescriptions.set(clone, this._handleDescriptions.get(handle));\n      }\n    }\n    this.particleHandleMaps.forEach((value, key) => {\n      arc.particleHandleMaps.set(key, {\n        spec: value.spec,\n        handles: new Map()\n      });\n      value.handles.forEach(handle => arc.particleHandleMaps.get(key).handles.set(handle.name, handleMap.get(handle)));\n    });\n\n   let {particles, handles, slots} = this._activeRecipe.mergeInto(arc._activeRecipe);\n   let particleIndex = 0, handleIndex = 0, slotIndex = 0;\n   this._recipes.forEach(recipe => {\n     let arcRecipe = {particles: [], handles: [], slots: [], innerArcs: new Map(), pattern: recipe.pattern};\n     recipe.particles.forEach(p => {\n       arcRecipe.particles.push(particles[particleIndex++]);\n       if (recipe.innerArcs.has(p)) {\n         let thisInnerArc = recipe.innerArcs.get(p);\n         let transformationParticle = arcRecipe.particles[arcRecipe.particles.length - 1];\n         let innerArc = {activeRecipe: new Recipe(), recipes: []};\n         let innerTuples = thisInnerArc.activeRecipe.mergeInto(innerArc.activeRecipe);\n         thisInnerArc.recipes.forEach(thisInnerArcRecipe => {\n           let innerArcRecipe = {particles: [], handles: [], slots: [], innerArcs: new Map()};\n           let innerIndex = 0;\n           thisInnerArcRecipe.particles.forEach(thisInnerArcRecipeParticle => {\n             innerArcRecipe.particles.push(innerTuples.particles[innerIndex++]);\n           });\n           innerIndex = 0;\n           thisInnerArcRecipe.handles.forEach(thisInnerArcRecipeParticle => {\n             innerArcRecipe.handles.push(innerTuples.handles[innerIndex++]);\n           });\n           innerIndex = 0;\n           thisInnerArcRecipe.slots.forEach(thisInnerArcRecipeParticle => {\n             innerArcRecipe.slots.push(innerTuples.slots[innerIndex++]);\n           });\n           innerArc.recipes.push(innerArcRecipe);\n         });\n         arcRecipe.innerArcs.set(transformationParticle, innerArc);\n       }\n     });\n     recipe.handles.forEach(p => {\n       arcRecipe.handles.push(handles[handleIndex++]);\n     });\n     recipe.slots.forEach(p => {\n       arcRecipe.slots.push(slots[slotIndex++]);\n     });\n\n     arc._recipes.push(arcRecipe);\n   });\n\n    for (let v of handleMap.values()) {\n      // FIXME: Tags\n      arc._registerHandle(v, []);\n    }\n    return arc;\n  }\n\n  async instantiate(recipe, innerArc) {\n    assert(recipe.isResolved(), 'Cannot instantiate an unresolved recipe');\n\n    let currentArc = {activeRecipe: this._activeRecipe, recipes: this._recipes};\n    if (innerArc) {\n      let innerArcs = this._recipes.find(r => !!r.particles.find(p => p == innerArc.particle)).innerArcs;\n      if (!innerArcs.has(innerArc.particle)) {\n         innerArcs.set(innerArc.particle, {activeRecipe: new Recipe(), recipes: []});\n      }\n      currentArc = innerArcs.get(innerArc.particle);\n    }\n    let {handles, particles, slots} = recipe.mergeInto(currentArc.activeRecipe);\n    currentArc.recipes.push({particles, handles, slots, innerArcs: new Map(), pattern: recipe.pattern});\n    slots.forEach(slot => slot.id = slot.id || `slotid-${this.generateID()}`);\n\n    for (let recipeHandle of handles) {\n      if (['copy', 'create'].includes(recipeHandle.fate)) {\n        let type = recipeHandle.type;\n        if (recipeHandle.fate == 'create')\n          assert(type.maybeEnsureResolved(), `Can't assign resolved type to ${type}`);\n\n        type = type.resolvedType();\n        assert(type.isResolved(), `Can't create handle for unresolved type ${type}`);\n\n        let handle = await this.createHandle(type, /* name= */ null, this.generateID(), recipeHandle.tags);\n        if (recipeHandle.fate === 'copy') {\n          let copiedHandle = this.findHandleById(recipeHandle.id);\n          assert(copiedHandle._version !== null);\n          await handle.cloneFrom(copiedHandle);\n          let copiedHandleDesc = this.getHandleDescription(copiedHandle);\n          if (copiedHandleDesc) {\n            this._handleDescriptions.set(handle, copiedHandleDesc);\n          }\n        }\n        recipeHandle.id = handle.id;\n        recipeHandle.fate = 'use';\n        recipeHandle.storageKey = handle.storageKey;\n        // TODO: move the call to OuterPEC's DefineHandle to here\n      }\n\n      let storageKey = recipeHandle.storageKey;\n      if (!storageKey)\n        storageKey = this.keyForId(recipeHandle.id);\n      assert(storageKey, `couldn't find storage key for handle '${recipeHandle}'`);\n      let handle = await this._storageProviderFactory.connect(recipeHandle.id, recipeHandle.type, storageKey);\n      assert(handle, `handle '${recipeHandle.id}' was not found`);\n    }\n\n    particles.forEach(recipeParticle => this._instantiateParticle(recipeParticle));\n\n    if (this.pec.slotComposer) {\n      // TODO: pass slot-connections instead\n      this.pec.slotComposer.initializeRecipe(particles);\n    }\n  }\n\n  _connectParticleToHandle(particleId, particle, name, targetHandle) {\n    assert(targetHandle, 'no target handle provided');\n    let handleMap = this.particleHandleMaps.get(particleId);\n    assert(handleMap.spec.connectionMap.get(name) !== undefined, 'can\\'t connect handle to a connection that doesn\\'t exist');\n    handleMap.handles.set(name, targetHandle);\n  }\n\n  async createHandle(type, name, id, tags, storageKey) {\n    assert(type instanceof Type, `can't createHandle with type ${type} that isn't a Type`);\n\n    if (type.isRelation) {\n      type = Type.newCollection(type);\n    }\n\n    if (id == undefined)\n      id = this.generateID();\n\n    if (storageKey == undefined && this._storageKey)\n      storageKey = this._storageProviderFactory.parseStringAsKey(this._storageKey).childKeyForHandle(id).toString();\n\n    if (storageKey == undefined)\n      storageKey = 'in-memory';\n\n    let handle = await this._storageProviderFactory.construct(id, type, storageKey);\n    assert(handle, 'handle with id ${id} already exists');\n    handle.name = name;\n\n    this._registerHandle(handle, tags);\n    return handle;\n  }\n\n  _registerHandle(handle, tags) {\n    tags = tags || [];\n    tags = Array.isArray(tags) ? tags : [tags];\n    tags.forEach(tag => assert(tag.startsWith('#'),\n      `tag ${tag} must start with '#'`));\n\n    this._handlesById.set(handle.id, handle);\n\n    if (tags.length) {\n      for (let tag of tags) {\n        if (this._tags[tag] == undefined)\n          this._tags[tag] = [];\n        this._tags[tag].push(handle);\n      }\n    }\n    this._handleTags.set(handle, new Set(tags));\n\n    this._storageKeys[handle.id] = handle.storageKey;\n  }\n\n  // Convert a type to a normalized key that we can use for\n  // equality testing.\n  //\n  // TODO: we should be testing the schemas for compatiblity instead of using just the name.\n  // TODO: now that this is only used to implement findHandlesByType we can probably replace\n  // the check there with a type system equality check or similar.\n  static _typeToKey(type) {\n    if (type.isCollection) {\n      let key = this._typeToKey(type.primitiveType());\n      if (key) {\n        return `list:${key}`;\n      }\n    } else if (type.isEntity) {\n      return type.entitySchema.name;\n    } else if (type.isShape) {\n      // TODO we need to fix this too, otherwise all handles of shape type will\n      // be of the 'same type' when searching by type.\n      return type.shapeShape;\n    } else if (type.isVariable && type.isResolved()) {\n      return Arc._typeToKey(type.resolvedType());\n    }\n  }\n\n  findHandlesByType(type, options) {\n    // TODO: dstockwell to rewrite this to use constraints and more\n    let typeKey = Arc._typeToKey(type);\n    let handles = [...this._handlesById.values()].filter(handle => {\n      if (typeKey) {\n        let handleKey = Arc._typeToKey(handle.type);\n        if (typeKey === handleKey) {\n          return true;\n        }\n      } else {\n        if (type.isVariable && !type.isResolved() && handle.type.isEntity) {\n          return true;\n        } else if (type.isCollection && type.primitiveType().isVariable && !type.primitiveType().isResolved() && handle.type.isCollection) {\n          return true;\n        }\n      }\n      return false;\n    });\n\n    if (options && options.tags && options.tags.length > 0) {\n      handles = handles.filter(handle => options.tags.filter(tag => !this._handleTags.get(handle).has(tag)).length == 0);\n    }\n    return handles;\n  }\n\n  findHandleById(id) {\n    let handle = this._handlesById.get(id);\n    if (handle == null) {\n      handle = this._context.findStorageById(id);\n    }\n    return handle;\n  }\n\n  getHandleDescription(handle) {\n    assert(handle, 'Cannot fetch description for nonexistent handle');\n    return this._handleDescriptions.get(handle) || handle.description;\n  }\n\n  keyForId(id) {\n    return this._storageKeys[id];\n  }\n\n  newCommit(entityMap) {\n    for (let [entity, handle] of entityMap.entries()) {\n      entity.identify(this.generateID());\n    }\n    for (let [entity, handle] of entityMap.entries()) {\n      new handle.handleFor(handle).store(entity);\n    }\n  }\n\n  stop() {\n    this.pec.stop();\n  }\n\n  toContextString(options) {\n    let results = [];\n    let handles = [...this._handlesById.values()].sort(util.compareComparables);\n    handles.forEach(v => {\n      results.push(v.toString(this._handleTags.get(v)));\n    });\n\n    // TODO: include handles entities\n    // TODO: include (remote) slots?\n\n    if (!this._activeRecipe.isEmpty()) {\n      results.push(this._activeRecipe.toString());\n    }\n\n    return results.join('\\n');\n  }\n\n  initDebug() {\n    new ArcDebugHandler(this);\n    this._debugging = true;\n    this.pec.initDebug();\n  }\n}\n\nexport default Arc;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/arc.js\n// module id = 59\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport Slot from './slot.js';\nimport DomSlot from './dom-slot.js';\nimport {DomContext} from './dom-context.js';\nimport DescriptionDomFormatter from './description-dom-formatter.js';\n\nclass SlotComposer {\n  /**\n   * |options| must contain:\n   * - affordance: the UI affordance the slots composer render to (for example: dom).\n   * - rootContext: the context containing top level context to be used for slots.\n   * and may contain:\n   * - containerKind: the type of container wrapping each slot's context (for example, div).\n   * - suggestionsContext: the context for rendering suggestions.\n   */\n  constructor(options) {\n    assert(options.affordance, 'Affordance is mandatory');\n    assert(options.rootContext, 'Root context is mandatory');\n\n    this._containerKind = options.containerKind;\n    this._affordance = options.affordance;\n    this._slotClass = this.getSlotClass();\n    assert(this._slotClass);\n\n    let slotContextByName = this._slotClass.findRootSlots(options.rootContext) || {};\n    if (Object.keys(slotContextByName).length == 0) {\n      // fallback to single 'root' slot using the rootContext.\n      slotContextByName['root'] = options.rootContext;\n    }\n\n    this._suggestionsContext = options.suggestionsContext || slotContextByName['suggestions'];\n\n    this._contextSlots = [];\n    Object.keys(slotContextByName).forEach(slotName => {\n      this._contextSlots.push({id: `rootslotid-${slotName}`, name: slotName, tags: [`#${slotName}`], context: slotContextByName[slotName], handleConnections: [], views: 0, getProvidedSlotSpec: () => { return {isSet: false}; }});\n    });\n\n    this._slots = [];\n  }\n  get affordance() { return this._affordance; }\n  getSlotClass() {\n    switch (this._affordance) {\n      case 'dom':\n      case 'dom-touch':\n      case 'vr':\n        return DomSlot;\n      case 'mock':\n        return Slot;\n      default:\n        assert('unsupported affordance ', this._affordance);\n    }\n  }\n  _getSuggestionContext() {\n    switch (this._affordance) {\n      case 'dom':\n      case 'dom-touch':\n      case 'vr':\n        return DomContext;\n      default:\n        assert('unsupported affordance ', this._affordance);\n    }\n  }\n  _getDescriptionFormatter() {\n    switch (this._affordance) {\n      case 'dom':\n      case 'dom-touch':\n      case 'vr':\n        return DescriptionDomFormatter;\n      default:\n        assert('unsupported affordance ', this._affordance);\n    }\n  }\n\n  async setSuggestions(suggestions) {\n    // TODO(mmandlis): slot composer should not be familiar with suggestions concept - they should just be slots.\n    if (!this._suggestionsContext) {\n      return;\n    }\n\n    this._suggestionsContext.textContent = '';\n\n    suggestions.forEach(async suggestion => {\n      let suggestionContent =\n        await suggestion.description.getRecipeSuggestion(this._getDescriptionFormatter());\n\n      if (!suggestionContent) {\n        suggestionContent = 'No suggestion content was generated (unnamed recipe and no describable particles)';\n      }\n\n      this._getSuggestionContext().createContext(\n          this.createSuggestionElement(this._suggestionsContext, suggestion),\n          suggestionContent\n      );\n    });\n  }\n\n  createSuggestionElement(container, plan) {\n    let suggest = Object.assign(document.createElement('suggestion-element'), {plan});\n    // TODO(sjmiles): LIFO is weird, iterate top-down elsewhere?\n    container.insertBefore(suggest, container.firstElementChild);\n    return suggest;\n  }\n\n  getSlot(particle, slotName) {\n    return this._slots.find(s => s.consumeConn.particle == particle && s.consumeConn.name == slotName);\n  }\n\n  _findContext(slotId) {\n    let contextSlot = this._contextSlots.find(slot => slot.id == slotId);\n    if (contextSlot) {\n      return contextSlot.context;\n    }\n  }\n\n  createHostedSlot(transformationParticle, transformationSlotName, hostedParticleName, hostedSlotName) {\n    let hostedSlotId = this.arc.generateID();\n\n    let transformationSlot = this.getSlot(transformationParticle, transformationSlotName);\n    assert(transformationSlot,\n           `Unexpected transformation slot particle ${transformationParticle.name}:${transformationSlotName}, hosted particle ${hostedParticleName}, slot name ${hostedSlotName}`);\n    transformationSlot.addHostedSlot(hostedSlotId, hostedParticleName, hostedSlotName);\n    return hostedSlotId;\n  }\n  _findSlotByHostedSlotId(hostedSlotId) {\n    for (let slot of this._slots) {\n      let hostedSlot = slot.getHostedSlot(hostedSlotId);\n      if (hostedSlot) {\n        return slot;\n      }\n    }\n  }\n  findHostedSlot(hostedParticle, hostedSlotName) {\n    for (let slot of this._slots) {\n      let hostedSlot = slot.findHostedSlot(hostedParticle, hostedSlotName);\n      if (hostedSlot) {\n        return hostedSlot;\n      }\n    }\n  }\n\n  initializeRecipe(recipeParticles) {\n    let newSlots = [];\n    // Create slots for each of the recipe's particles slot connections.\n    recipeParticles.forEach(p => {\n      Object.values(p.consumedSlotConnections).forEach(cs => {\n        if (!cs.targetSlot) {\n          assert(!cs.slotSpec.isRequired, `No target slot for particle's ${p.name} required consumed slot: ${cs.name}.`);\n          return;\n        }\n\n        if (this._initHostedSlot(cs.targetSlot.id, p)) {\n          // Skip slot creation for hosted slots.\n          return;\n        }\n\n        let slot = new this._slotClass(cs, this.arc, this._containerKind);\n        slot.startRenderCallback = this.arc.pec.startRender.bind(this.arc.pec);\n        slot.stopRenderCallback = this.arc.pec.stopRender.bind(this.arc.pec);\n        slot.innerSlotsUpdateCallback = this.updateInnerSlots.bind(this);\n        newSlots.push(slot);\n      });\n    });\n\n    // Attempt to set context for each of the slots.\n    newSlots.forEach(s => {\n      assert(!s.getContext(), `Unexpected context in new slot`);\n\n      let context = null;\n      let sourceConnection = s.consumeConn.targetSlot && s.consumeConn.targetSlot.sourceConnection;\n      if (sourceConnection) {\n        let sourceConnSlot = this.getSlot(sourceConnection.particle, sourceConnection.name);\n        if (sourceConnSlot) {\n          context = sourceConnSlot.getInnerContext(s.consumeConn.name);\n        }\n      } else { // External slots provided at SlotComposer ctor (eg 'root')\n        context = this._findContext(s.consumeConn.targetSlot.id);\n      }\n\n      this._slots.push(s);\n\n      if (context) {\n        s.updateContext(context);\n      }\n    });\n  }\n\n  _initHostedSlot(hostedSlotId, hostedParticle) {\n    let transformationSlot = this._findSlotByHostedSlotId(hostedSlotId);\n    if (!transformationSlot) {\n      return false;\n    }\n    transformationSlot.initHostedSlot(hostedSlotId, hostedParticle);\n    return true;\n  }\n\n  async renderSlot(particle, slotName, content) {\n    let slot = this.getSlot(particle, slotName);\n    if (slot) {\n      // Set the slot's new content.\n      await slot.setContent(content, eventlet => {\n        this.arc.pec.sendEvent(particle, slotName, eventlet);\n      });\n      return;\n    }\n\n    if (this._renderHostedSlot(particle, slotName, content)) {\n      return;\n    }\n\n    assert(slot, `Cannot find slot (or hosted slot) ${slotName} for particle ${particle.name}`);\n  }\n\n  _renderHostedSlot(particle, slotName, content) {\n    let hostedSlot = this.findHostedSlot(particle, slotName);\n    if (!hostedSlot) {\n      return false;\n    }\n    let transformationSlot = this._findSlotByHostedSlotId(hostedSlot.slotId);\n    assert(transformationSlot, `No transformation slot found for ${hostedSlot.slotId}`);\n\n    this.arc.pec.innerArcRender(transformationSlot.consumeConn.particle, transformationSlot.consumeConn.name, hostedSlot.slotId, content);\n\n    return true;\n  }\n\n  updateInnerSlots(slot) {\n    assert(slot, 'Cannot update inner slots of null');\n    // Update provided slot contexts.\n    Object.keys(slot.consumeConn.providedSlots).forEach(providedSlotName => {\n      let providedContext = slot.getInnerContext(providedSlotName);\n      let providedSlot = slot.consumeConn.providedSlots[providedSlotName];\n      providedSlot.consumeConnections.forEach(cc => {\n        // This will trigger 'start' or 'stop' render, if applicable.\n        this.getSlot(cc.particle, cc.name).updateContext(providedContext);\n      });\n    });\n  }\n\n  getAvailableSlots() {\n    let availableSlots = this.arc.activeRecipe.slots.slice();\n\n    this._contextSlots.forEach(contextSlot => {\n      if (!availableSlots.find(s => s.id == contextSlot.id)) {\n        availableSlots.push(contextSlot);\n      }\n    });\n    return availableSlots;\n  }\n}\n\nexport default SlotComposer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/slot-composer.js\n// module id = 60\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport Loader from '../../runtime/loader.js';\nimport particle from '../../runtime/particle.js';\nimport DomParticle from '../../runtime/dom-particle.js';\nimport MultiplexerDomParticle from '../../runtime/multiplexer-dom-particle.js';\nimport TransformationDomParticle from '../../runtime/transformation-dom-particle.js';\n\nconst logFactory = (preamble, color, log='log') => console[log].bind(console, `Ptcl:%c${preamble}`, `background: ${color}; color: white; padding: 1px 6px 2px 7px; border-radius: 4px;`);\nconst html = (strings, ...values) => (strings[0] + values.map((v, i) => v + strings[i + 1]).join('')).trim();\n\nconst dumbCache = {};\n\nexport default class BrowserLoader extends Loader {\n  constructor(urlMap) {\n    super();\n    this._urlMap = urlMap;\n  }\n  _loadURL(url) {\n    // use URL to normalize the path for deduping\n    const cacheKey = new URL(url, document.URL).href;\n    const resource = dumbCache[cacheKey];\n    return resource || (dumbCache[cacheKey] = super._loadURL(url));\n  }\n  _resolve(path) {\n    //return new URL(path, this._base).href;\n    let url = this._urlMap[path];\n    if (!url && path) {\n      // TODO(sjmiles): inefficient!\n      let macro = Object.keys(this._urlMap).sort((a, b) => b.length - a.length).find(k => path.slice(0, k.length) == k);\n      if (macro) {\n        url = this._urlMap[macro] + path.slice(macro.length);\n      }\n    }\n    url = url || path;\n    //console.log(`browser-loader: resolve(${path}) = ${url}`);\n    return url;\n  }\n  loadResource(name) {\n    return this._loadURL(this._resolve(name));\n  }\n  requireParticle(fileName) {\n    const path = this._resolve(fileName);\n    // inject path to this particle into the UrlMap,\n    // allows \"foo.js\" particle to invoke `importScripts(resolver('foo/othermodule.js'))`\n    this.mapParticleUrl(path);\n    const result = [];\n    self.defineParticle = function(particleWrapper) {\n      result.push(particleWrapper);\n    };\n    importScripts(path);\n    delete self.defineParticle;\n    const logger = logFactory(fileName.split('/').pop(), 'blue');\n    return this.unwrapParticle(result[0], logger);\n  }\n  mapParticleUrl(path) {\n    let parts = path.split('/');\n    let suffix = parts.pop();\n    let folder = parts.join('/');\n    let name = suffix.split('.').shift();\n    this._urlMap[name] = folder;\n  }\n  unwrapParticle(particleWrapper, log) {\n    // TODO(sjmiles): regarding `resolver`:\n    //  _resolve method allows particles to request remapping of assets paths\n    //  for use in DOM\n    let resolver = this._resolve.bind(this);\n    return particleWrapper({\n      particle,\n      Particle: particle.Particle,\n      DomParticle,\n      MultiplexerDomParticle,\n      SimpleParticle: DomParticle,\n      TransformationDomParticle,\n      resolver,\n      log,\n      html\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./shell/source/browser-loader.js\n// module id = 61\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n// Debugging is initialized either by /devtools/src/run-init-debug.js, which is\n// injected by the devtools extension content script in the browser env,\n// or used directly when debugging nodeJS.\n// This is why data needs to be referenced via a global object.\n\nlet root = typeof window === 'object' ? window : global;\n\nroot._arcDebugRegistry = root._arcDebugRegistry || {\n  arcList: [],\n  debug: false\n};\n\nlet registry = root._arcDebugRegistry;\n\nfunction initDebug() {\n  if (registry.debug) return {};\n  let preExistingArcs = registry.arcList.length > 0;\n  for (let arc of registry.arcList) {\n    arc.initDebug();\n  }\n  delete registry.arcList;\n  registry.debug = true;\n  return {preExistingArcs};\n}\n\nfunction registerArc(arc) {\n  if (registry.debug) {\n    arc.initDebug();\n  } else {\n    registry.arcList.push(arc);\n  }\n}\n\nexport {initDebug, registerArc};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./devtools/shared/arc-registry.js\n// module id = 62\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\n// Assume firebase has been loaded. We can't `import` it here as it does not\n// support strict mode.\nexport default window.btoa;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./platform/btoa-web.js\n// module id = 63\n// module chunks = 0","// Copyright (c) 2018 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\n// Provides access to device hardware resource metrics for a web browser.\nexport default class DeviceInfo {\n  // Returns the number of logical cores.\n  static hardwareConcurrency() {\n    return navigator.hardwareConcurrency;\n  }\n  // Returns the device memory in gigabytes.\n  static deviceMemory() {\n    return navigator.deviceMemory;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./platform/deviceinfo-web.js\n// module id = 64\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport AbstractDevtoolsChannel from '../runtime/debug/abstract-devtools-channel.js';\n\nexport default class ChromeExtensionChannel extends AbstractDevtoolsChannel {\n  constructor() {\n    super();\n    document.addEventListener('arcs-debug-in', e => this._handleMessage(e.detail));\n    this._makeReady(); // TODO: Consider readiness if connecting via extension.\n  }\n\n  _flush(messages) {\n    document.dispatchEvent(new CustomEvent('arcs-debug-out', {detail: messages}));\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./platform/devtools-channel-web.js\n// module id = 65\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\n// Assume firebase has been loaded. We can't `import` it here as it does not\n// support strict mode.\nexport default window.firebase;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./platform/firebase-web.js\n// module id = 66\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nexport default {};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./platform/vm-web.js\n// module id = 67\n// module chunks = 0","export default /*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n(function() {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  peg$SyntaxError.buildMessage = function(expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n          literal: function(expectation) {\n            return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n          },\n\n          \"class\": function(expectation) {\n            var escapedParts = \"\",\n                i;\n\n            for (i = 0; i < expectation.parts.length; i++) {\n              escapedParts += expectation.parts[i] instanceof Array\n                ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n                : classEscape(expectation.parts[i]);\n            }\n\n            return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n          },\n\n          any: function(expectation) {\n            return \"any character\";\n          },\n\n          end: function(expectation) {\n            return \"end of input\";\n          },\n\n          other: function(expectation) {\n            return expectation.description;\n          }\n        };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g,  '\\\\\"')\n        .replace(/\\0/g, '\\\\0')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\]/g, '\\\\]')\n        .replace(/\\^/g, '\\\\^')\n        .replace(/-/g,  '\\\\-')\n        .replace(/\\0/g, '\\\\0')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = new Array(expected.length),\n          i, j;\n\n      for (i = 0; i < expected.length; i++) {\n        descriptions[i] = describeExpectation(expected[i]);\n      }\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== void 0 ? options : {};\n\n    var peg$FAILED = {},\n\n        peg$startRuleFunctions = { Manifest: peg$parseManifest },\n        peg$startRuleFunction  = peg$parseManifest,\n\n        peg$c0 = function(items) {\n            let result = items.map(item => {\n              let manifestItem = item[2];\n              manifestItem.annotation = optional(item[0], a => a[1], null);\n              return manifestItem;\n            });\n            checkNormal(result);\n            return result;\n          },\n        peg$c1 = \"@\",\n        peg$c2 = peg$literalExpectation(\"@\", false),\n        peg$c3 = function(annotation) { return annotation; },\n        peg$c4 = \"resource\",\n        peg$c5 = peg$literalExpectation(\"resource\", false),\n        peg$c6 = function(name, body) {\n          return {\n            kind: 'resource',\n            name,\n            data: body,\n            location: location()\n          };\n        },\n        peg$c7 = \"start\",\n        peg$c8 = peg$literalExpectation(\"start\", false),\n        peg$c9 = function() { startIndent = indent; },\n        peg$c10 = function(lines) {\n          return lines.map(line => line[0].substring(startIndent.length) + line[1]).join('');\n        },\n        peg$c11 = /^[^\\n]/,\n        peg$c12 = peg$classExpectation([\"\\n\"], true, false),\n        peg$c13 = function() { return text(); },\n        peg$c14 = \"view\",\n        peg$c15 = peg$literalExpectation(\"view\", false),\n        peg$c16 = \"store\",\n        peg$c17 = peg$literalExpectation(\"store\", false),\n        peg$c18 = \"of\",\n        peg$c19 = peg$literalExpectation(\"of\", false),\n        peg$c20 = function(name, type, id, version, tags, source, items) {\n            items = optional(items, extractIndented, []);\n            return {\n              kind: 'store',\n              location: location(),\n              name,\n              type,\n              id: optional(id, id => id[1], null),\n              version: optional(version, version => version[1], null),\n              tags: optional(tags, tags => tags[1], null),\n              source: source.source,\n              origin: source.origin,\n              description: items.length > 0 ? items[0][2] : null\n            };\n          },\n        peg$c21 = \"in\",\n        peg$c22 = peg$literalExpectation(\"in\", false),\n        peg$c23 = function(source) { return {origin: 'file', source }; },\n        peg$c24 = function(source) { return {origin: 'resource', source }; },\n        peg$c25 = \"at\",\n        peg$c26 = peg$literalExpectation(\"at\", false),\n        peg$c27 = function(source) { return {origin: 'storage', source }; },\n        peg$c28 = \"description\",\n        peg$c29 = peg$literalExpectation(\"description\", false),\n        peg$c30 = \"import\",\n        peg$c31 = peg$literalExpectation(\"import\", false),\n        peg$c32 = function(path) {\n            return {\n              kind: 'import',\n              location: location(),\n              path,\n            };\n          },\n        peg$c33 = \"shape\",\n        peg$c34 = peg$literalExpectation(\"shape\", false),\n        peg$c35 = \"<\",\n        peg$c36 = peg$literalExpectation(\"<\", false),\n        peg$c37 = \">\",\n        peg$c38 = peg$literalExpectation(\">\", false),\n        peg$c39 = function(name, typeVars, items) {\n            return {\n              kind: 'shape',\n              location: location(),\n              name,\n              interface: optional(items, extractIndented, []).find(item => item.kind == 'shape-interface'),\n              slots: optional(items, extractIndented, []).filter(item => item.kind == 'shape-slot'),\n            }\n          },\n        peg$c40 = \"(\",\n        peg$c41 = peg$literalExpectation(\"(\", false),\n        peg$c42 = \")\",\n        peg$c43 = peg$literalExpectation(\")\", false),\n        peg$c44 = function(verb, args) {\n            return {\n              kind: 'shape-interface',\n              location: location(),\n              verb,\n              args: args || []\n            };\n          },\n        peg$c45 = \",\",\n        peg$c46 = peg$literalExpectation(\",\", false),\n        peg$c47 = function(head, tail) {\n            return [head].concat(tail.map(a => a[2]));\n          },\n        peg$c48 = function(direction, type, name) {\n            if (direction == 'host') {\n              error(`Shape cannot have arguments with a 'host' direction.`);\n            }\n\n            return {\n              kind: 'shape-argument',\n              location: location(),\n              direction,\n              type,\n              name,\n            };\n          },\n        peg$c49 = \"must\",\n        peg$c50 = peg$literalExpectation(\"must\", false),\n        peg$c51 = \"consume\",\n        peg$c52 = peg$literalExpectation(\"consume\", false),\n        peg$c53 = \"provide\",\n        peg$c54 = peg$literalExpectation(\"provide\", false),\n        peg$c55 = \"set of\",\n        peg$c56 = peg$literalExpectation(\"set of\", false),\n        peg$c57 = function(isRequired, direction, isSet, name) {\n            return {\n              kind: 'shape-slot',\n              location: location(),\n              name: optional(name, isRequired => name[1], null),\n              isRequired: optional(isRequired, isRequired => isRequired[0] == 'must', false),\n              direction,\n              isSet: !!isSet,\n            }\n          },\n        peg$c58 = \"meta\",\n        peg$c59 = peg$literalExpectation(\"meta\", false),\n        peg$c60 = function(items) {\n          items = items ? extractIndented(items): [];\n          return {kind: 'meta', items: items, location: location()};\n        },\n        peg$c61 = \"name\",\n        peg$c62 = peg$literalExpectation(\"name\", false),\n        peg$c63 = \":\",\n        peg$c64 = peg$literalExpectation(\":\", false),\n        peg$c65 = function(name) {\n          return { key: 'name', value: name, location: location(), kind: 'name' }\n        },\n        peg$c66 = \"storageKey\",\n        peg$c67 = peg$literalExpectation(\"storageKey\", false),\n        peg$c68 = function(key) {\n          return {key: 'storageKey', value: key, location: location(), kind: 'storageKey' }\n        },\n        peg$c69 = \"particle\",\n        peg$c70 = peg$literalExpectation(\"particle\", false),\n        peg$c71 = function(name, implFile, items) {\n            let args = null;\n            let verbs = [];\n            let affordance = [];\n            let slots = [];\n            let description = null;\n            items = items ? extractIndented(items) : [];\n            items.forEach(item => {\n              if (item.kind == 'interface') {\n                if (/[A-Z]/.test(item.verb[0]) && item.verb != name) {\n                  error(`Verb ${item.verb} must start with a lower case character or be same as particle name.`);\n                }\n                verbs.push(item.verb);\n                args = item.args;\n              } else if (item.kind == 'particle-slot') {\n                slots.push(item);\n              } else if (item.kind == 'description') {\n                // TODO: Super hacks.\n                description = {\n                  kind: 'description?',\n                  location: 'FIXME',\n                };\n                item.description.forEach(d => { description[d.name] = d.pattern; });\n              } else if (item.affordance) {\n                affordance.push(item.affordance)\n              } else {\n                error(`Particle ${name} contains an unknown element: ${item.name}`);\n              }\n            });\n            if (affordance.length == 0) {\n              // Add default affordance\n              affordance.push('dom');\n            }\n            affordance.push('mock');\n\n            return {\n              kind: 'particle',\n              location: location(),\n              name,\n              implFile: optional(implFile, implFile => implFile[3], null),\n              verbs,\n              args,\n              affordance,\n              slots,\n              description,\n            };\n          },\n        peg$c72 = function(verb, args) {\n            return {\n              kind: 'interface',\n              location: location(),\n              verb,\n              args: args || []\n            };\n          },\n        peg$c73 = \"?\",\n        peg$c74 = peg$literalExpectation(\"?\", false),\n        peg$c75 = function(direction, type, isOptional, name) {\n            return {\n              kind: 'particle-argument',\n              location: location(),\n              direction,\n              type: type,\n              isOptional: !!isOptional,\n              name,\n            };\n          },\n        peg$c76 = \"inout\",\n        peg$c77 = peg$literalExpectation(\"inout\", false),\n        peg$c78 = \"out\",\n        peg$c79 = peg$literalExpectation(\"out\", false),\n        peg$c80 = \"host\",\n        peg$c81 = peg$literalExpectation(\"host\", false),\n        peg$c82 = function() {\n            return text();\n          },\n        peg$c83 = \"[\",\n        peg$c84 = peg$literalExpectation(\"[\", false),\n        peg$c85 = \"]\",\n        peg$c86 = peg$literalExpectation(\"]\", false),\n        peg$c87 = function(type) {\n            return {\n              kind: 'list-type',\n              location: location(),\n              type,\n            };\n          },\n        peg$c88 = \"~\",\n        peg$c89 = peg$literalExpectation(\"~\", false),\n        peg$c90 = \"with\",\n        peg$c91 = peg$literalExpectation(\"with\", false),\n        peg$c92 = function(name, constraint) {\n            return {\n              kind: 'variable-type',\n              location: location(),\n              name,\n              constraint: optional(constraint, constraint => constraint[3], null),\n            };\n          },\n        peg$c93 = function(name) {\n            return {\n              kind: 'reference-type',\n              location: location(),\n              name,\n            };\n          },\n        peg$c94 = function(head, tail) {\n            return [head, ...tail.map(a => a[2])];\n          },\n        peg$c95 = \"affordance\",\n        peg$c96 = peg$literalExpectation(\"affordance\", false),\n        peg$c97 = \"dom-touch\",\n        peg$c98 = peg$literalExpectation(\"dom-touch\", false),\n        peg$c99 = \"dom\",\n        peg$c100 = peg$literalExpectation(\"dom\", false),\n        peg$c101 = \"vr\",\n        peg$c102 = peg$literalExpectation(\"vr\", false),\n        peg$c103 = \"voice\",\n        peg$c104 = peg$literalExpectation(\"voice\", false),\n        peg$c105 = function(affordance) {\n            return {\n              kind: 'particle-affordance',\n              location: location(),\n              affordance,\n            };\n          },\n        peg$c106 = function(isRequired, isSet, name, tags, items) {\n            let formFactor = null;\n            let providedSlots = [];\n            items = optional(items, extractIndented, []);\n            items.forEach(item => {\n              if (item.kind == 'provided-slot') {\n                providedSlots.push(item);\n              } else if (item.kind == 'form-factor') {\n                if (formFactor)\n                  error('duplicate form factor for a slot');\n                formFactor = item.formFactor;\n              } else {\n                error('Unsupported particle slot item ', item);\n              }\n            });\n            return {\n              kind: 'particle-slot',\n              location: location(),\n              name,\n              tags: optional(tags, tags => tags[1], []),\n              isRequired: optional(isRequired, isRequired => isRequired[0] == 'must', false),\n              isSet: !!isSet,\n              formFactor,\n              providedSlots\n            };\n          },\n        peg$c107 = \"formFactor\",\n        peg$c108 = peg$literalExpectation(\"formFactor\", false),\n        peg$c109 = \"fullscreen\",\n        peg$c110 = peg$literalExpectation(\"fullscreen\", false),\n        peg$c111 = \"big\",\n        peg$c112 = peg$literalExpectation(\"big\", false),\n        peg$c113 = \"medium\",\n        peg$c114 = peg$literalExpectation(\"medium\", false),\n        peg$c115 = \"small\",\n        peg$c116 = peg$literalExpectation(\"small\", false),\n        peg$c117 = function(formFactor) {\n            return {\n              kind: 'form-factor',\n              location: location(),\n              formFactor\n            };\n          },\n        peg$c118 = function(isSet, name, tags, items) {\n            let formFactor = null;\n            let handles = [];\n            items = items ? extractIndented(items) : [];\n            items.forEach(item => {\n              if (item.kind == 'form-factor') {\n                if (formFactor)\n                  error('duplicate form factor for a slot');\n                formFactor = item.formFactor;\n              } else {\n                handles.push(item.handle);\n              }\n            });\n            return {\n              kind: 'provided-slot',\n              location: location(),\n              name,\n              tags: optional(tags, tags => tags[1], []),\n              isSet: !!isSet,\n              formFactor,\n              handles\n            };\n          },\n        peg$c119 = \"handle\",\n        peg$c120 = peg$literalExpectation(\"handle\", false),\n        peg$c121 = function(handle) {\n            return {\n              kind: 'particle-provided-slot-handle',\n              location: location(),\n              handle,\n            };\n          },\n        peg$c122 = function(pattern, handleDescriptions) {\n            return {\n              kind: 'description',\n              location: location(),\n              description: [\n                {\n                  // TODO: this should be stored in a different field.\n                  kind: 'default-description?',\n                  location: location(),\n                  name: 'pattern',\n                  pattern: pattern,\n                },\n                ...optional(handleDescriptions, extractIndented, []),\n              ],\n            };\n          },\n        peg$c123 = function(name, pattern) {\n            return {\n              kind: 'handle-description',\n              location: location(),\n              name,\n              pattern,\n            };\n          },\n        peg$c124 = \"recipe\",\n        peg$c125 = peg$literalExpectation(\"recipe\", false),\n        peg$c126 = function(name, tags, items) {\n            return {\n              kind: 'recipe',\n              location: location(),\n              name: optional(name, name => name[1], null),\n              tags: optional(tags, tags => tags[1], []),\n              items: optional(items, extractIndented, []),\n            };\n          },\n        peg$c127 = \"as\",\n        peg$c128 = peg$literalExpectation(\"as\", false),\n        peg$c129 = function(name) {\n            return name;\n          },\n        peg$c130 = function(ref, name, connections) {\n            let handleConnections = [];\n            let slotConnections = [];\n            if (connections) {\n              connections = extractIndented(connections);\n              for (let conn of connections) {\n                if (conn.kind == 'handle-connection')\n                  handleConnections.push(conn);\n                else\n                  slotConnections.push(conn)\n              }\n            }\n            return {\n              kind: 'particle',\n              location: location(),\n              name: optional(name, name => name[1], null),\n              ref,\n              connections: handleConnections,\n              slotConnections: slotConnections,\n            };\n          },\n        peg$c131 = \"*\",\n        peg$c132 = peg$literalExpectation(\"*\", false),\n        peg$c133 = function(param, dir, target) {\n            return {\n              kind: 'handle-connection',\n              location: location(),\n              param,\n              dir,\n              target: optional(target, target => target[1], null),\n            };\n          },\n        peg$c134 = function(ref, name, providedSlots) {\n            return {\n              kind: 'slot-connection',\n              location: location(),\n              param: ref.param,\n              tags: ref.tags,\n              name: optional(name, name=>name[1], null),\n              providedSlots: optional(providedSlots, extractIndented, [])\n            };\n          },\n        peg$c135 = function(param, tags) {\n            return {\n              kind: 'slot-connection-ref',\n              location: location(),\n              param,\n              tags,\n            };\n          },\n        peg$c136 = function(param, name) {\n            return {\n              kind: 'provided-slot',\n              location: location(),\n              param,\n              name: optional(name, name=>name[1], null)\n            };\n          },\n        peg$c137 = function(from, dir, to) {\n            return {\n              kind: 'connection',\n              location: location(),\n              dir,\n              from,\n              to,\n            };\n          },\n        peg$c138 = \"search\",\n        peg$c139 = peg$literalExpectation(\"search\", false),\n        peg$c140 = \"tokens\",\n        peg$c141 = peg$literalExpectation(\"tokens\", false),\n        peg$c142 = function(phrase, tokens) {\n            return {\n              kind: 'search',\n              location: location(),\n              phrase,\n              tokens: optional(tokens, tokens => tokens[1][2].map(t => t[1]), null)\n            };\n          },\n        peg$c143 = \"<-\",\n        peg$c144 = peg$literalExpectation(\"<-\", false),\n        peg$c145 = \"->\",\n        peg$c146 = peg$literalExpectation(\"->\", false),\n        peg$c147 = \"=\",\n        peg$c148 = peg$literalExpectation(\"=\", false),\n        peg$c149 = \".\",\n        peg$c150 = peg$literalExpectation(\".\", false),\n        peg$c151 = function(ident, param, tags) {\n            let particle = null;\n            let name = null;\n            if (ident) {\n              if (/^[A-Z]/.test(ident)) {\n                particle = ident;\n              } else {\n                name = ident;\n              }\n            }\n\n            return {\n              kind: 'connection-target',\n              location: location(),\n              particle,\n              name,\n              param: optional(param, param => param[1], null),\n              tags: optional(tags, tags => tags[1], []),\n            }\n          },\n        peg$c152 = function(tags) {\n            return {\n              kind: 'connection-target',\n              location: location(),\n              tags,\n            };\n          },\n        peg$c153 = \"use\",\n        peg$c154 = peg$literalExpectation(\"use\", false),\n        peg$c155 = \"map\",\n        peg$c156 = peg$literalExpectation(\"map\", false),\n        peg$c157 = \"create\",\n        peg$c158 = peg$literalExpectation(\"create\", false),\n        peg$c159 = \"copy\",\n        peg$c160 = peg$literalExpectation(\"copy\", false),\n        peg$c161 = function(type, ref, name) {\n            return {\n              kind: 'handle',\n              location: location(),\n              name: optional(name, name => name[1], null),\n              ref: optional(ref, ref => ref[1], null),\n              fate: type\n            }\n          },\n        peg$c162 = \"#\",\n        peg$c163 = peg$literalExpectation(\"#\", false),\n        peg$c164 = /^[a-zA-Z]/,\n        peg$c165 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false),\n        peg$c166 = /^[a-zA-Z0-9_]/,\n        peg$c167 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\"], false, false),\n        peg$c168 = function() {return text()},\n        peg$c169 = function(head, tail) { return [head, ...(tail && tail[1] || [])]; },\n        peg$c170 = function(tags) { return tags; },\n        peg$c171 = function(name, tags) {\n            return {\n              kind: 'particle-ref',\n              location: location(),\n              name,\n              tags: tags || [],\n              verbs: [],\n            };\n          },\n        peg$c172 = function(tags) {\n            return {\n              kind: 'particle-ref',\n              location: location(),\n              tags,\n              verbs: [],\n            };\n          },\n        peg$c173 = \"particle can\",\n        peg$c174 = peg$literalExpectation(\"particle can\", false),\n        peg$c175 = function(verb, tags) {\n            return {\n              kind: 'particle-ref',\n              location: location(),\n              verbs: [verb],\n              tags: tags || [],\n            };\n          },\n        peg$c176 = function(id, tags) {\n            return {\n              kind: 'handle-ref',\n              location: location(),\n              id,\n              tags: tags || [],\n            };\n          },\n        peg$c177 = function(name, tags) {\n            return {\n              kind: 'handle-ref',\n              location: location(),\n              name,\n              tags: tags || [],\n            };\n          },\n        peg$c178 = function(tags) {\n            return {\n              kind: 'handle-ref',\n              location: location(),\n              tags,\n            };\n          },\n        peg$c179 = \"slot\",\n        peg$c180 = peg$literalExpectation(\"slot\", false),\n        peg$c181 = function(ref, name) {\n            return {\n              kind: 'slot',\n              location: location(),\n              ref: optional(ref, ref => ref[1], null),\n              name: optional(name, name => name[1], '')\n            }\n          },\n        peg$c182 = \"{\",\n        peg$c183 = peg$literalExpectation(\"{\", false),\n        peg$c184 = \"}\",\n        peg$c185 = peg$literalExpectation(\"}\", false),\n        peg$c186 = function(names, fields) {\n            return {\n              kind: 'schema-inline',\n              location: location(),\n              names: optional(names, names => names.map(name => name[0]).filter(name => name != '*'), []),\n              fields: optional(fields, fields => [fields[0], ...fields[1].map(tail => tail[2])], []),\n            }\n          },\n        peg$c187 = function(type, name) {\n            return {\n              kind: 'schema-inline-field',\n              location: location(),\n              name,\n              type: optional(type, type => type[0], null),\n            };\n          },\n        peg$c188 = \"schema\",\n        peg$c189 = peg$literalExpectation(\"schema\", false),\n        peg$c190 = function(names, parents) {\n            return {\n              names: names.map(name => name[1]).filter(name => name != '*'),\n              parents: optional(parents, parents => parents, []),\n            };\n          },\n        peg$c191 = \"alias\",\n        peg$c192 = peg$literalExpectation(\"alias\", false),\n        peg$c193 = function(spec, alias, items) {\n            return Object.assign(spec, {\n              kind: 'schema',\n              location: location(),\n              items: optional(items, extractIndented, []),\n              alias,\n            });\n          },\n        peg$c194 = function(spec, items) {\n            return Object.assign(spec, {\n              kind: 'schema',\n              location: location(),\n              items: optional(items, extractIndented, []),\n            });\n          },\n        peg$c195 = \"extends\",\n        peg$c196 = peg$literalExpectation(\"extends\", false),\n        peg$c197 = function(first, rest) {\n          var list = [first];\n          for (let item of rest) {\n            list.push(item[3]);\n          }\n          return list;\n        },\n        peg$c198 = \"normative\",\n        peg$c199 = peg$literalExpectation(\"normative\", false),\n        peg$c200 = \"optional\",\n        peg$c201 = peg$literalExpectation(\"optional\", false),\n        peg$c202 = function(sectionType, fields) {\n            return {\n              kind: 'schema-section',\n              location: location(),\n              sectionType,\n              fields: extractIndented(fields),\n            };\n          },\n        peg$c203 = function(type, name) {\n            return {\n              kind: 'schema-field',\n              location: location(),\n              type,\n              name,\n            };\n          },\n        peg$c204 = \"Text\",\n        peg$c205 = peg$literalExpectation(\"Text\", false),\n        peg$c206 = \"URL\",\n        peg$c207 = peg$literalExpectation(\"URL\", false),\n        peg$c208 = \"Number\",\n        peg$c209 = peg$literalExpectation(\"Number\", false),\n        peg$c210 = \"Boolean\",\n        peg$c211 = peg$literalExpectation(\"Boolean\", false),\n        peg$c212 = \"Bytes\",\n        peg$c213 = peg$literalExpectation(\"Bytes\", false),\n        peg$c214 = \"Object\",\n        peg$c215 = peg$literalExpectation(\"Object\", false),\n        peg$c216 = \"or\",\n        peg$c217 = peg$literalExpectation(\"or\", false),\n        peg$c218 = function(first, rest) {\n            let types = [first];\n            for (let type of rest) {\n              types.push(type[3]);\n            }\n            return {kind: 'schema-union', location: location(), types};\n          },\n        peg$c219 = function(first, rest) {\n            let types = [first];\n            for (let type of rest) {\n              types.push(type[3]);\n            }\n            return {kind: 'schema-tuple', location: location(), types};\n          },\n        peg$c220 = /^[0-9]/,\n        peg$c221 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n        peg$c222 = function(version) {\n            return Number(version.join(''));\n          },\n        peg$c223 = \" \",\n        peg$c224 = peg$literalExpectation(\" \", false),\n        peg$c225 = function(i) {\n          i = i.join('');\n          if (i.length > indent.length) {\n            indents.push(indent);\n            indent = i;\n            return true;\n          }\n        },\n        peg$c226 = function(i) {\n          i = i.join('');\n          if (i.length == indent.length) {\n            return true;\n          } else if (i.length < indent.length) {\n            indent = indents.pop();\n            return false;\n          }\n        },\n        peg$c227 = function(i) {\n          i = i.join('');\n          if (i.length >= indent.length) {\n            return true;\n          } else if (i.length < indent.length) {\n            indent = indents.pop();\n            return false;\n          }\n        },\n        peg$c228 = \"`\",\n        peg$c229 = peg$literalExpectation(\"`\", false),\n        peg$c230 = /^[^`]/,\n        peg$c231 = peg$classExpectation([\"`\"], true, false),\n        peg$c232 = function(pattern) { return pattern.join(''); },\n        peg$c233 = \"'\",\n        peg$c234 = peg$literalExpectation(\"'\", false),\n        peg$c235 = /^[^']/,\n        peg$c236 = peg$classExpectation([\"'\"], true, false),\n        peg$c237 = function(id) {return id.join('')},\n        peg$c238 = /^[A-Z]/,\n        peg$c239 = peg$classExpectation([[\"A\", \"Z\"]], false, false),\n        peg$c240 = /^[a-z0-9_]/i,\n        peg$c241 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, true),\n        peg$c242 = function(ident) {return text()},\n        peg$c243 = /^[a-z]/,\n        peg$c244 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n        peg$c245 = /^[ ]/,\n        peg$c246 = peg$classExpectation([\" \"], false, false),\n        peg$c247 = peg$anyExpectation(),\n        peg$c248 = \"\\r\",\n        peg$c249 = peg$literalExpectation(\"\\r\", false),\n        peg$c250 = \"\\n\",\n        peg$c251 = peg$literalExpectation(\"\\n\", false),\n        peg$c252 = \"//\",\n        peg$c253 = peg$literalExpectation(\"//\", false),\n        peg$c254 = function(marker) {\n            if (marker === '#' && !deprecatedCommentWarningShown) {\n              console.warn(\"'#' for comments is deprecated. Please use '//' instead\");\n              deprecatedCommentWarningShown = true;\n            }\n          },\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1 }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n    }\n\n    function peg$anyExpectation() {\n      return { type: \"any\" };\n    }\n\n    function peg$endExpectation() {\n      return { type: \"end\" };\n    }\n\n    function peg$otherExpectation(description) {\n      return { type: \"other\", description: description };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos], p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parseManifest() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      s1 = peg$parseeolWhiteSpace();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseIndent();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          s5 = peg$currPos;\n          s6 = peg$parseSameIndent();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseAnnotation();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parseeolWhiteSpace();\n              if (s8 !== peg$FAILED) {\n                s6 = [s6, s7, s8];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseSameIndent();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseManifestItem();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            s5 = peg$currPos;\n            s6 = peg$parseSameIndent();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseAnnotation();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseeolWhiteSpace();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSameIndent();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseManifestItem();\n                if (s7 !== peg$FAILED) {\n                  s5 = [s5, s6, s7];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c0(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseManifestItem() {\n      var s0;\n\n      s0 = peg$parseRecipe();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseParticleDefinition();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseImport();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseSchemaDefinition();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseSchemaAliasDefinition();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseManifestStorage();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseShape();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseMeta();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseResource();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseAnnotation() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 64) {\n        s1 = peg$c1;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c2); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parselowerIdent();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseResource() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 8) === peg$c4) {\n        s1 = peg$c4;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c5); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseupperIdent();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseIndent();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseSameIndent();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseResourceStart();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parseResourceBody();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseeolWhiteSpace();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c6(s3, s8);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseResourceStart() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c7) {\n        s1 = peg$c7;\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseeolWhiteSpace();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c9();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseResourceBody() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parseSameOrMoreIndent();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseResourceLine();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parseSameOrMoreIndent();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseResourceLine();\n            if (s4 !== peg$FAILED) {\n              s3 = [s3, s4];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c10(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseResourceLine() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c11.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c11.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseeol();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c13();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseManifestStorage() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c14) {\n        s1 = peg$c14;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c15); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c16) {\n          s1 = peg$c16;\n          peg$currPos += 5;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c17); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseupperIdent();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsewhiteSpace();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c18) {\n                s5 = peg$c18;\n                peg$currPos += 2;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsewhiteSpace();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseSchemaInline();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseListType();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseReferenceType();\n                    }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$currPos;\n                    s9 = peg$parsewhiteSpace();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseid();\n                      if (s10 !== peg$FAILED) {\n                        s9 = [s9, s10];\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$currPos;\n                      s10 = peg$parsewhiteSpace();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseVersion();\n                        if (s11 !== peg$FAILED) {\n                          s10 = [s10, s11];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$currPos;\n                        s11 = peg$parsewhiteSpace();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseTagList();\n                          if (s12 !== peg$FAILED) {\n                            s11 = [s11, s12];\n                            s10 = s11;\n                          } else {\n                            peg$currPos = s10;\n                            s10 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                        if (s10 === peg$FAILED) {\n                          s10 = null;\n                        }\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsewhiteSpace();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parseManifestStorageSource();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseeolWhiteSpace();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$currPos;\n                                s15 = peg$parseIndent();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = [];\n                                  s17 = peg$currPos;\n                                  s18 = peg$parseSameIndent();\n                                  if (s18 !== peg$FAILED) {\n                                    s19 = peg$parseManifestStorageDescription();\n                                    if (s19 !== peg$FAILED) {\n                                      s18 = [s18, s19];\n                                      s17 = s18;\n                                    } else {\n                                      peg$currPos = s17;\n                                      s17 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s17;\n                                    s17 = peg$FAILED;\n                                  }\n                                  if (s17 !== peg$FAILED) {\n                                    while (s17 !== peg$FAILED) {\n                                      s16.push(s17);\n                                      s17 = peg$currPos;\n                                      s18 = peg$parseSameIndent();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseManifestStorageDescription();\n                                        if (s19 !== peg$FAILED) {\n                                          s18 = [s18, s19];\n                                          s17 = s18;\n                                        } else {\n                                          peg$currPos = s17;\n                                          s17 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s17;\n                                        s17 = peg$FAILED;\n                                      }\n                                    }\n                                  } else {\n                                    s16 = peg$FAILED;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s15 = [s15, s16];\n                                    s14 = s15;\n                                  } else {\n                                    peg$currPos = s14;\n                                    s14 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s14;\n                                  s14 = peg$FAILED;\n                                }\n                                if (s14 === peg$FAILED) {\n                                  s14 = null;\n                                }\n                                if (s14 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c20(s3, s7, s8, s9, s10, s12, s14);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseManifestStorageSource() {\n      var s0;\n\n      s0 = peg$parseManifestStorageFileSource();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseManifestStorageResourceSource();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseManifestStorageStorageSource();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseManifestStorageFileSource() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c21) {\n        s1 = peg$c21;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c22); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseid();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c23(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseManifestStorageResourceSource() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c21) {\n        s1 = peg$c21;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c22); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseupperIdent();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c24(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseManifestStorageStorageSource() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseid();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c27(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseManifestStorageDescription() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 11) === peg$c28) {\n        s1 = peg$c28;\n        peg$currPos += 11;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsebackquotedString();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseImport() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c30) {\n        s1 = peg$c30;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c31); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseid();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c32(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseShape() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c33) {\n        s1 = peg$c33;\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseupperIdent();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsewhiteSpace();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 60) {\n                s6 = peg$c35;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c36); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhiteSpace();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseVariableTypeList();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhiteSpace();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 62) {\n                        s10 = peg$c37;\n                        peg$currPos++;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s5 = [s5, s6, s7, s8, s9, s10];\n                        s4 = s5;\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseeolWhiteSpace();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$currPos;\n                s7 = peg$parseIndent();\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$currPos;\n                  s10 = peg$parseSameIndent();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseShapeItem();\n                    if (s11 !== peg$FAILED) {\n                      s10 = [s10, s11];\n                      s9 = s10;\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$currPos;\n                    s10 = peg$parseSameIndent();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseShapeItem();\n                      if (s11 !== peg$FAILED) {\n                        s10 = [s10, s11];\n                        s9 = s10;\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s7 = [s7, s8];\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n                if (s6 === peg$FAILED) {\n                  s6 = null;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseeolWhiteSpace();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c39(s3, s4, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseShapeItem() {\n      var s0;\n\n      s0 = peg$parseShapeInterface();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseShapeSlot();\n      }\n\n      return s0;\n    }\n\n    function peg$parseShapeInterface() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parseupperIdent();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parselowerIdent();\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c40;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseShapeArgumentList();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c42;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c43); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseeolWhiteSpace();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c44(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseShapeArgumentList() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$parseShapeArgument();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s4 = peg$c45;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsewhiteSpace();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseShapeArgument();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c45;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewhiteSpace();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseShapeArgument();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c47(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseShapeArgument() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parseParticleArgumentDirection();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseParticleArgumentType();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsewhiteSpace();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parselowerIdent();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c48(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseShapeSlot() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c49) {\n        s2 = peg$c49;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c50); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewhiteSpace();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c51) {\n          s2 = peg$c51;\n          peg$currPos += 7;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c52); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7) === peg$c53) {\n            s2 = peg$c53;\n            peg$currPos += 7;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c54); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parsewhiteSpace();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c55) {\n              s5 = peg$c55;\n              peg$currPos += 6;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c56); }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsewhiteSpace();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselowerIdent();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseeolWhiteSpace();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c57(s1, s2, s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseMeta() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c58) {\n        s1 = peg$c58;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c59); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseeolWhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseIndent();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$currPos;\n            s7 = peg$parseSameIndent();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parseMetaItem();\n              if (s8 !== peg$FAILED) {\n                s7 = [s7, s8];\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$currPos;\n              s7 = peg$parseSameIndent();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseMetaItem();\n                if (s8 !== peg$FAILED) {\n                  s7 = [s7, s8];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c60(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseMetaItem() {\n      var s0;\n\n      s0 = peg$parseMetaStorageKey();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseMetaName();\n      }\n\n      return s0;\n    }\n\n    function peg$parseMetaName() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c61) {\n        s1 = peg$c61;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c62); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c63;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c64); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsewhiteSpace();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseid();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseeolWhiteSpace();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c65(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseMetaStorageKey() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 10) === peg$c66) {\n        s1 = peg$c66;\n        peg$currPos += 10;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c67); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c63;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c64); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsewhiteSpace();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseid();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseeolWhiteSpace();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c68(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleDefinition() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 8) === peg$c69) {\n        s1 = peg$c69;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c70); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseupperIdent();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsewhiteSpace();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c21) {\n                s6 = peg$c21;\n                peg$currPos += 2;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c22); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhiteSpace();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseid();\n                  if (s8 !== peg$FAILED) {\n                    s5 = [s5, s6, s7, s8];\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseeolWhiteSpace();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$currPos;\n                s7 = peg$parseIndent();\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$currPos;\n                  s10 = peg$parseSameIndent();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseParticleItem();\n                    if (s11 !== peg$FAILED) {\n                      s10 = [s10, s11];\n                      s9 = s10;\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$currPos;\n                    s10 = peg$parseSameIndent();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseParticleItem();\n                      if (s11 !== peg$FAILED) {\n                        s10 = [s10, s11];\n                        s9 = s10;\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s7 = [s7, s8];\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n                if (s6 === peg$FAILED) {\n                  s6 = null;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseeolWhiteSpace();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c71(s3, s4, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleItem() {\n      var s0;\n\n      s0 = peg$parseParticleInterface();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseParticleAffordance();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseParticleSlot();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseDescription();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleInterface() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parseupperIdent();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parselowerIdent();\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c40;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseParticleArgumentList();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c42;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c43); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseeolWhiteSpace();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c72(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleArgumentList() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$parseParticleArgument();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s4 = peg$c45;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsewhiteSpace();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseParticleArgument();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c45;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewhiteSpace();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseParticleArgument();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c47(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleArgument() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$parseParticleArgumentDirection();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseParticleArgumentType();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 63) {\n              s4 = peg$c73;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c74); }\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsewhiteSpace();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parselowerIdent();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c75(s1, s3, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleArgumentDirection() {\n      var s0, s1;\n\n      if (input.substr(peg$currPos, 5) === peg$c76) {\n        s0 = peg$c76;\n        peg$currPos += 5;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c21) {\n          s0 = peg$c21;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c22); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c78) {\n            s0 = peg$c78;\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c79); }\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 4) === peg$c80) {\n              s1 = peg$c80;\n              peg$currPos += 4;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c81); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c82();\n            }\n            s0 = s1;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleArgumentType() {\n      var s0;\n\n      s0 = peg$parseVariableType();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseSchemaInline();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseReferenceType();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseListType();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseListType() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c83;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c84); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseParticleArgumentType();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c85;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c86); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c87(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseVariableType() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 126) {\n        s1 = peg$c88;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c89); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parselowerIdent();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parsewhiteSpace();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4) === peg$c90) {\n              s5 = peg$c90;\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c91); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsewhiteSpace();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseParticleArgumentType();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c92(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseReferenceType() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parseupperIdent();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c93(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseVariableTypeList() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$parseVariableType();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s4 = peg$c45;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsewhiteSpace();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseVariableType();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c45;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c46); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewhiteSpace();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseVariableType();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c94(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleAffordance() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 10) === peg$c95) {\n        s1 = peg$c95;\n        peg$currPos += 10;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c96); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9) === peg$c97) {\n            s3 = peg$c97;\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c98); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c99) {\n              s3 = peg$c99;\n              peg$currPos += 3;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c100); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c101) {\n                s3 = peg$c101;\n                peg$currPos += 2;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c102); }\n              }\n              if (s3 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5) === peg$c103) {\n                  s3 = peg$c103;\n                  peg$currPos += 5;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                }\n              }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c105(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleSlot() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c49) {\n        s2 = peg$c49;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c50); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewhiteSpace();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c51) {\n          s2 = peg$c51;\n          peg$currPos += 7;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c52); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewhiteSpace();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.substr(peg$currPos, 6) === peg$c55) {\n              s5 = peg$c55;\n              peg$currPos += 6;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c56); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsewhiteSpace();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parselowerIdent();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$currPos;\n                s7 = peg$parsewhiteSpace();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseTagList();\n                  if (s8 !== peg$FAILED) {\n                    s7 = [s7, s8];\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n                if (s6 === peg$FAILED) {\n                  s6 = null;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseeolWhiteSpace();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$currPos;\n                    s9 = peg$parseIndent();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parseSameIndent();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseParticleSlotItem();\n                        if (s13 !== peg$FAILED) {\n                          s12 = [s12, s13];\n                          s11 = s12;\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parseSameIndent();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseParticleSlotItem();\n                          if (s13 !== peg$FAILED) {\n                            s12 = [s12, s13];\n                            s11 = s12;\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s9 = [s9, s10];\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c106(s1, s4, s5, s6, s8);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleSlotItem() {\n      var s0;\n\n      s0 = peg$parseSlotFormFactor();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseParticleProvidedSlot();\n      }\n\n      return s0;\n    }\n\n    function peg$parseSlotFormFactor() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 10) === peg$c107) {\n        s1 = peg$c107;\n        peg$currPos += 10;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c108); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 10) === peg$c109) {\n            s3 = peg$c109;\n            peg$currPos += 10;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c110); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c111) {\n              s3 = peg$c111;\n              peg$currPos += 3;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c112); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 6) === peg$c113) {\n                s3 = peg$c113;\n                peg$currPos += 6;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c114); }\n              }\n              if (s3 === peg$FAILED) {\n                if (input.substr(peg$currPos, 5) === peg$c115) {\n                  s3 = peg$c115;\n                  peg$currPos += 5;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c116); }\n                }\n              }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c117(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleProvidedSlot() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c53) {\n        s1 = peg$c53;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c54); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.substr(peg$currPos, 6) === peg$c55) {\n            s4 = peg$c55;\n            peg$currPos += 6;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c56); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewhiteSpace();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parselowerIdent();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parsewhiteSpace();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseTagList();\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseeolWhiteSpace();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$currPos;\n                  s8 = peg$parseIndent();\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    s10 = peg$currPos;\n                    s11 = peg$parseSameIndent();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parseParticleProvidedSlotItem();\n                      if (s12 !== peg$FAILED) {\n                        s11 = [s11, s12];\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                    while (s10 !== peg$FAILED) {\n                      s9.push(s10);\n                      s10 = peg$currPos;\n                      s11 = peg$parseSameIndent();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseParticleProvidedSlotItem();\n                        if (s12 !== peg$FAILED) {\n                          s11 = [s11, s12];\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s8 = [s8, s9];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c118(s3, s4, s5, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleProvidedSlotItem() {\n      var s0;\n\n      s0 = peg$parseSlotFormFactor();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseParticleProvidedSlotHandle();\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleProvidedSlotHandle() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c14) {\n        s1 = peg$c14;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c15); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6) === peg$c119) {\n          s1 = peg$c119;\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c120); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parselowerIdent();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c121(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseDescription() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 11) === peg$c28) {\n        s1 = peg$c28;\n        peg$currPos += 11;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsebackquotedString();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseIndent();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parseSameIndent();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parseParticleHandleDescription();\n                  if (s10 !== peg$FAILED) {\n                    s9 = [s9, s10];\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                if (s8 !== peg$FAILED) {\n                  while (s8 !== peg$FAILED) {\n                    s7.push(s8);\n                    s8 = peg$currPos;\n                    s9 = peg$parseSameIndent();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseParticleHandleDescription();\n                      if (s10 !== peg$FAILED) {\n                        s9 = [s9, s10];\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  }\n                } else {\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c122(s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleHandleDescription() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parselowerIdent();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsebackquotedString();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c123(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipe() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c124) {\n        s1 = peg$c124;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsewhiteSpace();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseupperIdent();\n          if (s4 === peg$FAILED) {\n            s4 = peg$parselowerIdent();\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parsewhiteSpace();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseTagList();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseIndent();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parseSameIndent();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parseRecipeItem();\n                  if (s10 !== peg$FAILED) {\n                    s9 = [s9, s10];\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parseSameIndent();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseRecipeItem();\n                    if (s10 !== peg$FAILED) {\n                      s9 = [s9, s10];\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c126(s2, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeItem() {\n      var s0;\n\n      s0 = peg$parseRecipeParticle();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseRecipeHandle();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseRecipeSlot();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseRecipeConnection();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseRecipeSearch();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseDescription();\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseLocalName() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c127) {\n        s1 = peg$c127;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c128); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parselowerIdent();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c129(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseTopLevelAlias() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c127) {\n        s1 = peg$c127;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c128); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseupperIdent();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c129(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeParticle() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      s1 = peg$parseParticleRef();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsewhiteSpace();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseLocalName();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseeolWhiteSpace();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parseIndent();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$parseSameIndent();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseRecipeParticleItem();\n                if (s9 !== peg$FAILED) {\n                  s8 = [s8, s9];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$parseSameIndent();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseRecipeParticleItem();\n                  if (s9 !== peg$FAILED) {\n                    s8 = [s8, s9];\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c130(s1, s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeParticleItem() {\n      var s0;\n\n      s0 = peg$parseRecipeParticleConnection();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseRecipeParticleSlotConnection();\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeParticleConnection() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$parselowerIdent();\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s1 = peg$c131;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDirection();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsewhiteSpace();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseConnectionTarget();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseeolWhiteSpace();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c133(s1, s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeParticleSlotConnection() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c51) {\n        s1 = peg$c51;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c52); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseRecipeSlotConnectionRef();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsewhiteSpace();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseLocalName();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseeolWhiteSpace();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$currPos;\n                s7 = peg$parseIndent();\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$currPos;\n                  s10 = peg$parseSameIndent();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseRecipeParticleProvidedSlot();\n                    if (s11 !== peg$FAILED) {\n                      s10 = [s10, s11];\n                      s9 = s10;\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$currPos;\n                    s10 = peg$parseSameIndent();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseRecipeParticleProvidedSlot();\n                      if (s11 !== peg$FAILED) {\n                        s10 = [s10, s11];\n                        s9 = s10;\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s7 = [s7, s8];\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n                if (s6 === peg$FAILED) {\n                  s6 = null;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c134(s3, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeSlotConnectionRef() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parselowerIdent();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseSpaceTagList();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c135(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeParticleProvidedSlot() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c53) {\n        s1 = peg$c53;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c54); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parselowerIdent();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsewhiteSpace();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseLocalName();\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseeolWhiteSpace();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c136(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeConnection() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$parseConnectionTarget();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDirection();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsewhiteSpace();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseConnectionTarget();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseeolWhiteSpace();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c137(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeSearch() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c138) {\n        s1 = peg$c138;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c139); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsebackquotedString();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseIndent();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = peg$parseSameIndent();\n                if (s8 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 6) === peg$c140) {\n                    s9 = peg$c140;\n                    peg$currPos += 6;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c141); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = [];\n                    s11 = peg$currPos;\n                    s12 = peg$parsewhiteSpace();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parsebackquotedString();\n                      if (s13 !== peg$FAILED) {\n                        s12 = [s12, s13];\n                        s11 = s12;\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s11;\n                      s11 = peg$FAILED;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parsewhiteSpace();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parsebackquotedString();\n                          if (s13 !== peg$FAILED) {\n                            s12 = [s12, s13];\n                            s11 = s12;\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                    } else {\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseeolWhiteSpace();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s6 = [s6, s7];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c142(s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseDirection() {\n      var s0;\n\n      if (input.substr(peg$currPos, 2) === peg$c143) {\n        s0 = peg$c143;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c144); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c145) {\n          s0 = peg$c145;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c146); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s0 = peg$c147;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c148); }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseConnectionTarget() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parseupperIdent();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parselowerIdent();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s3 = peg$c149;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parselowerIdent();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parsewhiteSpace();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseTagList();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c151(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseTagList();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c152(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeHandle() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 63) {\n        s1 = peg$c73;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c153) {\n          s1 = peg$c153;\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c154); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c155) {\n            s1 = peg$c155;\n            peg$currPos += 3;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c156); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c157) {\n              s1 = peg$c157;\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c158); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4) === peg$c159) {\n                s1 = peg$c159;\n                peg$currPos += 4;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c160); }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsewhiteSpace();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseHandleOrSlotRef();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parsewhiteSpace();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLocalName();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c161(s1, s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseTag() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 35) {\n        s1 = peg$c162;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c163); }\n      }\n      if (s1 !== peg$FAILED) {\n        if (peg$c164.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c165); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c166.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c167); }\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (peg$c166.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c167); }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c168();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseTagList() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseTag();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsewhiteSpace();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseTagList();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c169(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSpaceTagList() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsewhiteSpace();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseTagList();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c170(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseParticleRef() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseupperIdent();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseSpaceTagList();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c171(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseTagList();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c172(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 12) === peg$c173) {\n            s1 = peg$c173;\n            peg$currPos += 12;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c174); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsewhiteSpace();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parselowerIdent();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parseSpaceTagList();\n                if (s4 === peg$FAILED) {\n                  s4 = null;\n                }\n                if (s4 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c175(s3, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseHandleOrSlotRef() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseid();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseSpaceTagList();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c176(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseupperIdent();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseSpaceTagList();\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c177(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseTagList();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c178(s1);\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseRecipeSlot() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c179) {\n        s1 = peg$c179;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c180); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsewhiteSpace();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseHandleOrSlotRef();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parsewhiteSpace();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLocalName();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c181(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaInline() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parseupperIdent();\n      if (s3 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s3 = peg$c131;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsewhiteSpace();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parseupperIdent();\n          if (s3 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 42) {\n              s3 = peg$c131;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c132); }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsewhiteSpace();\n            if (s4 !== peg$FAILED) {\n              s3 = [s3, s4];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 123) {\n          s2 = peg$c182;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c183); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseSchemaInlineField();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s7 = peg$c45;\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c46); }\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parsewhiteSpace();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseSchemaInlineField();\n                if (s9 !== peg$FAILED) {\n                  s7 = [s7, s8, s9];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s7 = peg$c45;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c46); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsewhiteSpace();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseSchemaInlineField();\n                  if (s9 !== peg$FAILED) {\n                    s7 = [s7, s8, s9];\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 125) {\n              s4 = peg$c184;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c185); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c186(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaInlineField() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseSchemaType();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewhiteSpace();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parselowerIdent();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c187(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaSpec() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c188) {\n        s1 = peg$c188;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c189); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parsewhiteSpace();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s5 = peg$c131;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c132); }\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseupperIdent();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$parsewhiteSpace();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 42) {\n                s5 = peg$c131;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c132); }\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseupperIdent();\n              }\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseSchemaExtends();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c190(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaAliasDefinition() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c191) {\n        s1 = peg$c191;\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c192); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseSchemaSpec();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsewhiteSpace();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseTopLevelAlias();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseeolWhiteSpace();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$currPos;\n                  s8 = peg$parseIndent();\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    s10 = peg$currPos;\n                    s11 = peg$parseSameIndent();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parseSchemaItem();\n                      if (s12 !== peg$FAILED) {\n                        s11 = [s11, s12];\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                    while (s10 !== peg$FAILED) {\n                      s9.push(s10);\n                      s10 = peg$currPos;\n                      s11 = peg$parseSameIndent();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseSchemaItem();\n                        if (s12 !== peg$FAILED) {\n                          s11 = [s11, s12];\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s8 = [s8, s9];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c193(s3, s5, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaDefinition() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      s1 = peg$parseSchemaSpec();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseeolWhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseIndent();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$currPos;\n            s7 = peg$parseSameIndent();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parseSchemaItem();\n              if (s8 !== peg$FAILED) {\n                s7 = [s7, s8];\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$currPos;\n              s7 = peg$parseSameIndent();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseSchemaItem();\n                if (s8 !== peg$FAILED) {\n                  s7 = [s7, s8];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c194(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaExtends() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      s0 = peg$currPos;\n      s1 = peg$parsewhiteSpace();\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c195) {\n          s2 = peg$c195;\n          peg$currPos += 7;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c196); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewhiteSpace();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseupperIdent();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$currPos;\n              s7 = peg$parsewhiteSpace();\n              if (s7 === peg$FAILED) {\n                s7 = null;\n              }\n              if (s7 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s8 = peg$c45;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c46); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsewhiteSpace();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseupperIdent();\n                    if (s10 !== peg$FAILED) {\n                      s7 = [s7, s8, s9, s10];\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$currPos;\n                s7 = peg$parsewhiteSpace();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s8 = peg$c45;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c46); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhiteSpace();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseupperIdent();\n                      if (s10 !== peg$FAILED) {\n                        s7 = [s7, s8, s9, s10];\n                        s6 = s7;\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c197(s4, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaItem() {\n      var s0;\n\n      s0 = peg$parseSchemaSection();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseSchemaField();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseDescription();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaSection() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9) === peg$c198) {\n        s1 = peg$c198;\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c199); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8) === peg$c200) {\n          s1 = peg$c200;\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c201); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseeolWhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseIndent();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$currPos;\n            s7 = peg$parseSameIndent();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parseSchemaField();\n              if (s8 !== peg$FAILED) {\n                s7 = [s7, s8];\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$currPos;\n                s7 = peg$parseSameIndent();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseSchemaField();\n                  if (s8 !== peg$FAILED) {\n                    s7 = [s7, s8];\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c202(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaField() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseSchemaType();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parselowerIdent();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c203(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaType() {\n      var s0;\n\n      s0 = peg$parseSchemaPrimitiveType();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseSchemaUnionType();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseSchemaTupleType();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaPrimitiveType() {\n      var s0;\n\n      if (input.substr(peg$currPos, 4) === peg$c204) {\n        s0 = peg$c204;\n        peg$currPos += 4;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c205); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c206) {\n          s0 = peg$c206;\n          peg$currPos += 3;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c207); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c208) {\n            s0 = peg$c208;\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c209); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7) === peg$c210) {\n              s0 = peg$c210;\n              peg$currPos += 7;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c211); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5) === peg$c212) {\n                s0 = peg$c212;\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c213); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c214) {\n                  s0 = peg$c214;\n                  peg$currPos += 6;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c215); }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaUnionType() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c40;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c41); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseSchemaPrimitiveType();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$parsewhiteSpace();\n            if (s6 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c216) {\n                s7 = peg$c216;\n                peg$currPos += 2;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c217); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsewhiteSpace();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseSchemaPrimitiveType();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                s5 = peg$currPos;\n                s6 = peg$parsewhiteSpace();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c216) {\n                    s7 = peg$c216;\n                    peg$currPos += 2;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c217); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsewhiteSpace();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseSchemaPrimitiveType();\n                      if (s9 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              }\n            } else {\n              s4 = peg$FAILED;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsewhiteSpace();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s6 = peg$c42;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c43); }\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c218(s3, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSchemaTupleType() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c40;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c41); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsewhiteSpace();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseSchemaPrimitiveType();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$parsewhiteSpace();\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s7 = peg$c45;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c46); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsewhiteSpace();\n                if (s8 === peg$FAILED) {\n                  s8 = null;\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseSchemaPrimitiveType();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$parsewhiteSpace();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s7 = peg$c45;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c46); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsewhiteSpace();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSchemaPrimitiveType();\n                    if (s9 !== peg$FAILED) {\n                      s6 = [s6, s7, s8, s9];\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsewhiteSpace();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s6 = peg$c42;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c43); }\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c219(s3, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseVersion() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 64) {\n        s1 = peg$c1;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c2); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c220.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c221); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c220.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c221); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c222(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseIndent() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      s1 = peg$currPos;\n      s2 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s3 = peg$c223;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c224); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (input.charCodeAt(peg$currPos) === 32) {\n            s3 = peg$c223;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c224); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s3 = peg$c225(s2);\n        if (s3) {\n          s3 = void 0;\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s1 !== peg$FAILED) {\n        peg$currPos = s0;\n        s0 = void 0;\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSameIndent() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$currPos;\n      s3 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s4 = peg$c223;\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c224); }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s4 = peg$c223;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c224); }\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s4 = peg$c226(s3);\n        if (s4) {\n          s4 = void 0;\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s2 !== peg$FAILED) {\n        peg$currPos = s1;\n        s1 = void 0;\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s3 = peg$c223;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c224); }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (input.charCodeAt(peg$currPos) === 32) {\n            s3 = peg$c223;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c224); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSameOrMoreIndent() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$currPos;\n      s3 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s4 = peg$c223;\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c224); }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s4 = peg$c223;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c224); }\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s4 = peg$c227(s3);\n        if (s4) {\n          s4 = void 0;\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s2 !== peg$FAILED) {\n        peg$currPos = s1;\n        s1 = void 0;\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s3 = peg$c223;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c224); }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (input.charCodeAt(peg$currPos) === 32) {\n            s3 = peg$c223;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c224); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c13();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsebackquotedString() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 96) {\n        s1 = peg$c228;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c229); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c230.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c231); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c230.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c231); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 96) {\n            s3 = peg$c228;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c229); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c232(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseid() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s1 = peg$c233;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c234); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c235.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c236); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c235.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c236); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s3 = peg$c233;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c234); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c237(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseupperIdent() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (peg$c238.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c239); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        if (peg$c240.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c241); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c240.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c241); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c242(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parselowerIdent() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (peg$c243.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c244); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        if (peg$c240.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c241); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c240.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c241); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c242(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsewhiteSpace() {\n      var s0, s1;\n\n      s0 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s1 = peg$c223;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c224); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (input.charCodeAt(peg$currPos) === 32) {\n            s1 = peg$c223;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c224); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseeolWhiteSpace() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c245.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c246); }\n      }\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c245.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c246); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        if (input.length > peg$currPos) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c247); }\n        }\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = void 0;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c245.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c246); }\n        }\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c245.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c246); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseeol();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseeolWhiteSpace();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s1 = [s1, s2, s3];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecomment();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseeol() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 13) {\n        s1 = peg$c248;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c249); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s2 = peg$c250;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c251); }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 13) {\n            s3 = peg$c248;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c249); }\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomment() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c245.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c246); }\n      }\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c245.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c246); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s2 = peg$c162;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c163); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c252) {\n            s2 = peg$c252;\n            peg$currPos += 2;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c253); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          if (peg$c11.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c12); }\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (peg$c11.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c12); }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseeolWhiteSpace();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c254(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n\n      var indent = '';\n      var startIndent = '';\n      var indents = [];\n      var deprecatedCommentWarningShown = false;\n      function extractIndented(items) {\n        return items[1].map(item => item[1]);\n      }\n      function optional(result, extract, defaultValue) {\n        if (result != null) {\n          let value = extract(result);\n          if (value != null) {\n            return value;\n          }\n        }\n        return defaultValue == null ? null : defaultValue;\n      }\n      function checkNormal(result) {\n        if (['string', 'number', 'boolean'].includes(typeof result) || result === null) {\n          return;\n        }\n        if (result === undefined) {\n          throw new Error(`result was undefined`);\n        }\n        if (Array.isArray(result)) {\n          for (let item of result) {\n            checkNormal(item);\n          }\n          return;\n        }\n        if (result.model) {\n          throw new Error(`unexpected 'model' in ${JSON.stringify(result)}`);\n        }\n        if (!result.location) {\n          throw new Error(`no 'location' in ${JSON.stringify(result)}`);\n        }\n        if (!result.kind) {\n          throw new Error(`no 'kind' in ${JSON.stringify(result)}`);\n        }\n        for (let key of Object.keys(result)) {\n          if (['location', 'kind'].includes(key)) {\n            continue;\n          }\n          checkNormal(result[key]);\n        }\n      }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})()\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/build/manifest-parser.js\n// module id = 68\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nlet supportedTypes = ['Text', 'URL', 'Number', 'Boolean'];\n\nclass JsonldToManifest {\n  static convert(jsonld, theClass) {\n    let obj = JSON.parse(jsonld);\n    let classes = {};\n    let properties = {};\n\n    if (!obj['@graph']) {\n      obj['@graph'] = [obj];\n    }\n\n    for (let item of obj['@graph']) {\n      if (item['@type'] == 'rdf:Property')\n        properties[item['@id']] = item;\n      else if (item['@type'] == 'rdfs:Class') {\n        classes[item['@id']] = item;\n        item.subclasses = [];\n        item.superclass = null;\n      }\n    }\n\n    for (let clazz of Object.values(classes)) {\n      if (clazz['rdfs:subClassOf'] !== undefined) {\n        if (clazz['rdfs:subClassOf'].length == undefined)\n          clazz['rdfs:subClassOf'] = [clazz['rdfs:subClassOf']];\n        for (let subClass of clazz['rdfs:subClassOf']) {\n          let superclass = subClass['@id'];\n          if (clazz.superclass == undefined)\n            clazz.superclass = [];\n          if (classes[superclass]) {\n            classes[superclass].subclasses.push(clazz);\n            clazz.superclass.push(classes[superclass]);\n          } else {\n            clazz.superclass.push({'@id': superclass});\n          }\n        }\n      }\n    }\n\n    for (let clazz of Object.values(classes)) {\n      if (clazz.subclasses.length == 0 && theClass == undefined) {\n        theClass = clazz;\n      }\n    }\n\n    let relevantProperties = [];\n    for (let property of Object.values(properties)) {\n      let domains = property['schema:domainIncludes'];\n      if (!domains)\n        domains = {'@id': theClass['@id']};\n      if (!domains.length)\n        domains = [domains];\n      domains = domains.map(a => a['@id']);\n      if (domains.includes(theClass['@id'])) {\n        let name = property['@id'].split(':')[1];\n        let type = property['schema:rangeIncludes'];\n        if (!type)\n          console.log(property);\n        if (!type.length)\n          type = [type];\n\n        type = type.map(a => a['@id'].split(':')[1]);\n        type = type.filter(type => supportedTypes.includes(type));\n        if (type.length > 0)\n        relevantProperties.push({name, type});\n      }\n    }\n\n    let className = theClass['@id'].split(':')[1];\n    let superNames = theClass.superclass ? theClass.superclass.map(a => a['@id'].split(':')[1]) : [];\n\n    let s = '';\n    for (let superName of superNames)\n      s += `import 'https://schema.org/${superName}'\\n\\n`;\n\n    s += `schema ${className}`;\n    if (superNames.length > 0)\n      s += ` extends ${superNames.join(', ')}`;\n\n    if (relevantProperties.length > 0) {\n      for (let property of relevantProperties) {\n        let type;\n        if (property.type.length > 1)\n          type = '(' + property.type.join(' or ') + ')';\n        else\n          type = property.type[0];\n        s += `\\n  ${type} ${property.name}`;\n      }\n    }\n    s += '\\n';\n\n    return s;\n  }\n}\n\nexport default JsonldToManifest;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/converters/jsonldToManifest.js\n// module id = 69\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../../platform/assert-web.js';\n\nexport default class AbstractDevtoolsChannel {\n  constructor() {\n    this.debouncedMessages = [];\n    this.debouncing = false;\n    this.messageListeners = new Map();\n    this.ready = new Promise((resolve, reject) => {\n      this._makeReady = resolve;\n    });\n  }\n\n  send(message) {\n    this.debouncedMessages.push(message);\n    if (!this.debouncing) {\n      this.debouncing = true;\n      setTimeout(() => {\n        this._flush(this.debouncedMessages);\n        this.debouncedMessages = [];\n        this.debouncing = false;\n      }, 100);\n    }\n  }\n\n  listen(arcOrId, messageType, callback) {\n    assert(messageType);\n    assert(arcOrId);\n    const arcId = typeof arcOrId === 'string' ? arcOrId : arcOrId.id.toString();\n    const key = `${arcId}/${messageType}`;\n    let listeners = this.messageListeners.get(key);\n    if (!listeners) this.messageListeners.set(key, listeners = []);\n    listeners.push(callback);\n  }\n\n  _handleMessage(msg) {\n    let listeners = this.messageListeners.get(`${msg.targetArcId}/${msg.messageType}`);\n    if (!listeners) {\n      console.warn(`No one is listening to ${msg.messageType} message`);\n    } else {\n      for (let listener of listeners) listener(msg);\n    }\n  }\n\n  _flush(messages) {\n    throw 'Not implemented in an abstract class';\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/debug/abstract-devtools-channel.js\n// module id = 70\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport devtoolsChannelProvider from './devtools-channel-provider.js';\nimport {enableTracingAdapter} from './tracing-adapter.js';\nimport {ArcPlannerInvoker} from './arc-planner-invoker.js';\n\nexport class ArcDebugHandler {\n  constructor(arc) {\n    enableTracingAdapter();\n\n    // Message handles go here.\n    new ArcPlannerInvoker(arc);\n\n    devtoolsChannelProvider.get().send({\n      messageType: 'arc-available',\n      messageBody: {\n        id: arc.id.toString(),\n        isSpeculative: arc.isSpeculative\n      }\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/debug/arc-debug-handler.js\n// module id = 71\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport devtoolsChannelProvider from './devtools-channel-provider.js';\nimport Planner from '../planner.js';\nimport Manifest from '../manifest.js';\n\nexport class ArcPlannerInvoker {\n  constructor(arc) {\n    this.arc = arc;\n    this.planner = new Planner();\n    this.planner.init(arc);\n    this.devtoolsChannel = devtoolsChannelProvider.get();\n\n    this.devtoolsChannel.listen(arc, 'fetch-strategies', () => this.devtoolsChannel.send({\n      messageType: 'planner-strategies',\n      messageBody: this.planner.strategizer._strategies.map(a => a.constructor.name)\n    }));\n\n    this.devtoolsChannel.listen(arc, 'invoke-planner', async msg => this.devtoolsChannel.send({\n      messageType: 'invoke-planner-result',\n      messageBody: await this.invokePlanner(msg.messageBody)\n    }));\n  }\n\n  async invokePlanner(msg) {\n    let strategy = this.planner.strategizer._strategies.find(s => s.constructor.name === msg.strategy);\n    if (!strategy) return {error: 'could not find strategy'};\n\n    let manifest;\n    try {\n      manifest = await Manifest.parse(msg.recipe, {loader: this.arc._loader, fileName: 'manifest.manifest'});\n    } catch (error) {\n      return {error: error.message};\n    }\n\n    let recipe = manifest.recipes[0];\n    recipe.normalize();\n\n    let results = await strategy.generate({\n      generation: 0,\n      generated: [{result: recipe, score: 1}],\n      population: [{result: recipe, score: 1}],\n      terminal: []\n    });\n\n    for (let result of results) {\n      result.hash = await result.hash;\n      result.derivation = undefined;\n      let recipe = result.result;\n      result.result = recipe.toString({showUnresolved: true});\n\n      if (!Object.isFrozen(recipe)) {\n        let errors = new Map();\n        recipe.normalize({errors});\n        result.errors = [...errors.keys()].map(thing => ({id: thing.id, error: errors.get(thing)}));\n        result.normalized = recipe.toString();\n      }\n    }\n\n    return {results};\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/debug/arc-planner-invoker.js\n// module id = 72\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n 'use strict';\n\nimport devtoolsChannelProvider from './devtools-channel-provider.js';\n\nexport default class OuterPortAttachment {\n  constructor(arc) {\n    this._arcIdString = arc.id.toString();\n    this._speculative = arc.isSpeculative;\n    this._callbackRegistry = {};\n    this._particleRegistry = {};\n  }\n\n  InstantiateParticle(particle, {id, spec, handles}) {\n    this._particleRegistry[id] = spec;\n    devtoolsChannelProvider.get().send({\n      messageType: 'InstantiateParticle',\n      messageBody: Object.assign(\n        this._arcMetadata(),\n        this._trimParticleSpec(id, spec, handles)\n      )\n    });\n  }\n\n  SimpleCallback({callback, data}) {\n    let callbackDetails = this._callbackRegistry[callback];\n    if (callbackDetails) {\n      // Copying callback data, as the callback can be used multiple times.\n      this._sendDataflowMessage(Object.assign({}, callbackDetails), data);\n    }\n  }\n\n  onSynchronize({handle, target, callback, modelCallback, type, particleId}) {\n    this._callbackRegistry[callback] = this._describeHandleCall(\n      {operation: `on-${type}`, handle, particleId});\n    this._callbackRegistry[modelCallback] = this._describeHandleCall(\n      {operation: 'sync-model', handle, particleId});\n  }\n\n  onHandleGet({handle, callback, particleId}) {\n    this._callbackRegistry[callback] = this._describeHandleCall(\n      {operation: 'get', handle, particleId});\n  }\n\n  onHandleToList({handle, callback, particleId}) {\n    this._callbackRegistry[callback] = this._describeHandleCall(\n      {operation: 'toList', handle, particleId});\n  }\n\n  onHandleSet({handle, data, particleId}) {\n    this._logHandleCall({operation: 'set', handle, data, particleId});\n  }\n\n  onHandleStore({handle, data, particleId}) {\n    this._logHandleCall({operation: 'store', handle, data, particleId});\n  }\n\n  onHandleClear({handle, particleId}) {\n    this._logHandleCall({operation: 'clear', handle, particleId});\n  }\n\n  onHandleRemove({handle, data, particleId}) {\n    this._logHandleCall({operation: 'remove', handle, data, particleId});\n  }\n\n  _logHandleCall(args) {\n    this._sendDataflowMessage(this._describeHandleCall(args), args.data);\n  }\n\n  _sendDataflowMessage(messageBody, data) {\n    messageBody.data = JSON.stringify(data);\n    messageBody.timestamp = Date.now();\n    devtoolsChannelProvider.get().send({messageType: 'dataflow', messageBody});\n  }\n\n  _describeHandleCall({operation, handle, particleId}) {\n    return Object.assign(this._arcMetadata(), {\n      operation,\n      particle: this._describeParticle(particleId),\n      handle: this._describeHandle(handle)\n    });\n  }\n\n  _arcMetadata() {\n    return {\n      arcId: this._arcIdString,\n      speculative: this._speculative\n    };\n  }\n\n  _trimParticleSpec(id, spec, handles) {\n    let connections = {};\n    spec.connectionMap.forEach((value, key) => {\n      connections[key] = Object.assign({\n        direction: value.direction\n      }, this._describeHandle(handles.get(key)));\n    });\n    return {\n      id,\n      name: spec.name,\n      connections,\n      implFile: spec.implFile\n    };\n  }\n\n  _describeParticle(id) {\n    let particleSpec = this._particleRegistry[id];\n    return {\n      id,\n      name: particleSpec && particleSpec.name\n      // TODO: Send entire spec only once and refer to it by ID in the tool.\n    };\n  }\n\n  _describeHandle(handle) {\n    return {\n      id: handle.id,\n      storageKey: handle._storageKey,\n      name: handle.name,\n      description: handle.description,\n      type: this._describeHandleType(handle._type)\n    };\n  }\n\n  // TODO: This is fragile and incomplete. Change this into sending entire\n  //       handle object once and refer back to it via its ID in the tool.\n  _describeHandleType(handleType) {\n    switch (handleType.constructor.name) {\n      case 'Type':\n        switch (handleType.tag) {\n          case 'SetView': return `[${this._describeHandleType(handleType.data)}]`;\n          case 'Entity': return this._describeHandleType(handleType.data);\n          default: return `${handleType.tag} ${this._describeHandleType(handleType.data)}`;\n        }\n      case 'Schema':\n        return handleType.name;\n      case 'Shape':\n        return 'Shape';\n    }\n    return '';\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/debug/outer-port-attachment.js\n// module id = 73\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport devtoolsChannelProvider from './devtools-channel-provider.js';\n\nexport default class StrategyExplorerAdapter {\n  static processGenerations(generations) {\n    devtoolsChannelProvider.get().send({\n      messageType: 'generations',\n      // TODO: Implement simple serialization and move the logic in adapt()\n      //       into the Strategy Explorer proper.\n      messageBody: new StrategyExplorerAdapter().adapt(generations)\n    });\n  }\n  constructor() {\n    this.parentMap = new Map();\n    this.lastID = 0;\n  }\n  adapt(generations) {\n    return generations.map(pop => this._preparePopulation(pop.generated, pop.record));\n  }\n  _addExtraPredecessor(parent, hash) {\n    let extras = [];\n    if (parent && !this.parentMap.has(parent)) {\n      this.parentMap.set(parent, this.lastID);\n      parent.derivation.forEach(d => extras = extras.concat(this._addExtraPredecessor(d.parent, hash)));\n      extras.push({result: parent.result,\n                   score: parent.score,\n                   derivation: parent.derivation,\n                   description: parent.description,\n                   hash: hash,\n                   valid: parent.valid,\n                   active: parent.active,\n                   combined: true,\n                   id: this.lastID++});\n    }\n    return extras;\n  }\n  _preparePopulation(population, record) {\n    // Adding those here to reuse recipe resolution computation.\n    record.resolvedDerivations = 0;\n    record.resolvedDerivationsByStrategy = {};\n\n    let extras = [];\n    population = population.map(recipe => {\n      let {result, score, derivation, description, hash, valid, active} = recipe;\n      recipe.derivation.forEach(d => extras = extras.concat(this._addExtraPredecessor(d.parent, hash)));\n      this.parentMap.set(recipe, this.lastID);\n      return {result, score, derivation, description, hash, valid, active, id: this.lastID++};\n    });\n    population = extras.concat(population);\n\n    population.forEach(item => {\n      item.derivation = item.derivation.map(derivItem => {\n        let parent, strategy;\n        if (derivItem.parent)\n          parent = this.parentMap.get(derivItem.parent);\n        if (derivItem.strategy)\n          strategy = derivItem.strategy.constructor.name;\n        return {parent, strategy};\n      });\n      item.resolved = item.result.isResolved();\n      if (item.resolved) {\n        record.resolvedDerivations++;\n        let strategy = item.derivation[0].strategy;\n        if (record.resolvedDerivationsByStrategy[strategy] === undefined)\n          record.resolvedDerivationsByStrategy[strategy] = 0;\n        record.resolvedDerivationsByStrategy[strategy]++;\n      }\n      let options = {showUnresolved: true, showInvalid: false, details: ''};\n      item.result = item.result.toString(options);\n    });\n    let populationMap = {};\n    population.forEach(item => {\n      if (populationMap[item.derivation[0].strategy] == undefined)\n        populationMap[item.derivation[0].strategy] = [];\n      populationMap[item.derivation[0].strategy].push(item);\n    });\n    let result = {population: [], record};\n    Object.keys(populationMap).forEach(strategy => {\n      result.population.push({strategy: strategy, recipes: populationMap[strategy]});\n    });\n    return result;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/debug/strategy-explorer-adapter.js\n// module id = 74\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport devtoolsChannelProvider from './devtools-channel-provider.js';\nimport Tracing from '../../tracelib/trace.js';\n\nlet streamingToDevtools = false;\n\nfunction enableTracingAdapter() {\n  if (!streamingToDevtools) {\n    if (!Tracing.enabled) Tracing.enable();\n\n    const channel = devtoolsChannelProvider.get();\n\n    channel.send({\n      messageType: 'trace-time-sync',\n      messageBody: {\n        traceTime: Tracing.now(),\n        localTime: Date.now()\n      }\n    });\n\n    Tracing.stream(\n      trace => channel.send({\n        messageType: 'trace',\n        messageBody: trace\n      }),\n      trace => trace.ov // Overview events only.\n    );\n\n    streamingToDevtools = true;\n  }\n}\n\nexport {enableTracingAdapter};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/debug/tracing-adapter.js\n// module id = 75\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport {DescriptionFormatter} from './description.js';\n\nexport default class DescriptionDomFormatter extends DescriptionFormatter {\n  constructor(description) {\n    super(description);\n    this._nextID = 0;\n  }\n\n  descriptionFromString(str) {\n    return {template: super.descriptionFromString(str), model: {}};\n  }\n\n  _isSelectedDescription(desc) {\n    return super._isSelectedDescription(desc) || (!!desc.template && !!desc.model);\n  }\n\n  _populateParticleDescription(particle, descriptionByName) {\n    let result = super._populateParticleDescription(particle, descriptionByName);\n\n    if (descriptionByName['_template_']) {\n      result = Object.assign(result, {\n        template: descriptionByName['_template_'],\n        model: JSON.parse(descriptionByName['_model_'])\n      });\n    }\n\n    return result;\n  }\n\n  async _combineSelectedDescriptions(selectedDescriptions) {\n    let suggestionByParticleDesc = new Map();\n    await Promise.all(selectedDescriptions.map(async (particleDesc, index) => {\n      if (this.seenParticles.has(particleDesc._particle)) {\n        return;\n      }\n\n      let {template, model} = this._retrieveTemplateAndModel(particleDesc, index);\n\n      let success = await Promise.all(Object.keys(model).map(async tokenKey => {\n        let token = this._initHandleToken(model[tokenKey], particleDesc);\n        let tokenValue = await this.tokenToString(token);\n\n        if (tokenValue == undefined) {\n          return false;\n        } else if (tokenValue && tokenValue.template && tokenValue.model) {\n          // Dom token.\n          template = template.replace(`{{${tokenKey}}}`, tokenValue.template);\n          delete model[tokenKey];\n          model = Object.assign(model, tokenValue.model);\n        } else { // Text token.\n          // Replace tokenKey, in case multiple selected suggestions use the same key.\n          let newTokenKey = `${tokenKey}${++this._nextID}`;\n          template = template.replace(`{{${tokenKey}}}`, `{{${newTokenKey}}}`);\n          delete model[tokenKey];\n          model[newTokenKey] = tokenValue;\n        }\n        return true;\n      }));\n\n      if (success.every(s => !!s)) {\n        suggestionByParticleDesc.set(particleDesc, {template, model});\n      }\n    }));\n\n    // Populate suggestions list while maintaining original particles order.\n    let suggestions = [];\n    selectedDescriptions.forEach(desc => {\n      if (suggestionByParticleDesc.has(desc)) {\n        suggestions.push(suggestionByParticleDesc.get(desc));\n      }\n    });\n\n    if (suggestions.length > 0) {\n      let result = this._joinDescriptions(suggestions);\n      result.template += '.';\n      return result;\n    }\n  }\n\n  _retrieveTemplateAndModel(particleDesc, index) {\n    if (particleDesc.template && particleDesc.model) {\n      return {template: particleDesc.template, model: particleDesc.model};\n    }\n    assert(particleDesc.pattern, 'Description must contain template and model, or pattern');\n    let template = '';\n    let model = {};\n    let tokens = this._initTokens(particleDesc.pattern, particleDesc);\n\n    tokens.forEach((token, i) => {\n      if (token.text) {\n        template = template.concat(`${index == 0 && i == 0 ? token.text[0].toUpperCase() + token.text.slice(1) : token.text}`);\n      } else { // handle or slot handle.\n        let sanitizedFullName = token.fullName.replace(/[.{}_\\$]/g, '');\n        let attribute = '';\n        // TODO(mmandlis): capitalize the data in the model instead.\n        if (i == 0) {\n          // Capitalize the first letter in the token.\n          template = template.concat(`<style>\n            [firstletter]::first-letter { text-transform: capitalize; }\n            [firstletter] {display: inline-block}\n            </style>`);\n          attribute = ' firstletter';\n        }\n        template = template.concat(`<span${attribute}>{{${sanitizedFullName}}}</span>`);\n        model[sanitizedFullName] = token.fullName;\n      }\n    });\n\n    return {template, model};\n  }\n\n  _joinDescriptions(descs) {\n    // // If all tokens are strings, just join them.\n    if (descs.every(desc => typeof desc === 'string')) {\n      return super._joinDescriptions(descs);\n    }\n\n    let result = {template: '', model: {}};\n    let count = descs.length;\n    descs.forEach((desc, i) => {\n      if (!desc.template || !desc.model) {\n        return;\n      }\n\n      result.template += desc.template;\n      result.model = Object.assign(result.model, desc.model);\n      let delim;\n      if (i < count - 2) {\n        delim = ', ';\n      } else if (i == count - 2) {\n        delim = ['', '', ' and ', ', and '][Math.min(3, count)];\n      }\n      if (delim) {\n        result.template += delim;\n      }\n    });\n    return result;\n  }\n\n  _joinTokens(tokens) {\n    // If all tokens are strings, just join them.\n    if (tokens.every(token => typeof token === 'string')) {\n      return super._joinTokens(tokens);\n    }\n\n    tokens = tokens.map(token => {\n      if (typeof token !== 'object') {\n        return {\n          template: `<span>{{text${++this._nextID}}}</span>`,\n          model: {[`text${this._nextID}`]: token}\n        };\n      }\n      return token;\n    });\n\n    let nonEmptyTokens = tokens.filter(token => token && !!token.template && !!token.model);\n    return {\n      template: nonEmptyTokens.map(token => token.template).join(''),\n      model: nonEmptyTokens.map(token => token.model).reduce((prev, curr) => Object.assign(prev, curr), {})\n    };\n  }\n\n  _combineDescriptionAndValue(token, description, handleValue) {\n    if (!!description.template && !!description.model) {\n      return {\n        template: `${description.template} (${handleValue.template})`,\n        model: Object.assign(description.model, handleValue.model)\n      };\n    }\n    let descKey = `${token.handleName}Description${++this._nextID}`;\n    return {\n      template: `<span>{{${descKey}}}</span> (${handleValue.template})`,\n      model: Object.assign({[descKey]: description}, handleValue.model)\n    };\n  }\n\n  _formatEntityProperty(handleName, properties, value) {\n    let key = `${handleName}${properties.join('')}Value${++this._nextID}`;\n    return {\n      template: `<b>{{${key}}}</b>`,\n      model: {[`${key}`]: value}\n    };\n  }\n\n  _formatSetHandle(handleName, handleList) {\n    let handleKey = `${handleName}${++this._nextID}`;\n    if (handleList[0].rawData.name) {\n      if (handleList.length > 2) {\n        return {\n          template: `<b>{{${handleKey}FirstName}}</b> plus <b>{{${handleKey}OtherCount}}</b> other items`,\n          model: {[`${handleKey}FirstName`]: handleList[0].rawData.name, [`${handleKey}OtherCount`]: handleList.length - 1}\n        };\n      }\n      return {\n        template: handleList.map((v, i) => `<b>{{${handleKey}${i}}}</b>`).join(', '),\n        model: Object.assign(...handleList.map((v, i) => ({[`${handleKey}${i}`]: v.rawData.name} )))\n      };\n    }\n    return {\n      template: `<b>{{${handleKey}Length}}</b> items`,\n      model: {[`${handleKey}Length`]: handleList.length}\n    };\n  }\n\n  _formatSingleton(handleName, handleVar) {\n    if (handleVar.rawData.name) {\n      return {\n        template: `<b>{{${handleName}Var}}</b>`,\n        model: {[`${handleName}Var`]: handleVar.rawData.name}\n      };\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/description-dom-formatter.js\n// module id = 76\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\n'use strict';\n\nimport InnerPec from './inner-PEC.js';\nimport MessageChannel from './message-channel.js';\nimport Loader from './loader.js';\n\n// TODO: Make this generic so that it can also be used in-browser, or add a\n// separate in-process browser pec-factory.\nexport default function(id) {\n  let channel = new MessageChannel();\n  new InnerPec(channel.port1, `${id}:inner`, new Loader());\n  return channel.port2;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/fake-pec-factory.js\n// module id = 77\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nexport default fetch;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/fetch-web.js\n// module id = 78\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\nimport Random from './random.js';\n\nexport default class Id {\n  constructor(currentSession) {\n    this._session = currentSession;\n    this._currentSession = currentSession;\n    this._nextIdComponent = 0;\n    this._components = [];\n  }\n  static newSessionId() {\n    let session = Math.floor(Random.next() * Math.pow(2, 50)) + '';\n    return new Id(session);\n  }\n\n  fromString(string) {\n    let components = string.split(':');\n\n    let id = new Id(this._currentSession);\n\n    if (components[0][0] == '!') {\n      id._session = components[0].slice(1);\n      id._components = components.slice(1);\n    } else {\n      id._components = components;\n    }\n\n    return id;\n  }\n\n  toString() {\n    return `!${this._session}:${this._components.join(':')}`;\n  }\n\n  // Only use this for testing!\n  toStringWithoutSessionForTesting() {\n    return this._components.join(':');\n  }\n\n  createId(component) {\n    if (component == undefined)\n      component = '';\n    let id = new Id(this._currentSession);\n    id._components = this._components.slice();\n    id._components.push(component + this._nextIdComponent++);\n    return id;\n  }\n\n  equal(id) {\n    if (id._session !== this._session)\n      return false;\n    return this.equalWithoutSession(id);\n  }\n\n  // Only use this for testing!\n  equalWithoutSessionForTesting(id) {\n    if (id._components.length !== this._components.length)\n      return false;\n    for (let i = 0; i < id._components.length; i++)\n      if (id._components[i] !== this._components[i])\n        return false;\n\n    return true;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/id.js\n// module id = 79\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport Type from './type.js';\nimport handle from './handle.js';\nimport assert from '../platform/assert-web.js';\nimport {PECInnerPort} from './api-channel.js';\nimport ParticleSpec from './particle-spec.js';\nimport Schema from './schema.js';\n\nclass StorageProxy {\n  constructor(id, type, port, pec, name, version) {\n    this._id = id;\n    this._type = type;\n    this._port = port;\n    this._pec = pec;\n    this.name = name;\n    this._version = version;\n    this.state = 'outOfDate';\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  generateIDComponents() {\n    return this._pec.generateIDComponents();\n  }\n\n  on(type, callback, target, particleId) {\n    let dataFreeCallback = (d) => callback();\n    this.synchronize(type, dataFreeCallback, dataFreeCallback, target, particleId);\n  }\n\n  synchronize(type, modelCallback, callback, target, particleId) {\n    this._port.Synchronize({handle: this, modelCallback, callback, target, type, particleId});\n  }\n\n  get(particleId) {\n    return new Promise((resolve, reject) =>\n      this._port.HandleGet({callback: r => resolve(r), handle: this, particleId}));\n  }\n\n  toList(particleId) {\n    return new Promise((resolve, reject) =>\n      this._port.HandleToList({callback: r => resolve(r), handle: this, particleId}));\n  }\n\n  set(entity, particleId) {\n    this._port.HandleSet({data: entity, handle: this, particleId});\n  }\n\n  store(entity, particleId) {\n    this._port.HandleStore({data: entity, handle: this, particleId});\n  }\n\n  remove(entityId, particleId) {\n    this._port.HandleRemove({data: entityId, handle: this, particleId});\n  }\n\n  clear(particleId) {\n    this._port.HandleClear({handle: this, particleId});\n  }\n}\n\nclass InnerPEC {\n  constructor(port, idBase, loader) {\n    this._apiPort = new PECInnerPort(port);\n    this._particles = [];\n    this._idBase = idBase;\n    this._nextLocalID = 0;\n    this._loader = loader;\n    this._pendingLoads = [];\n\n    /*\n     * This code ensures that the relevant types are known\n     * in the scope object, because otherwise we can't do\n     * particleSpec resolution, which is currently a necessary\n     * part of particle construction.\n     *\n     * Possibly we should eventually consider having particle\n     * specifications separated from particle classes - and\n     * only keeping type information on the arc side.\n     */\n    this._apiPort.onDefineHandle = ({type, identifier, name, version}) => {\n      return new StorageProxy(identifier, type, this._apiPort, this, name, version);\n    };\n\n    this._apiPort.onCreateHandleCallback = ({type, id, name, callback}) => {\n      let proxy = new StorageProxy(id, type, this._apiPort, this, name, 0);\n      Promise.resolve().then(() => callback(proxy));\n      return proxy;\n    };\n\n    this._apiPort.onMapHandleCallback = ({id, callback}) => {\n      Promise.resolve().then(() => callback(id));\n      return id;\n    };\n\n    this._apiPort.onCreateSlotCallback = ({hostedSlotId, callback}) => {\n      Promise.resolve().then(() => callback(hostedSlotId));\n      return hostedSlotId;\n    };\n\n    this._apiPort.onInnerArcRender = ({transformationParticle, transformationSlotName, hostedSlotId, content}) => {\n      transformationParticle.renderHostedSlot(transformationSlotName, hostedSlotId, content);\n    };\n\n    this._apiPort.onStop = () => {\n      if (global.close) {\n        global.close();\n      }\n    };\n\n    this._apiPort.onInstantiateParticle =\n      ({id, spec, handles}) => this._instantiateParticle(id, spec, handles);\n\n    this._apiPort.onSimpleCallback = ({callback, data}) => callback(data);\n\n    this._apiPort.onConstructArcCallback = ({callback, arc}) => callback(arc);\n\n    this._apiPort.onAwaitIdle = ({version}) =>\n      this.idle.then(a => {\n        // TODO: dom-particles update is async, this is a workaround to allow dom-particles to\n        // update relevance, after handles are updated. Needs better idle signal.\n        setTimeout(() => { this._apiPort.Idle({version, relevance: this.relevance}); }, 0);\n      });\n\n    this._apiPort.onUIEvent = ({particle, slotName, event}) => particle.fireEvent(slotName, event);\n\n    this._apiPort.onStartRender = ({particle, slotName, contentTypes}) => {\n      /** @class Slot\n       * A representation of a consumed slot. Retrieved from a particle using\n       * particle.getSlot(name)\n       */\n      class Slotlet {\n        constructor(pec, particle, slotName) {\n          this._slotName = slotName;\n          this._particle = particle;\n          this._handlers = new Map();\n          this._pec = pec;\n          this._requestedContentTypes = new Set();\n        }\n        get particle() { return this._particle; }\n        get slotName() { return this._slotName; }\n        get isRendered() { return this._isRendered; }\n        /** @method render(content)\n         * renders content to the slot.\n         */\n        render(content) {\n          this._pec._apiPort.Render({particle, slotName, content});\n\n          Object.keys(content).forEach(key => { this._requestedContentTypes.delete(key); });\n          // Slot is considered rendered, if a non-empty content was sent and all requested content types were fullfilled.\n          this._isRendered = this._requestedContentTypes.size == 0 && (Object.keys(content).length > 0);\n        }\n        /** @method registerEventHandler(name, f)\n         * registers a callback to be invoked when 'name' event happens.\n         */\n        registerEventHandler(name, f) {\n          if (!this._handlers.has(name)) {\n            this._handlers.set(name, []);\n          }\n          this._handlers.get(name).push(f);\n        }\n        clearEventHandlers(name) {\n          this._handlers.set(name, []);\n        }\n        fireEvent(event) {\n          for (let handler of this._handlers.get(event.handler) || []) {\n            handler(event);\n          }\n        }\n      }\n\n      particle._slotByName.set(slotName, new Slotlet(this, particle, slotName));\n      particle.renderSlot(slotName, contentTypes);\n    };\n\n    this._apiPort.onStopRender = ({particle, slotName}) => {\n      assert(particle._slotByName.has(slotName),\n        `Stop render called for particle ${particle.name} slot ${slotName} without start render being called.`);\n      particle._slotByName.delete(slotName);\n    };\n  }\n\n  generateIDComponents() {\n    return {base: this._idBase, component: () => this._nextLocalID++};\n  }\n\n  generateID() {\n    return `${this._idBase}:${this._nextLocalID++}`;\n  }\n\n  innerArcHandle(arcId, particleId) {\n    let pec = this;\n    return {\n      createHandle: function(type, name) {\n        return new Promise((resolve, reject) =>\n          pec._apiPort.ArcCreateHandle({arc: arcId, type, name, callback: proxy => {\n            let v = handle.handleFor(proxy, proxy.type.isSetView, particleId);\n            v.entityClass = (proxy.type.isSetView ? proxy.type.primitiveType().entitySchema : proxy.type.entitySchema).entityClass();\n            resolve(v);\n          }}));\n      },\n      mapHandle: function(handle) {\n        return new Promise((resolve, reject) =>\n          pec._apiPort.ArcMapHandle({arc: arcId, handle, callback: id => {\n            resolve(id);\n          }}));\n      },\n      createSlot: function(transformationParticle, transformationSlotName, hostedParticleName, hostedSlotName) {\n        return new Promise((resolve, reject) =>\n          pec._apiPort.ArcCreateSlot({arc: arcId, transformationParticle, transformationSlotName, hostedParticleName, hostedSlotName, callback: hostedSlotId => {\n            resolve(hostedSlotId);\n          }}));\n      },\n      loadRecipe: function(recipe) {\n        // TODO: do we want to return a promise on completion?\n        return new Promise((resolve, reject) =>\n          pec._apiPort.ArcLoadRecipe({arc: arcId, recipe, callback: a => {\n            if (a == undefined)\n              resolve();\n            else\n              reject(a);\n          }}));\n      }\n    };\n  }\n\n  defaultCapabilitySet() {\n    return {\n      constructInnerArc: particle => {\n        return new Promise((resolve, reject) =>\n          this._apiPort.ConstructInnerArc({callback: arcId => {resolve(this.innerArcHandle(arcId, particle.id));}, particle}));\n      }\n    };\n  }\n\n  async _instantiateParticle(id, spec, proxies) {\n    let name = spec.name;\n    let resolve = null;\n    let p = new Promise((res, rej) => resolve = res);\n    this._pendingLoads.push(p);\n    let clazz = await this._loader.loadParticleClass(spec);\n    let capabilities = this.defaultCapabilitySet();\n    let particle = new clazz(); // TODO: how can i add an argument to DomParticle ctor?\n    particle.id = id;\n    particle.capabilities = capabilities;\n    this._particles.push(particle);\n\n    let handleMap = new Map();\n    proxies.forEach((value, key) => {\n      handleMap.set(key, handle.handleFor(value, value.type.isSetView, id, spec.connectionMap.get(key).isInput, spec.connectionMap.get(key).isOutput));\n    });\n\n    for (let localHandle of handleMap.values()) {\n      let type = localHandle.underlyingProxy().type;\n      let schemaModel;\n      if (type.isSetView && type.primitiveType().isEntity) {\n        schemaModel = type.primitiveType().entitySchema;\n      } else if (type.isEntity) {\n        schemaModel = type.entitySchema;\n      }\n\n      if (schemaModel)\n        localHandle.entityClass = schemaModel.entityClass();\n    }\n\n    return [particle, async () => {\n      resolve();\n      let idx = this._pendingLoads.indexOf(p);\n      this._pendingLoads.splice(idx, 1);\n      await particle.setViews(handleMap);\n    }];\n  }\n\n  get relevance() {\n    let rMap = new Map();\n    this._particles.forEach(p => {\n      if (p.relevances.length == 0)\n        return;\n      rMap.set(p, p.relevances);\n      p.relevances = [];\n    });\n    return rMap;\n  }\n\n  get busy() {\n    if (this._pendingLoads.length > 0)\n      return true;\n    for (let particle of this._particles) {\n      if (particle.busy) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  get idle() {\n    if (!this.busy) {\n      return Promise.resolve();\n    }\n    return Promise.all(this._pendingLoads.concat(this._particles.map(particle => particle.idle))).then(() => this.idle);\n  }\n}\n\nexport default InnerPEC;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/inner-PEC.js\n// module id = 80\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nexport default class ManifestMeta {\n  constructor() {\n    this.storageKey = null;\n    this.name = null;\n  }\n  apply(items) {\n    items.forEach(item => { this[item.key] = item.value; });\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/manifest-meta.js\n// module id = 81\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nclass MessagePort {\n  constructor(channel, id, other) {\n    this._channel = channel;\n    this._id = id;\n    this._other = other;\n    this._onmessage = undefined;\n  }\n\n  postMessage(message) {\n    this._channel._post(this._other, message);\n  }\n\n  set onmessage(f) {\n    this._onmessage = f;\n  }\n\n  close() {\n    this.postMessage = function() {};\n  }\n}\n\nclass MessageEvent {\n  constructor(message) {\n    this.data = message;\n  }\n}\n\nclass MessageChannel {\n  constructor() {\n    this.port1 = new MessagePort(this, 0, 1);\n    this.port2 = new MessagePort(this, 1, 0);\n    this._ports = [this.port1, this.port2];\n  }\n\n  async _post(id, message) {\n    message = JSON.parse(JSON.stringify(message));\n    if (this._ports[id]._onmessage) {\n      try {\n        // Yield so that we deliver the message asynchronously.\n        await 0;\n        await this._ports[id]._onmessage(new MessageEvent(message));\n      } catch (e) {\n        console.error('Exception in particle code\\n', e);\n      }\n    }\n  }\n}\n\nexport default MessageChannel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/message-channel.js\n// module id = 82\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport PEC from './particle-execution-context.js';\nimport assert from '../platform/assert-web.js';\nimport {PECOuterPort} from './api-channel.js';\nimport Manifest from './manifest.js';\n\n// TODO: fix\nimport Loader from './loader.js';\n\nclass OuterPEC extends PEC {\n  constructor(port, slotComposer, arc) {\n    super();\n    this._particles = [];\n    this._apiPort = new PECOuterPort(port);\n    this._arc = arc;\n    this._nextIdentifier = 0;\n    this.slotComposer = slotComposer;\n\n    this._apiPort.onRender = ({particle, slotName, content}) => {\n      if (this.slotComposer) {\n        this.slotComposer.renderSlot(particle, slotName, content);\n      }\n    };\n\n    this._apiPort.onSynchronize = async ({handle, target, callback, modelCallback, type}) => {\n      let model;\n      if (handle.toList == undefined) {\n        model = await handle.get();\n      } else {\n        model = await handle.toList();\n      }\n      this._apiPort.SimpleCallback({callback: modelCallback, data: model}, target);\n      handle.on(type, data => this._apiPort.SimpleCallback({callback, data}), target);\n    };\n\n    this._apiPort.onHandleGet = async ({handle, callback}) => {\n      this._apiPort.SimpleCallback({callback, data: await handle.get()});\n    };\n\n    this._apiPort.onHandleToList = async ({handle, callback}) => {\n      this._apiPort.SimpleCallback({callback, data: await handle.toList()});\n    };\n\n    this._apiPort.onHandleSet = ({handle, data}) => {handle.set(data);};\n    this._apiPort.onHandleStore = ({handle, data}) => handle.store(data);\n    this._apiPort.onHandleClear = ({handle}) => handle.clear();\n    this._apiPort.onHandleRemove = ({handle, data}) => handle.remove(data);\n\n    this._apiPort.onIdle = ({version, relevance}) => {\n      if (version == this._idleVersion) {\n        this._idlePromise = undefined;\n        this._idleResolve(relevance);\n      }\n    };\n\n    this._apiPort.onConstructInnerArc = ({callback, particle}) => {\n      let arc = {particle};\n      this._apiPort.ConstructArcCallback({callback, arc});\n    };\n\n    this._apiPort.onArcCreateHandle = async ({callback, arc, type, name}) => {\n      let handle = await this._arc.createHandle(type, name);\n      this._apiPort.CreateHandleCallback(handle, {type, name, callback, id: handle.id});\n    };\n\n    this._apiPort.onArcMapHandle = async ({callback, arc, handle}) => {\n      assert(this._arc.findHandleById(handle.id), `Cannot map nonexistent handle ${handle.id}`);\n      // TODO: create hosted handles map with specially generated ids instead of returning the real ones?\n      this._apiPort.MapHandleCallback({}, {callback, id: handle.id});\n    };\n\n    this._apiPort.onArcCreateSlot = ({callback, arc, transformationParticle, transformationSlotName, hostedParticleName, hostedSlotName}) => {\n      let hostedSlotId;\n      if (this.slotComposer) {\n        hostedSlotId = this.slotComposer.createHostedSlot(transformationParticle, transformationSlotName, hostedParticleName, hostedSlotName);\n      }\n      this._apiPort.CreateSlotCallback({}, {callback, hostedSlotId});\n    };\n\n    this._apiPort.onArcLoadRecipe = async ({arc, recipe, callback}) => {\n      let manifest = await Manifest.parse(recipe, {loader: this._arc._loader, fileName: ''});\n      let error = undefined;\n      let recipe0 = manifest.recipes[0];\n      if (recipe0) {\n        const missingHandles = [];\n        for (let handle of recipe0.handles) {\n          const fromHandle = this._arc.findHandleById(handle.id) || manifest.findStorageById(handle.id);\n          if (!fromHandle) {\n            missingHandles.push(handle);\n            continue;\n          }\n          handle.mapToStorage(fromHandle);\n        }\n        if (missingHandles.length > 0) {\n          error = `Recipe couldn't load due to missing handles [recipe=${recipe0}, missingHandles=${missingHandles.join('\\n')}].`;\n        } else {\n          let options = {errors: new Map()};\n          if (recipe0.normalize(options)) {\n            if (recipe0.isResolved()) {\n              // TODO: pass tags through too, and reconcile with similar logic\n              // in Arc.deserialize.\n              manifest.handles.forEach(handle => this._arc._registerHandle(handle, []));\n              this._arc.instantiate(recipe0, arc);\n            } else {\n              error = `Recipe is not resolvable ${recipe0.toString({showUnresolved: true})}`;\n            }\n          } else {\n            error = `Recipe ${recipe0} could not be normalized:\\n${[...options.errors.values()].join('\\n')}`;\n          }\n        }\n      } else {\n        error = 'No recipe defined';\n      }\n      this._apiPort.SimpleCallback({callback, data: error});\n    };\n  }\n\n  stop() {\n    this._apiPort.Stop();\n  }\n\n  get idle() {\n    if (this._idlePromise == undefined) {\n      this._idlePromise = new Promise((resolve, reject) => {\n        this._idleResolve = resolve;\n      });\n    }\n    this._idleVersion = this._nextIdentifier;\n    this._apiPort.AwaitIdle({version: this._nextIdentifier++});\n    return this._idlePromise;\n  }\n\n  get messageCount() {\n    return this._apiPort.messageCount;\n  }\n\n  sendEvent(particle, slotName, event) {\n    this._apiPort.UIEvent({particle, slotName, event});\n  }\n\n  instantiate(particleSpec, id, spec, handles, lastSeenVersion) {\n    handles.forEach(handle => {\n      let version = lastSeenVersion.get(handle.id) || 0;\n      this._apiPort.DefineHandle(handle, {type: handle.type.resolvedType(), name: handle.name,\n                                       version});\n    });\n\n    // TODO: Can we just always define the particle and map a handle for use in later\n    //       calls to InstantiateParticle?\n    if (spec._model._isInline) {\n      this._apiPort.DefineParticle({\n        particleDefinition: spec._model._inlineDefinition,\n        particleFunction: spec._model._inlineUpdateFunction\n      });\n    }\n\n    // TODO: rename this concept to something like instantiatedParticle, handle or registration.\n    this._apiPort.InstantiateParticle(particleSpec, {id, spec, handles});\n    return particleSpec;\n  }\n  startRender({particle, slotName, contentTypes}) {\n    this._apiPort.StartRender({particle, slotName, contentTypes});\n  }\n  stopRender({particle, slotName}) {\n    this._apiPort.StopRender({particle, slotName});\n  }\n  innerArcRender(transformationParticle, transformationSlotName, hostedSlotId, content) {\n    this._apiPort.InnerArcRender({transformationParticle, transformationSlotName, hostedSlotId, content});\n  }\n  initDebug() {\n    this._apiPort.initDebug(this._arc);\n  }\n}\n\nexport default OuterPEC;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/outer-PEC.js\n// module id = 83\n// module chunks = 0","// @license\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nclass ParticleExecutionContext {\n  constructor() {\n  }\n\n  // Instantiates `particle` in this context, connecting `handles` to the particle's inputs and outputs.\n  // `mutateCallback` will be called each time the particle mutates a handle or entity.\n  // Returns an identifier to refer to the particle (in `dispatch`).\n  instantiate(particle, handles, mutateCallback) {\n    // handles => {name => handleId}\n    throw 'unimplemented';\n  }\n\n  // Dispatches an event to the particle identified by `particleId` for the handle or entity identified\n  // by `entityId` concerning `eventDetails. The `morePending` flag indicates whether there are any\n  // known further events to be dispatched to the same particle.\n  dispatch(particleId, entityId, eventDetails, morePending) {\n    throw 'unimplemented';\n  }\n\n  // Returns a promise which resolves when the PEC becomes idle (no known input processing).\n  get idle() {\n    throw 'unimplemented';\n  }\n\n  // Returns a promise which resolves to a map from particle identifier to a list of the relevance\n  // entries generated by that particle.\n  get relevance() {\n    throw 'unimplemented';\n  }\n}\n\nexport default ParticleExecutionContext;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/particle-execution-context.js\n// module id = 84\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2018 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nlet random = Math.random;\n\nconst seededRandom = (() => {\n  let x = 0;\n  return () => (x = Math.pow(x + Math.E, Math.PI) % 1);\n})();\n\nexport default class Random {\n  static next() {\n    return random();\n  }\n\n  static seedForTests() {\n    random = seededRandom;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/random.js\n// module id = 85\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport util from './util.js';\n\nclass ConnectionConstraint {\n  constructor(from, fromConnection, to, toConnection) {\n    this.fromParticle = from;\n    this.fromConnection = fromConnection;\n    this.toParticle = to;\n    this.toConnection = toConnection;\n    Object.freeze(this);\n  }\n\n  _copyInto(recipe) {\n    return recipe.newConnectionConstraint(this.fromParticle, this.fromConnection, this.toParticle, this.toConnection);\n  }\n\n  _compareTo(other) {\n    let cmp;\n    if ((cmp = util.compareStrings(this.fromParticle.name, other.fromParticle.name)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this.fromConnection, other.fromConnection)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this.toParticle.name, other.toParticle.name)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this.toConnection, other.toConnection)) != 0) return cmp;\n    return 0;\n  }\n\n  toString() {\n    return `${this.fromParticle.name}.${this.fromConnection} -> ${this.toParticle.name}.${this.toConnection}`;\n  }\n}\n\nexport default ConnectionConstraint;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/connection-constraint.js\n// module id = 86\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nexport default async function(str) {\n  let buffer = new TextEncoder('utf-8').encode(str);\n  let digest = await crypto.subtle.digest('SHA-1', buffer);\n  return Array.from(new Uint8Array(digest)).map(x => ('00' + x.toString(16)).slice(-2)).join('');\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/digest-web.js\n// module id = 87\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport util from './util.js';\nimport TypeChecker from './type-checker.js';\n\nclass HandleConnection {\n  constructor(name, particle) {\n    assert(particle);\n    assert(particle.recipe);\n    this._recipe = particle.recipe;\n    this._name = name;\n    this._tags = [];\n    this._type = undefined;\n    this._rawType = undefined;\n    this._direction = undefined;\n    this._particle = particle;\n    this._handle = undefined;\n  }\n\n  _clone(particle, cloneMap) {\n    if (cloneMap.has(this)) {\n      return cloneMap.get(this);\n    }\n    let handleConnection = new HandleConnection(this._name, particle);\n    handleConnection._tags = [...this._tags];\n    handleConnection._type = this._type;\n    handleConnection._rawType = this._rawType;\n    handleConnection._direction = this._direction;\n    if (this._handle != undefined) {\n      handleConnection._handle = cloneMap.get(this._handle);\n      assert(handleConnection._handle !== undefined);\n      handleConnection._handle.connections.push(handleConnection);\n    }\n    cloneMap.set(this, handleConnection);\n    return handleConnection;\n  }\n\n  _normalize() {\n    this._tags.sort();\n    // TODO: type?\n    Object.freeze(this);\n  }\n\n  _compareTo(other) {\n    let cmp;\n    if ((cmp = util.compareComparables(this._particle, other._particle)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this._name, other._name)) != 0) return cmp;\n    if ((cmp = util.compareArrays(this._tags, other._tags, util.compareStrings)) != 0) return cmp;\n    if ((cmp = util.compareComparables(this._handle, other._handle)) != 0) return cmp;\n    // TODO: add type comparison\n    // if ((cmp = util.compareStrings(this._type, other._type)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this._direction, other._direction)) != 0) return cmp;\n    return 0;\n  }\n\n  get recipe() { return this._recipe; }\n  get name() { return this._name; } // Parameter name?\n  get tags() { return this._tags; }\n  get type() {\n    if (this._type)\n      return this._type;\n    return this._rawType;\n  }\n  get rawType() {\n    return this._rawType;\n  }\n  get direction() { return this._direction; } // in/out\n  get isInput() {\n    return this.direction == 'in' || this.direction == 'inout';\n  }\n  get isOutput() {\n    return this.direction == 'out' || this.direction == 'inout';\n  }\n  get handle() { return this._handle; } // Handle?\n  get particle() { return this._particle; } // never null\n\n  set tags(tags) { this._tags = tags; }\n  set type(type) {\n    this._rawType = type;\n    this._type = undefined;\n    this._resetHandleType();\n  }\n\n  set direction(direction) {\n    this._direction = direction;\n    this._resetHandleType();\n  }\n\n  get spec() {\n    if (this.particle.spec == null)\n      return null;\n    return this.particle.spec.connectionMap.get(this.name);\n  }\n\n  get isOptional() {\n    if (this.spec == null)\n      return false;\n    return this.spec.isOptional;\n  }\n\n  _isValid(options) {\n    if (this.direction && !['in', 'out', 'inout', 'host'].includes(this.direction)) {\n      if (options && options.errors) {\n        options.errors.set(this, `Invalid direction '${this.direction}' for handle connection '${this.particle.name}::${this.name}'`);\n      }\n      return false;\n    }\n    if (this.type && this.particle && this.particle.spec) {\n      let connectionSpec = this.particle.spec.connectionMap.get(this.name);\n      if (connectionSpec) {\n        if (!connectionSpec.isCompatibleType(this.rawType)) {\n          if (options && options.errors) {\n            options.errors.set(this, `Type '${this.rawType} for handle connection '${this.particle.name}::${this.name}' doesn't match particle spec's type '${connectionSpec.type}'`);\n          }\n          return false;\n        }\n        if (this.direction != connectionSpec.direction) {\n          if (options && options.errors) {\n            options.errors.set(this, `Direction '${this.direction}' for handle connection '${this.particle.name}::${this.name}' doesn't match particle spec's direction '${connectionSpec.direction}'`);\n          }\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  isResolved(options) {\n    assert(Object.isFrozen(this));\n\n    if (this.isOptional) {\n      return true;\n    }\n\n    // TODO: This should use this._type, or possibly not consider type at all.\n    if (!this.type) {\n      if (options) {\n        options.details = 'missing type';\n      }\n      return false;\n    }\n    if (!this._direction) {\n      if (options) {\n        options.details = 'missing direction';\n      }\n      return false;\n    }\n    if (!this.handle) {\n      if (options) {\n        options.details = 'missing handle';\n      }\n      return false;\n    }\n    return true;\n  }\n\n  _resetHandleType() {\n    if (this._handle)\n      this._handle._type = undefined;\n  }\n\n  connectToHandle(handle) {\n    assert(handle.recipe == this.recipe);\n    this._handle = handle;\n    this._resetHandleType();\n    this._handle.connections.push(this);\n  }\n\n  toString(nameMap, options) {\n    let result = [];\n    result.push(this.name || '*');\n    // TODO: better deal with unspecified direction.\n    result.push({'in': '<-', 'out': '->', 'inout': '=', 'host': '='}[this.direction] || this.direction || '=');\n    if (this.handle) {\n      result.push(`${(nameMap && nameMap.get(this.handle)) || this.handle.localName}`);\n    }\n    result.push(...this.tags);\n\n    if (options && options.showUnresolved) {\n      if (!this.isResolved(options)) {\n        result.push(`// unresolved handle-connection: ${options.details}`);\n      }\n    }\n\n    return result.join(' ');\n  }\n}\n\nexport default HandleConnection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/handle-connection.js\n// module id = 88\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport SlotConnection from './slot-connection.js';\nimport HandleConnection from './handle-connection.js';\nimport util from './util.js';\n\nclass Particle {\n  constructor(recipe, name) {\n    assert(recipe);\n    this._recipe = recipe;\n    this._id = undefined;\n    this._name = name;\n    this._localName = undefined;\n    this._spec = undefined;\n    this._tags = [];\n    this._verbs = [];\n\n    this._connections = {};\n    // TODO: replace with constraint connections on the recipe\n    this._unnamedConnections = [];\n    this._consumedSlotConnections = {}; // map of consumed Slot connections by slot name.\n  }\n\n  _copyInto(recipe, cloneMap) {\n    let particle = recipe.newParticle(this._name);\n    particle._id = this._id;\n    particle._tags = [...this._tags];\n    particle._verbs = [...this._verbs];\n    particle._spec = this._spec;\n\n    Object.keys(this._connections).forEach(key => {\n      particle._connections[key] = this._connections[key]._clone(particle, cloneMap);\n    });\n    particle._unnamedConnections = this._unnamedConnections.map(connection => connection._clone(particle, cloneMap));\n    Object.keys(this._consumedSlotConnections).forEach(key => {\n      particle._consumedSlotConnections[key] = this._consumedSlotConnections[key]._clone(particle, cloneMap);\n    });\n\n    return particle;\n  }\n\n  _startNormalize() {\n    this._localName = null;\n    this._tags.sort();\n    this._verbs.sort();\n    let normalizedConnections = {};\n    for (let key of (Object.keys(this._connections).sort())) {\n      normalizedConnections[key] = this._connections[key];\n    }\n    this._connections = normalizedConnections;\n\n    let normalizedSlotConnections = {};\n    for (let key of (Object.keys(this._consumedSlotConnections).sort())) {\n      normalizedSlotConnections[key] = this._consumedSlotConnections[key];\n    }\n    this._consumedSlotConnections = normalizedSlotConnections;\n  }\n\n  _finishNormalize() {\n    this._unnamedConnections.sort(util.compareComparables);\n    Object.freeze(this);\n  }\n\n  _compareTo(other) {\n    let cmp;\n    if ((cmp = util.compareStrings(this._id, other._id)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this._name, other._name)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this._localName, other._localName)) != 0) return cmp;\n    // TODO: spec?\n    if ((cmp = util.compareArrays(this._tags, other._tags, util.compareStrings)) != 0) return cmp;\n    if ((cmp = util.compareArrays(this._verbs, other._verbs, util.compareStrings)) != 0) return cmp;\n    // TODO: slots\n    return 0;\n  }\n\n  _isValid(options) {\n    if (!this.spec) {\n      return true;\n    }\n    if (!this.name && !this.primaryVerb) {\n      // Must have either name of a verb\n      if (options && options.errors) {\n        options.errors.set(this, `Particle has no name and no verb`);\n      }\n      return false;\n    }\n    // TODO: What\n    return true;\n  }\n\n  isResolved(options) {\n    assert(Object.isFrozen(this));\n    // TODO: slots\n    if (this.consumedSlotConnections.length > 0) {\n      let fulfilledSlotConnections = this.consumedSlotConnections.filter(connection => connection.targetSlot !== undefined);\n      if (fulfilledSlotConnections.length == 0) {\n        if (options && options.showUnresolved) {\n          options.details = 'unfullfilled slot connections';\n        }\n        return false;\n      }\n    }\n    if (!this.spec) {\n      if (options && options.showUnresolved) {\n        options.details = 'missing spec';\n      }\n      return false;\n    }\n    if (this.spec.connectionMap.size != Object.keys(this._connections).length) {\n      if (options && options.showUnresolved) {\n        options.details = 'unresolved connections';\n      }\n      return false;\n    }\n    if (this.unnamedConnections.length != 0) {\n      if (options && options.showUnresolved) {\n        options.details = `${this.unnamedConnections.length} unnamed connections`;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  get recipe() { return this._recipe; }\n  get localName() { return this._localName; }\n  set localName(name) { this._localName = name; }\n  get id() { return this._id; } // Not resolved until we have an ID.\n  get name() { return this._name; }\n  set name(name) { this._name = name; }\n  get spec() { return this._spec; }\n  get tags() { return this._tags; }\n  set tags(tags) { this._tags = tags; }\n  get connections() { return this._connections; } // {parameter -> HandleConnection}\n  get unnamedConnections() { return this._unnamedConnections; } // HandleConnection*\n  get consumedSlotConnections() { return this._consumedSlotConnections; }\n  get primaryVerb() { if (this._verbs.length > 0) return this._verbs[0]; }\n  set verbs(verbs) { this._verbs = verbs; }\n\n  set spec(spec) {\n    this._spec = spec;\n    for (let connectionName of spec.connectionMap.keys()) {\n      let speccedConnection = spec.connectionMap.get(connectionName);\n      let connection = this.connections[connectionName];\n      if (connection == undefined) {\n        connection = this.addConnectionName(connectionName);\n      }\n      // TODO: don't just overwrite here, check that the types\n      // are compatible if one already exists.\n      connection.type = speccedConnection.type;\n      connection.direction = speccedConnection.direction;\n    }\n    spec.slots.forEach(slotSpec => {\n      if (this._consumedSlotConnections[slotSpec.name] == undefined)\n        this.addSlotConnection(slotSpec.name);\n      this._consumedSlotConnections[slotSpec.name].slotSpec = slotSpec;\n    });\n  }\n\n  addUnnamedConnection() {\n    let connection = new HandleConnection(undefined, this);\n    this._unnamedConnections.push(connection);\n    return connection;\n  }\n\n  addConnectionName(name) {\n    assert(this._connections[name] == undefined);\n    this._connections[name] = new HandleConnection(name, this);\n    return this._connections[name];\n  }\n\n  allConnections() {\n    return Object.values(this._connections).concat(this._unnamedConnections);\n  }\n\n  ensureConnectionName(name) {\n    return this._connections[name] || this.addConnectionName(name);\n  }\n\n  getConnectionByName(name) {\n    return this._connections[name];\n  }\n\n  nameConnection(connection, name) {\n    assert(!this._connections[name].handle, `Connection \"${name}\" already has a handle`);\n\n    let idx = this._unnamedConnections.indexOf(connection);\n    assert(idx >= 0, `Cannot name '${name}' nonexistent unnamed connection.`);\n    connection._name = name;\n\n    connection.type = this._connections[name].type;\n    if (connection.direction != this._connections[name].direction) {\n      assert(connection.direction == 'inout',\n             `Unnamed connection cannot adjust direction ${connection.direction} to ${name}'s direction ${this._connections[name].direction}`);\n      connection.direction = this._connections[name].direction;\n    }\n\n    this._connections[name] = connection;\n    this._unnamedConnections.splice(idx, 1);\n  }\n\n  addSlotConnection(name) {\n    let slotConn = new SlotConnection(name, this);\n    this._consumedSlotConnections[name] = slotConn;\n    return slotConn;\n  }\n\n  removeSlotConnection(slotConnection) {\n    this._consumedSlotConnections[slotConnection._name] = null;\n    slotConnection.disconnectFromSlot();\n  }\n\n  remove() {\n    this.recipe.removeParticle(this);\n  }\n\n  toString(nameMap, options) {\n    let result = [];\n    // TODO: we need at least name or tags\n    if (this.name) {\n      result.push(this.name);\n      result.push(...this.tags);\n\n      result.push(`as ${(nameMap && nameMap.get(this)) || this.localName}`);\n      if (this.primaryVerb && this.primaryVerb != this.name) {\n        result.push(`// verb=${this.primaryVerb}`);\n      }\n    } else { // verb must exist, if there is no name.\n      result.push(`particle can ${this.primaryVerb}`);\n    }\n    if (options && options.showUnresolved) {\n      if (!this.isResolved(options)) {\n        result.push(`// unresolved particle: ${options.details}`);\n      }\n    }\n\n    result = [result.join(' ')];\n\n    for (let connection of this.unnamedConnections) {\n      result.push(connection.toString(nameMap, options).replace(/^|(\\n)/g, '$1  '));\n    }\n    for (let connection of Object.values(this.connections)) {\n      result.push(connection.toString(nameMap, options).replace(/^|(\\n)/g, '$1  '));\n    }\n    for (let slotConnection of Object.values(this._consumedSlotConnections)) {\n      result.push(slotConnection.toString(nameMap, options).replace(/^|(\\n)/g, '$1  '));\n    }\n    return result.join('\\n');\n  }\n}\n\nexport default Particle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/particle.js\n// module id = 89\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport util from './util.js';\n\nclass SlotConnection {\n  constructor(name, particle) {\n    assert(particle);\n    assert(particle.recipe);\n    assert(name);\n\n    this._recipe = particle.recipe;\n    this._particle = particle;\n    this._name = name;\n    this._slotSpec = undefined; // isRequired + formFactor\n    this._targetSlot = undefined; // Slot?\n    this._providedSlots = {}; // Slot*\n    this._tags = [];\n  }\n\n  remove() {\n    this._particle.removeSlotConnection(this);\n  }\n\n  get recipe() { return this._recipe; }\n  get particle() { return this._particle; }\n  get name() { return this._name; }\n  get slotSpec() { return this._slotSpec; }\n  get targetSlot() { return this._targetSlot; }\n  get providedSlots() { return this._providedSlots; }\n  get tags() { return this._tags; }\n  set tags(tags) { this._tags = tags; }\n\n  set slotSpec(slotSpec) {\n    assert(this.name == slotSpec.name);\n    this._slotSpec = slotSpec;\n    slotSpec.providedSlots.forEach(providedSlot => {\n      let slot = this.providedSlots[providedSlot.name];\n      if (slot == undefined) {\n        slot = this.recipe.newSlot(providedSlot.name);\n        slot._sourceConnection = this;\n        slot._name = providedSlot.name;\n        this.providedSlots[providedSlot.name] = slot;\n      }\n      assert(slot.handleConnections.length == 0, 'Handle connections must be empty');\n      providedSlot.handles.forEach(handle => slot.handleConnections.push(this.particle.connections[handle]));\n      assert(slot._name == providedSlot.name);\n      assert(!slot.formFactor);\n      slot.formFactor = providedSlot.formFactor;\n    });\n  }\n\n  connectToSlot(targetSlot) {\n    assert(targetSlot);\n    assert(!this.targetSlot);\n    assert(this.recipe == targetSlot.recipe, 'Cannot connect to slot from different recipe');\n\n    this._targetSlot = targetSlot;\n    targetSlot.consumeConnections.push(this);\n  }\n\n  disconnectFromSlot() {\n    if (this._targetSlot) {\n      this._targetSlot.removeConsumeConnection(this);\n      this._targetSlot = undefined;\n    }\n  }\n  \n  _clone(particle, cloneMap) {\n    if (cloneMap.has(this)) {\n      return cloneMap.get(this);\n    }\n\n    let slotConnection = particle.addSlotConnection(this.name);\n    slotConnection.tags = this.tags;\n    if (this.slotSpec) {\n      slotConnection._slotSpec = particle.spec.getSlotSpec(this.name);\n    }\n\n    cloneMap.set(this, slotConnection);\n    return slotConnection;\n  }\n\n  _normalize() {\n    let normalizedSlots = {};\n    for (let key of (Object.keys(this._providedSlots).sort())) {\n      normalizedSlots[key] = this._providedSlots[key];\n    }\n    this._providedSlots = normalizedSlots;\n    Object.freeze(this);\n  }\n\n  _compareTo(other) {\n    let cmp;\n    if ((cmp = util.compareStrings(this.name, other.name)) != 0) return cmp;\n    if ((cmp = util.compareComparables(this._targetSlot, other._targetSlot)) != 0) return cmp;\n    if ((cmp = util.compareComparables(this._particle, other._particle)) != 0) return cmp;\n    return 0;\n  }\n\n  _isValid(options) {\n    if (this._targetSlot && this._targetSlot.sourceConnection &&\n        this._targetSlot != this._targetSlot.sourceConnection.providedSlots[this._targetSlot.name]) {\n      if (options && options.errors) {\n        options.errors.set(this, `Invalid target slot '${this._targetSlot.name}' for slot connection '${this.name}' of particle ${this.particle.name}`);\n      }\n      return false;\n    }\n\n    // TODO: add more checks.\n    return true;\n  }\n\n  isResolved(options) {\n    assert(Object.isFrozen(this));\n\n    if (!this.name) {\n      if (options) {\n        options.details = 'missing name';\n      }\n      return false;\n    }\n    if (!this.particle) {\n      if (options) {\n        options.details = 'missing particle';\n      }\n      return false;\n    }\n    if (!this.targetSlot) {\n      if (options) {\n        options.details = 'missing target-slot';\n      }\n      return false;\n    }\n    return true;\n  }\n\n  isConnectedToInternalSlot() {\n    return this.targetSlot && (!!this.targetSlot.sourceConnection);\n  }\n  isConnectedToRemoteSlot() {\n    return this.targetSlot && (!!this.targetSlot.id);\n  }\n  isConnected() {\n    return this.isConnectedToInternalSlot() || this.isConnectedToRemoteSlot();\n  }\n\n  toString(nameMap, options) {\n    let consumeRes = [];\n    consumeRes.push('consume');\n    consumeRes.push(`${this.name}`);\n    if (this.targetSlot)\n      consumeRes.push(`as ${(nameMap && nameMap.get(this.targetSlot)) || this.targetSlot.localName}`);\n\n    if (options && options.showUnresolved) {\n      if (!this.isResolved(options)) {\n        consumeRes.push(`// unresolved slot-connection: ${options.details}`);\n      }\n    }\n\n    let result = [];\n    result.push(consumeRes.join(' '));\n\n    Object.keys(this.providedSlots).forEach(psName => {\n      let providedSlot = this.providedSlots[psName];\n      let provideRes = [];\n      provideRes.push('  provide');\n      \n      // Only assert that there's a spec for this provided slot if there's a spec for\n      // the consumed slot .. otherwise this is just a constraint.\n      if (this.slotSpec) {\n        let providedSlotSpec = this.slotSpec.getProvidedSlotSpec(psName);\n        assert(providedSlotSpec, `Cannot find providedSlotSpec for ${psName}`);\n      }\n      provideRes.push(`${psName} as ${(nameMap && nameMap.get(providedSlot)) || providedSlot}`);\n      result.push(provideRes.join(' '));\n    });\n    return result.join('\\n');\n  }\n}\n\nexport default SlotConnection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/slot-connection.js\n// module id = 90\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport util from './util.js';\n\nclass Slot {\n  constructor(recipe, name) {\n    assert(recipe);\n\n    this._recipe = recipe;\n    this._id = undefined; // The ID of the slot in the context\n    this._localName = undefined; // Local id within the recipe\n    this._name = name;\n    this._tags = [];\n\n    this._formFactor = undefined;\n    this._handleConnections = []; // HandleConnection* (can only be set if source connection is set and particle in slot connections is set)\n    this._sourceConnection = undefined; // SlotConnection\n    this._consumerConnections = []; // SlotConnection*\n  }\n\n  get recipe() { return this._recipe; }\n  get id() { return this._id; }\n  set id(id) { this._id = id; }\n  get localName() { return this._localName; }\n  set localName(localName) { this._localName = localName; }\n  get name() { return this._name; }\n  set name(name) { this._name = name; }\n  get tags() { return this._tags; }\n  set tags(tags) { this._tags = tags; }\n  get formFactor() { return this._formFactor; }\n  set formFactor(formFactor) { this._formFactor = formFactor; }\n  get handleConnections() { return this._handleConnections; }\n  get sourceConnection() { return this._sourceConnection; }\n  set sourceConnection(sourceConnection) { this._sourceConnection = sourceConnection; }\n  get consumeConnections() { return this._consumerConnections; }\n  getProvidedSlotSpec() {\n    // TODO: should this return something that indicates this isn't available yet instead of \n    // the constructed {isSet: false, tags: []}?\n    return (this.sourceConnection && this.sourceConnection.slotSpec) ? this.sourceConnection.slotSpec.getProvidedSlotSpec(this.name) : {isSet: false, tags: []};\n  }\n\n  _copyInto(recipe, cloneMap) {\n    let slot = undefined;\n    if (!this.sourceConnection && this.id)\n      slot = recipe.findSlot(this.id);\n    if (slot == undefined) {\n      slot = recipe.newSlot(this.name);\n      slot._id = this.id;\n      slot._formFactor = this.formFactor;\n      slot._localName = this._localName;\n      slot._tags = [...this._tags];\n      // the connections are re-established when Particles clone their attached SlotConnection objects.\n      slot._sourceConnection = cloneMap.get(this._sourceConnection);\n      if (slot.sourceConnection)\n        slot.sourceConnection._providedSlots[slot.name] = slot;\n      this._handleConnections.forEach(connection => slot._handleConnections.push(cloneMap.get(connection)));\n    }\n    this._consumerConnections.forEach(connection => cloneMap.get(connection).connectToSlot(slot));\n    return slot;\n  }\n\n  _startNormalize() {\n    this.localName = null;\n    this._tags.sort();\n  }\n\n  _finishNormalize() {\n    assert(Object.isFrozen(this._source));\n    this._consumerConnections.forEach(cc => assert(Object.isFrozen(cc)));\n    this._consumerConnections.sort(util.compareComparables);\n    Object.freeze(this);\n  }\n\n  _compareTo(other) {\n    let cmp;\n    if ((cmp = util.compareStrings(this.id, other.id)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this.localName, other.localName)) != 0) return cmp;\n    if ((cmp = util.compareStrings(this.formFactor, other.formFactor)) != 0) return cmp;\n    if ((cmp = util.compareArrays(this._tags, other._tags, util.compareStrings)) != 0) return cmp;\n    return 0;\n  }\n\n  removeConsumeConnection(slotConnection) {\n    let idx = this._consumerConnections.indexOf(slotConnection);\n    assert(idx > -1);\n    this._consumerConnections.splice(idx, 1);\n    if (this._consumerConnections.length == 0)\n      this.remove();\n  }\n\n  remove() {\n    this._recipe.removeSlot(this);\n  }\n\n  isResolved(options) {\n    assert(Object.isFrozen(this));\n\n    if (options && options.showUnresolved) {\n      options.details = [];\n      if (!this._sourceConnection) {\n        options.details.push('missing source-connection');\n      }\n      if (!this.id) {\n        options.details.push('missing id');\n      }\n      options.details = options.details.join('; ');\n    }\n\n    return this._sourceConnection || this.id;\n  }\n\n  _isValid(options) {\n    // TODO: implement\n    return true;\n  }\n\n  toString(nameMap, options) {\n    let result = [];\n    result.push('slot');\n    if (this.id) {\n      result.push(`'${this.id}'`);\n    }\n    if (this.tags.length > 0) {\n      result.push(this.tags.join(' '));\n    }\n    result.push(`as ${(nameMap && nameMap.get(this)) || this.localName}`);\n    let includeUnresolved = options && options.showUnresolved && !this.isResolved(options);\n    if (includeUnresolved) {\n      result.push(`// unresolved slot: ${options.details}`);\n    }\n\n    if (this.id || includeUnresolved) {\n      return result.join(' ');\n    }\n  }\n}\n\nexport default Slot;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/slot.js\n// module id = 91\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Strategizer} from '../../strategizer/strategizer.js';\nimport Recipe from './recipe.js';\nimport assert from '../../platform/assert-web.js';\n\n/**\n * Walkers traverse an object, calling methods based on the\n * features encountered on that object. For example, a RecipeWalker\n * takes a list of recipes and calls methods when:\n *  - a new recipe is encountered\n *  - a handle is found inside a recipe\n *  - a particle is found inside a recipe\n *  - etc..\n * \n * Each of these methods can return a list of updates:\n *   [(recipe, encountered_thing) => new_recipe]\n *\n * The walker then does something with the updates depending on the\n * tactic selected.\n * \n * If the tactic is \"Permuted\", then an output will be generated\n * for every combination of 1 element drawn from each update list.\n * For example, if 3 methods return [a,b], [c,d,e], and [f] respectively\n * then \"Permuted\" will cause 6 outputs to be generated: [acf, adf, aef, bcf, bdf, bef]\n * \n * If the tactic is \"Independent\", an output will be generated for each\n * update, regardless of the list the update is in. For example,\n * if 3 methods return [a,b], [c,d,e], and [f] respectively,\n * then \"Independent\" will cause 6 outputs to be generated: [a,b,c,d,e,f]\n */\nclass WalkerBase extends Strategizer.Walker {\n  constructor(tactic) {\n    super();\n    assert(tactic);\n    this.tactic = tactic;\n  }\n\n  _runUpdateList(recipe, updateList) {\n    let newRecipes = [];\n    if (updateList.length) {\n      switch (this.tactic) {\n        case WalkerBase.Permuted: {\n          let permutations = [[]];\n          updateList.forEach(({continuation, context}) => {\n            let newResults = [];\n            if (typeof continuation == 'function')\n              continuation = [continuation];\n            continuation.forEach(f => {\n              permutations.forEach(p => {\n                let newP = p.slice();\n                newP.push({f, context});\n                newResults.push(newP);\n              });\n            });\n            permutations = newResults;\n          });\n\n          for (let permutation of permutations) {\n            let cloneMap = new Map();\n            let newRecipe = recipe.clone(cloneMap);\n            let score = 0;\n            permutation = permutation.filter(p => p.f !== null);\n            if (permutation.length == 0)\n              continue;\n            permutation.forEach(({f, context}) => {\n              score += f(newRecipe, cloneMap.get(context));\n            });\n\n            newRecipes.push({recipe: newRecipe, score});\n          }\n          break;\n        }\n        case WalkerBase.Independent:\n          updateList.forEach(({continuation, context}) => {\n            if (typeof continuation == 'function')\n              continuation = [continuation];\n            continuation.forEach(f => {\n              if (f == null)\n                f = () => 0;\n              let cloneMap = new Map();\n              let newRecipe = recipe.clone(cloneMap);\n              let score = f(newRecipe, cloneMap.get(context));\n              newRecipes.push({recipe: newRecipe, score});\n            });\n          });\n          break;\n        default:\n          throw `${this.tactic} not supported`;\n      }\n    }\n\n    // commit phase - output results.\n\n    for (let newRecipe of newRecipes) {\n      let result = this.createDescendant(newRecipe.recipe, newRecipe.score);\n    }\n  }\n\n  createDescendant(recipe, score) {\n    let valid = recipe.normalize();\n    //if (!valid) debugger;\n    let hash = valid ? recipe.digest() : null;\n    super.createDescendant(recipe, score, hash, valid);\n  }\n\n  isEmptyResult(result) {\n    if (!result)\n      return true;\n\n    if (result.constructor == Array && result.length <= 0)\n      return true;\n\n      assert(typeof result == 'function' || result.length);\n\n    return false;\n  }\n}\n\nWalkerBase.Permuted = 'permuted';\nWalkerBase.Independent = 'independent';\n\nexport default WalkerBase;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/recipe/walker-base.js\n// module id = 92\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nclass Relevance {\n  constructor() {\n    this.relevanceMap = new Map();\n  }\n\n  apply(relevance) {\n    for (let key of relevance.keys()) {\n      if (this.relevanceMap.has(key))\n        this.relevanceMap.set(key, this.relevanceMap.get(key).concat(relevance.get(key)));\n      else\n        this.relevanceMap.set(key, relevance.get(key));\n    }\n  }\n\n  calcRelevanceScore() {\n    let relevance = 1;\n    let hasNegative = false;\n    for (let rList of this.relevanceMap.values()) {\n      let particleRelevance = Relevance.particleRelevance(rList);\n      if (particleRelevance < 0) {\n        hasNegative = true;\n      }\n      relevance *= Math.abs(particleRelevance);\n    }\n    return relevance * (hasNegative ? -1 : 1);\n  }\n\n  // Returns false, if at least one of the particles relevance lists ends with a negative score.\n  isRelevant(plan) {\n    let hasUi = plan.particles.some(p => Object.keys(p.consumedSlotConnections).length > 0);\n    let rendersUi = false;\n    this.relevanceMap.forEach((rList, particle) => {\n      if (rList[rList.length - 1] < 0) {\n        return false;\n      } else if (Object.keys(particle.consumedSlotConnections).length) {\n        rendersUi = true;\n      }\n    });\n    // If the recipe has UI rendering particles, at least one of the particles must render UI.\n    return hasUi == rendersUi;\n  }\n\n  static scaleRelevance(relevance) {\n    if (relevance == undefined) {\n      relevance = 5;\n    }\n    relevance = Math.max(-1, Math.min(relevance, 10));\n    // TODO: might want to make this geometric or something instead;\n    return relevance / 5;\n  }\n\n  static particleRelevance(relevanceList) {\n    let relevance = 1;\n    let hasNegative = false;\n    relevanceList.forEach(r => {\n      let scaledRelevance = Relevance.scaleRelevance(r);\n      if (scaledRelevance < 0) {\n        hasNegative = true;\n      }\n      relevance *= Math.abs(scaledRelevance);\n    });\n    return relevance * (hasNegative ? -1 : 1);\n  }\n\n  calcParticleRelevance(particle) {\n    if (this.relevanceMap.has(particle)) {\n      return Relevance.particleRelevance(this.relevanceMap.get(particle));\n    }\n    return -1;\n  }\n}\nexport default Relevance;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/relevance.js\n// module id = 93\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n'use strict';\n\nimport assert from '../platform/assert-web.js';\nimport tracing from '../tracelib/trace.js';\nimport Relevance from './relevance.js';\n\nclass Speculator {\n\n  async speculate(arc, plan) {\n    let trace = tracing.start({cat: 'speculator', name: 'Speculator::speculate'});\n    let newArc = await arc.cloneForSpeculativeExecution();\n    let relevance = new Relevance();\n    async function awaitCompletion() {\n      await newArc.scheduler.idle;\n      let messageCount = newArc.pec.messageCount;\n      relevance.apply(await newArc.pec.idle);\n\n      if (newArc.pec.messageCount !== messageCount + 1)\n        return awaitCompletion();\n      else {\n        relevance.newArc = newArc;\n        return relevance;\n      }\n    }\n\n    return trace.endWith(newArc.instantiate(plan).then(a => awaitCompletion()));\n  }\n}\n\nexport default Speculator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/speculator.js\n// module id = 94\n// module chunks = 0","// @\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport StorageProviderBase from './storage-provider-base.js';\nimport firebase from '../../platform/firebase-web.js';\nimport assert from '../../platform/assert-web.js';\nimport KeyBase from './key-base.js';\nimport btoa from '../../platform/btoa-web.js';\n\nclass FirebaseKey extends KeyBase {\n  constructor(key) {\n    super();\n    let parts = key.split('://');\n    this.protocol = parts[0];\n    assert(this.protocol == 'firebase');\n    if (parts[1]) {\n      parts = parts[1].split('/');\n      assert(parts[0].endsWith('.firebaseio.com'));\n      this.databaseUrl = parts[0];\n      this.projectId = this.databaseUrl.split('.')[0];\n      this.apiKey = parts[1];\n      this.location = parts.slice(2).join('/');\n    } else {\n      this.databaseUrl = undefined;\n      this.projectId = undefined;\n      this.apiKey = undefined;\n      this.location = '';\n    }\n  }\n\n  childKeyForHandle(id) {\n    let location = '';\n    if (this.location != undefined && this.location.length > 0)\n      location = this.location + '/';\n    location += `handles/${id}`;\n    return new FirebaseKey(`${this.protocol}://${this.databaseUrl}/${this.apiKey}/${location}`);\n  }\n\n  toString() {\n    if (this.databaseUrl && this.apiKey)\n      return `${this.protocol}://${this.databaseUrl}/${this.apiKey}/${this.location}`;\n    return `${this.protocol}://`;\n  }\n}\n\nasync function realTransaction(reference, transactionFunction) {\n  let realData = undefined;\n  await reference.once('value', data => {realData = data.val(); });\n  return reference.transaction(data => {\n    if (data == null)\n      data = realData;\n    let result = transactionFunction(data);\n    assert(result);\n    return result;\n  }, undefined, false);\n}\n\nlet _nextAppNameSuffix = 0;\n\nexport default class FirebaseStorage {\n  constructor(arcId) {\n    this._arcId = arcId;\n    this._apps = {};\n  }\n\n  async construct(id, type, keyFragment) {\n    return this._join(id, type, keyFragment, false);\n  }\n\n  async connect(id, type, key) {\n    return this._join(id, type, key, true);\n  }\n\n  parseStringAsKey(string) {\n    return new FirebaseKey(string);\n  }\n\n  async _join(id, type, key, shouldExist) {\n    key = new FirebaseKey(key);\n    // TODO: is it ever going to be possible to autoconstruct new firebase datastores?\n    if (key.databaseUrl == undefined || key.apiKey == undefined)\n      throw new Error('Can\\'t complete partial firebase keys');\n\n    if (this._apps[key.projectId] == undefined) {\n      for (let app of firebase.apps) {\n        if (app.options.databaseURL == key.databaseURL) {\n          this._apps[key.projectId] = app;\n          break;\n        }\n      }\n    }\n\n    if (this._apps[key.projectId] == undefined) {\n      this._apps[key.projectId] = firebase.initializeApp({\n        apiKey: key.apiKey,\n        databaseURL: key.databaseUrl\n      }, `app${_nextAppNameSuffix++}`);\n    }\n\n    let reference = firebase.database(this._apps[key.projectId]).ref(key.location);\n\n    let result = await realTransaction(reference, data => {\n      if ((data == null) == shouldExist)\n        return; // abort transaction\n      if (!shouldExist) {\n        return {version: 0};\n      }\n      assert(data);     \n      return data;\n    });\n\n\n    if (!result.committed)\n      return null;\n\n    return FirebaseStorageProvider.newProvider(type, this._arcId, id, reference, key);\n  }\n}\n\nclass FirebaseStorageProvider extends StorageProviderBase {\n  constructor(type, arcId, id, reference, key) {\n    super(type, arcId, undefined, id, key.toString());\n    this.firebaseKey = key;\n    this.reference = reference;\n  }\n\n  static newProvider(type, arcId, id, reference, key) {\n    if (type.isSetView)\n      return new FirebaseCollection(type, arcId, id, reference, key);\n    return new FirebaseVariable(type, arcId, id, reference, key);\n  }\n\n  static encodeKey(key) {\n    key = btoa(key);\n    return key.replace(/\\//g, '*');\n  }\n  static decodeKey(key) {\n    key = key.replace(/\\*/g, '/');\n    return atob(key);\n  }\n}\n\nclass FirebaseVariable extends FirebaseStorageProvider {\n  constructor(type, arcId, id, reference, firebaseKey) {\n    super(type, arcId, id, reference, firebaseKey);\n    this.dataSnapshot = undefined;\n    this._pendingGets = [];\n    this._version = 0;\n    this.reference.on('value', dataSnapshot => {\n      this.dataSnapshot = dataSnapshot;\n      let data = dataSnapshot.val();\n      this._pendingGets.forEach(_get => _get(data));\n      this._pendingGets = [];\n      this._version = data.version;\n      this._fire('change', {data: data.data, version: data.version});\n    });\n  }\n\n  async cloneFrom(store) {\n    let {data, version} = await store._getWithVersion();\n    await this._setWithVersion(data, version);\n  }\n\n  async get() {\n    return this.dataSnapshot.val().data;\n  }\n\n  async _getWithVersion() {\n    if (this.dataSnapshot == undefined) {\n      return new Promise((resolve, reject) => {\n        this._pendingGets.push(resolve);\n      });\n    }\n    return this.dataSnapshot.val();\n  }\n\n  async _setWithVersion(data, version) {\n    await realTransaction(this.reference, _ => ({data, version}));\n  }\n\n  async set(value) {\n    return realTransaction(this.reference, data => {\n      if (JSON.stringify(data.data) == JSON.stringify(value))\n        return data;\n      return {data: value, version: data.version + 1};\n    });\n  }\n\n  async clear() {\n    return this.set(null);\n  }\n}\n\nclass FirebaseCollection extends FirebaseStorageProvider {\n  constructor(type, arcId, id, reference, firebaseKey) {\n    super(type, arcId, id, reference, firebaseKey);\n    this.dataSnapshot = undefined;\n    this._pendingGets = [];\n    this.reference.on('value', dataSnapshot => {\n      this.dataSnapshot = dataSnapshot;\n      let data = dataSnapshot.val();\n      this._pendingGets.forEach(_get => _get(data));\n      this._pendingGets = [];\n      this._fire('change', {data: this._setToList(data.data), version: data.version});\n    });\n  }\n\n  async get(id) {\n    let set = this.dataSnapshot.val().data;\n    let encId = FirebaseStorageProvider.encodeKey(id);\n    if (set)\n      return set[encId];\n    return undefined;\n  }\n\n  async remove(id) {\n    return realTransaction(this.reference, data => {\n      if (!data.data)\n        data.data = {};\n      let encId = FirebaseStorageProvider.encodeKey(id);\n      data.data[encId] = null;\n      data.version += 1;\n      return data;\n    });\n  }\n\n  async store(entity) {\n    return realTransaction(this.reference, data => {\n      if (!data.data)\n        data.data = {};\n      let encId = FirebaseStorageProvider.encodeKey(entity.id);\n      if (data.data[encId] && JSON.stringify(data.data[encId]) == JSON.stringify(entity))\n        return data;\n      data.data[encId] = entity;\n      data.version += 1;\n      return data;\n    });\n  }\n\n  async cloneFrom(store) {\n    let {list, version} = await store._toListWithVersion();\n    await this._fromListWithVersion(list, version);\n  }\n\n  async _fromListWithVersion(list, version) {\n    return realTransaction(this.reference, data => {\n      if (!data.data)\n        data.data = {};\n      list.forEach(item => {\n        let encId = FirebaseStorageProvider.encodeKey(item.id);\n        data.data[encId] = item;\n      });\n      data.version = version;\n      return data;\n    });\n  }\n\n  async toList() {\n    if (this.dataSnapshot == undefined) {\n      return new Promise((resolve, reject) => {\n        this._pendingGets.push(resolve);\n      }).then(data => this._setToList(data.data));\n    }\n    return this._setToList(this.dataSnapshot.val().data);\n  }\n\n  async _toListWithVersion() {\n    if (this.dataSnapshot == undefined) {\n      return new Promise((resolve, reject) => {\n        this._pendingGets.push(resolve);\n      }).then(data => ({list: this._setToList(data.data), version: data.version}));\n    }\n    let data = this.dataSnapshot.val();\n    return {list: this._setToList(data.data), version: data.version};\n  }\n\n  _setToList(set) {\n    let list = [];\n    if (set) {\n      for (let key in set) {\n        list.push(set[key]);\n      }\n    }\n    return list;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/storage/firebase-storage.js\n// module id = 95\n// module chunks = 0","// @\n// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n'use strict';\n\nimport assert from '../../platform/assert-web.js';\nimport tracing from '../../tracelib/trace.js';\nimport util from '../recipe/util.js';\nimport StorageProviderBase from './storage-provider-base.js';\nimport KeyBase from './key-base.js';\n\nclass InMemoryKey extends KeyBase {\n  constructor(key) {\n    super();\n    let parts = key.split('://');\n    this.protocol = parts[0];\n    assert(this.protocol == 'in-memory');\n    parts = parts[1] ? parts.slice(1).join('://').split('^^') : [];\n    this.arcId = parts[0];\n    this.location = parts[1];\n    assert(this.toString() == key);\n  }\n\n  childKeyForHandle(id) {\n    return new InMemoryKey('in-memory://');\n  }\n\n  toString() {\n    if (this.location !== undefined && this.arcId !== undefined)\n      return `${this.protocol}://${this.arcId}^^${this.location}`;\n    if (this.arcId !== undefined)\n      return `${this.protocol}://${this.arcId}`;\n    return `${this.protocol}`;\n  }\n}\n\nlet __storageCache = {};\n\nexport default class InMemoryStorage {\n  constructor(arcId) {\n      assert(arcId !== undefined, 'Arcs with storage must have ids');\n      this._arcId = arcId;\n      this._memoryMap = {};\n      this.localIDBase = 0;\n      // TODO(shans): re-add this assert once we have a runtime object to put it on.\n      // assert(__storageCache[this._arc.id] == undefined, `${this._arc.id} already exists in local storage cache`);\n      __storageCache[this._arcId] = this;\n  }\n\n  async construct(id, type, keyFragment) {\n    let key = new InMemoryKey(keyFragment);\n    if (key.arcId == undefined)\n      key.arcId = this._arcId;\n    if (key.location == undefined)\n      key.location = 'in-memory-' + this.localIDBase++;\n    let provider = InMemoryStorageProvider.newProvider(type, this._arcId, undefined, id, key.toString());\n    if (this._memoryMap[key.toString()] !== undefined)\n      return null;\n    this._memoryMap[key.toString()] = provider;\n    return provider;\n  }\n\n  async connect(id, type, keyString) {\n    let key = new InMemoryKey(keyString);\n    if (key.arcId !== this._arcId.toString()) {\n      if (__storageCache[key.arcId] == undefined)\n        return null;\n      return __storageCache[key.arcId].connect(id, type, keyString);\n    }\n    if (this._memoryMap[keyString] == undefined)\n      return null;\n    // TODO assert types match?\n    return this._memoryMap[keyString];\n  }\n\n  parseStringAsKey(string) {\n    return new InMemoryKey(string);\n  }\n}\n\nclass InMemoryStorageProvider extends StorageProviderBase {\n  static newProvider(type, arcId, name, id, key) {\n    if (type.isSetView)\n      return new InMemoryCollection(type, arcId, name, id, key);\n    return new InMemoryVariable(type, arcId, name, id, key);\n  }\n}\n\nclass InMemoryCollection extends InMemoryStorageProvider {\n  constructor(type, arcId, name, id, key) {\n    super(type, arcId, name, id, key);\n    this._items = new Map();\n    assert(this._version !== null);\n  }\n\n  clone() {\n    let handle = new InMemoryCollection(this._type, this._arcId, this.name, this.id);\n    handle.cloneFrom(this);\n    return handle;\n  }\n\n  async cloneFrom(handle) {\n    let {list, version} = await handle._toListWithVersion();\n    assert(version !== null);\n    await this._fromListWithVersion(list, version);\n  }\n\n  async _fromListWithVersion(list, version) {\n    this._version = version;\n    list.forEach(item => this._items.set(item.id, item));\n  }\n\n  async get(id) {\n    return this._items.get(id);\n  }\n  traceInfo() {\n    return {items: this._items.size};\n  }\n  // HACK: replace this with some kind of iterator thing?\n  async toList() {\n    return [...this._items.values()];\n  }\n\n  async _toListWithVersion() {\n    return {list: [...this._items.values()], version: this._version};\n  }\n\n  async store(entity) {\n    let trace = tracing.start({cat: 'handle', name: 'InMemoryCollection::store', args: {name: this.name}});\n    let entityWasPresent = this._items.has(entity.id);\n    if (entityWasPresent && (JSON.stringify(this._items.get(entity.id)) == JSON.stringify(entity))) {\n      trace.end({args: {entity}});\n      return;\n    }\n    this._items.set(entity.id, entity);\n    this._version++;\n    if (!entityWasPresent)\n      this._fire('change', {add: [entity], version: this._version});\n    trace.end({args: {entity}});\n  }\n\n  async remove(id) {\n    let trace = tracing.start({cat: 'handle', name: 'InMemoryCollection::remove', args: {name: this.name}});\n    if (!this._items.has(id)) {\n      return;\n    }\n    let entity = this._items.get(id);\n    assert(this._items.delete(id));\n    this._version++;\n    this._fire('change', {remove: [entity], version: this._version});\n    trace.end({args: {entity}});\n  }\n\n  // TODO: Something about iterators??\n  // TODO: Something about changing order?\n\n  serializedData() {\n    return this.toList();\n  }\n}\n\nclass InMemoryVariable extends InMemoryStorageProvider {\n  constructor(type, arcId, name, id, key) {\n    super(type, arcId, name, id, key);\n    this._stored = null;\n  }\n\n  clone() {\n    let variable = new InMemoryVariable(this._type, this._arcId, this.name, this.id);\n    variable.cloneFrom(this);\n    return variable;\n  }\n\n  async cloneFrom(handle) {\n    let {data, version} = await handle._getWithVersion();\n    await this._setWithVersion(data, version);\n  }\n\n  async _setWithVersion(data, version) {\n    this._stored = data;\n    this._version = version;\n  }\n\n  traceInfo() {\n    return {stored: this._stored !== null};\n  }\n\n  async get() {\n    return this._stored;\n  }\n\n  async _getWithVersion() {\n    return {data: this._stored, version: this._version};\n  }\n\n  async set(entity) {\n    if (JSON.stringify(this._stored) == JSON.stringify(entity))\n      return;\n    this._stored = entity;\n    this._version++;\n    this._fire('change', {data: this._stored, version: this._version});\n  }\n\n  async clear() {\n    this.set(undefined);\n  }\n\n  serializedData() {\n    return [this._stored];\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/storage/in-memory-storage.js\n// module id = 96\n// module chunks = 0","// Copyright (c) 2017 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport assert from '../../platform/assert-web.js';\nimport {Strategy} from '../../strategizer/strategizer.js';\nimport Recipe from '../recipe/recipe.js';\nimport RecipeWalker from '../recipe/walker.js';\n\nexport default class CombinedStrategy extends Strategy {\n  constructor(strategies) {\n    super();\n    assert(strategies.length > 1, 'Strategies must contain at least 2 elements.');\n    this._strategies = strategies;\n    this._strategies.forEach(strategy => assert(strategy.walker));\n    assert(this._strategies[0].getResults);\n  }\n  _getLeaves(results) {\n    // Only use leaf recipes.\n    let recipeByParent = new Map();\n    let resultsList = [...results.values()];\n    resultsList.forEach(r => {\n      r.derivation.forEach(d => {\n        if (d.parent) {\n          recipeByParent.set(d.parent, r);\n        }\n      });\n    });\n    return resultsList.filter(r => !recipeByParent.has(r));\n  }\n  async generate(inputParams) {\n    let results = this._strategies[0].getResults(inputParams);\n    let totalResults = new Map();\n    for (let strategy of this._strategies) {\n      results = Recipe.over(results, strategy.walker, strategy);\n      results = await Promise.all(results.map(async result => {\n        if (result.hash) {\n          result.hash = await result.hash;\n        }\n        if (!totalResults.has(result.hash)) {\n          // TODO: deduping of results is already done in strategizer.\n          // It should dedup the intermeditate derivations as well.\n          totalResults.set(result.hash, result);\n        }\n        return result;\n      }));\n      results = this._getLeaves(totalResults);\n    }\n\n    return results;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/combined-strategy.js\n// module id = 97\n// module chunks = 0","// Copyright (c) 2018 Google Inc. All rights reserved.\n// This code may only be used under the BSD style license found at\n// http://polymer.github.io/LICENSE.txt\n// Code distributed by Google as part of this project is also\n// subject to an additional IP rights grant found at\n// http://polymer.github.io/PATENTS.txt\n\nimport {Ruleset} from '../../strategizer/strategizer.js';\nimport ConvertConstraintsToConnections from './convert-constraints-to-connections.js';\nimport AssignRemoteHandles from './assign-remote-handles.js';\nimport CopyRemoteHandles from './copy-remote-handles.js';\nimport AssignHandlesByTagAndType from './assign-handles-by-tag-and-type.js';\nimport InitPopulation from './init-population.js';\nimport MapSlots from './map-slots.js';\nimport MatchParticleByVerb from './match-particle-by-verb.js';\nimport MatchRecipeByVerb from './match-recipe-by-verb.js';\nimport NameUnnamedConnections from './name-unnamed-connections.js';\nimport AddUseHandles from './add-use-handles.js';\nimport CreateDescriptionHandle from './create-description-handle.js';\nimport InitSearch from './init-search.js';\nimport SearchTokensToParticles from './search-tokens-to-particles.js';\nimport FallbackFate from './fallback-fate.js';\nimport GroupHandleConnections from './group-handle-connections.js';\nimport CombinedStrategy from './combined-strategy.js';\nimport MatchFreeHandlesToConnections from './match-free-handles-to-connections.js';\nimport CreateHandles from './create-handles.js';\nimport ResolveRecipe from './resolve-recipe.js';\n\nexport const Empty = new Ruleset.Builder().build();\n\nexport const ExperimentalPhased = new Ruleset.Builder().order(\n  [\n    InitPopulation,\n    InitSearch\n  ],\n  SearchTokensToParticles,\n  [\n    MatchRecipeByVerb,\n    MatchParticleByVerb\n  ],\n  ConvertConstraintsToConnections,\n  GroupHandleConnections,\n  [\n    CreateHandles,\n    AddUseHandles,\n    AssignRemoteHandles,\n    CopyRemoteHandles,\n    AssignHandlesByTagAndType,\n    MatchFreeHandlesToConnections,\n    FallbackFate,\n  ],\n  MapSlots,\n  CreateDescriptionHandle,\n  ResolveRecipe\n).build();\n\nexport const ExperimentalLinear = new Ruleset.Builder().order(\n  InitPopulation,\n  InitSearch,\n  SearchTokensToParticles,\n  MatchRecipeByVerb,\n  MatchParticleByVerb,\n  ConvertConstraintsToConnections,\n  GroupHandleConnections,\n  MatchFreeHandlesToConnections,\n  CreateHandles,\n  AddUseHandles,\n  FallbackFate,\n  AssignRemoteHandles,\n  CopyRemoteHandles,\n  AssignHandlesByTagAndType,\n  MapSlots,\n  CreateDescriptionHandle,\n  ResolveRecipe\n).build();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/strategies/rulesets.js\n// module id = 98\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport assert from '../platform/assert-web.js';\nimport Type from './type.js';\n\nexport default class TupleFields {\n  constructor(fieldList) {\n    this.fieldList = fieldList;\n  }\n\n  static fromLiteral(literal) {\n    return new TupleFields(literal.map(a => Type.fromLiteral(a)));\n  }\n\n  toLiteral() {\n    return this.fieldList.map(a => a.toLiteral());\n  }\n\n  clone() {\n    return new TupleFields(this.fieldList.map(a => a.clone()));\n  }\n\n  equals(other) {\n    if (this.fieldList.length !== other.fieldList.length)\n      return false;\n    for (let i = 0; i < this.fieldList.length; i++) {\n      if (!this.fieldList[i].equals(other.fieldList[i]))\n        return false;\n    }\n    return true;\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./runtime/tuple-fields.js\n// module id = 99\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nconst nob = () => Object.create(null);\n\nexport default Base => class extends Base {\n  constructor() {\n    super();\n    this._pendingProps = nob();\n    this._props = this._getInitialProps() || nob();\n    this._lastProps = nob();\n    this._state = this._getInitialState() || nob();\n    this._lastState = nob();\n  }\n  _getInitialProps() {\n  }\n  _getInitialState() {\n  }\n  _getProperty(name) {\n    return this._pendingProps[name] || this._props[name];\n  }\n  _setProperty(name, value) {\n    // dirty checking opportunity\n    if (this._validator || this._wouldChangeProp(name, value)) {\n      this._pendingProps[name] = value;\n      this._invalidateProps();\n    }\n  }\n  _wouldChangeValue(map, name, value) {\n    // TODO(sjmiles): fundamental dirty-checking issue here. Can be overridden to change\n    // behavior, but the default implementation will use strict reference checking.\n    // To modify structured values one must create a new Object with the new values.\n    // See `_setImmutableState`.\n    return (map[name] !== value);\n    // TODO(sjmiles): an example of dirty-checking that instead simply punts on structured data\n    //return (typeof value === 'object') || (map[name] !== value);\n  }\n  _wouldChangeProp(name, value) {\n    return this._wouldChangeValue(this._props, name, value);\n  }\n  _wouldChangeState(name, value) {\n    return this._wouldChangeValue(this._state, name, value);\n  }\n  _setProps(props) {\n    // TODO(sjmiles): should be a replace instead of a merge?\n    Object.assign(this._pendingProps, props);\n    this._invalidateProps();\n  }\n  _invalidateProps() {\n    this._propsInvalid = true;\n    this._invalidate();\n  }\n  _setImmutableState(name, value) {\n    if (typeof name === 'object') {\n      console.warn('Xen:: _setImmutableState takes name and value args for a single property, dictionaries not supported.');\n      value = Object.values(name)[0];\n      name = Object.names(name)[0];\n    }\n    if (typeof value === 'object') {\n      value = Object.assign(Object.create(null), value);\n    }\n    this._state[name] = value;\n    this._invalidate();\n  }\n  _setState(object) {\n    let dirty = false;\n    const state = this._state;\n    for (const property in object) {\n      const value = object[property];\n      if (this._wouldChangeState(property, value)) {\n        dirty = true;\n        state[property] = value;\n      }\n    }\n    if (dirty) {\n      this._invalidate();\n      return true;\n    }\n  }\n  // TODO(sjmiles): deprecated\n  _setIfDirty(object) {\n    return this._setState(object);\n  }\n  _async(fn) {\n    return Promise.resolve().then(fn.bind(this));\n    //return setTimeout(fn.bind(this), 10);\n  }\n  _invalidate() {\n    if (!this._validator) {\n      this._validator = this._async(this._validate);\n    }\n  }\n  _getStateArgs() {\n    return [this._props, this._state, this._lastProps, this._lastState];\n  }\n  _validate() {\n    const stateArgs = this._getStateArgs();\n    // try..catch to ensure we nullify `validator` before return\n    try {\n      // TODO(sjmiles): should be a replace instead of a merge\n      Object.assign(this._props, this._pendingProps);\n      if (this._propsInvalid) {\n        // TODO(sjmiles): should/can have different timing from rendering?\n        this._willReceiveProps(...stateArgs);\n        this._propsInvalid = false;\n      }\n      if (this._shouldUpdate(...stateArgs)) {\n        // TODO(sjmiles): consider throttling update to rAF\n        this._ensureMount();\n        this._doUpdate(...stateArgs);\n      }\n    } catch (x) {\n      console.error(x);\n    }\n    // nullify validator _after_ methods so state changes don't reschedule validation\n    this._validator = null;\n    // save the old props and state\n    this._lastProps = Object.assign(nob(), this._props);\n    this._lastState = Object.assign(nob(), this._state);\n  }\n  _doUpdate(...stateArgs) {\n    this._update(...stateArgs);\n    this._didUpdate(...stateArgs);\n  }\n  _ensureMount() {\n  }\n  _willReceiveProps() {\n  }\n  _shouldUpdate() {\n    return true;\n  }\n  _update() {\n  }\n  _didUpdate() {\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./shell/components/xen/xen-state.js\n// module id = 100\n// module chunks = 0","/*\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// HTMLImports compatibility stuff, delete soonish\nif (typeof document !== 'undefined' && !('currentImport' in document)) {\n  Object.defineProperty(document, 'currentImport', {\n    get() {\n      const script = this.currentScript;\n      let doc = script.ownerDocument || this;\n      // this code for CEv1 compatible HTMLImports polyfill (aka modern)\n      if (window['HTMLImports']) {\n        doc = window.HTMLImports.importForElement(script);\n        doc.URL = script.parentElement.href;\n      }\n      return doc;\n    }\n  });\n}\n\n/* Annotator */\n// tree walker that generates arbitrary data using visitor function `cb`\n// `cb` is called as `cb(node, key, notes)`\n// where\n//   `node` is a visited node.\n//   `key` is a handle which identifies the node in a map generated by `Annotator.locateNodes`.\nclass Annotator {\n  constructor(cb) {\n    this.cb = cb;\n  }\n  // For subtree at `node`, produce annotation object `notes`.\n  // the content of `notes` is completely determined by the behavior of the\n  // annotator callback function supplied at the constructor.\n  annotate(node, notes, opts) {\n    this.notes = notes;\n    this.opts = opts || 0;\n    this.key = this.opts.key || 0;\n    notes.locator = this._annotateSubtree(node);\n    return notes;\n  }\n  // walking subtree at `node`\n  _annotateSubtree(node) {\n    let childLocators;\n    for (let i = 0, child = node.firstChild, previous = null, neo; child; i++) {\n      // returns a locator only if a node in the subtree requires one\n      let childLocator = this._annotateNode(child);\n      // only when necessary, maintain a sparse array of locators\n      if (childLocator) {\n        (childLocators = childLocators || {})[i] = childLocator;\n      }\n      // `child` may have been evacipated by visitor\n      neo = previous ? previous.nextSibling : node.firstChild;\n      if (neo === child) {\n        previous = child;\n        child = child.nextSibling;\n      } else {\n        child = neo;\n        i--;\n      }\n    }\n    // is falsey unless there was at least one childLocator\n    return childLocators;\n  }\n  _annotateNode(node) {\n    // visit node\n    let key = this.key++;\n    let shouldLocate = this.cb(node, key, this.notes, this.opts);\n    // recurse\n    let locators = this._annotateSubtree(node);\n    if (shouldLocate || locators) {\n      let cl = Object.create(null);\n      cl.key = key;\n      if (locators) {\n        cl.sub = locators;\n      }\n      return cl;\n    }\n  }\n}\n\nconst locateNodes = function(root, locator, map) {\n  map = map || [];\n  for (let n in locator) {\n    const loc = locator[n];\n    if (loc) {\n      const node = root.childNodes[n];\n      // TODO(sjmiles): text-nodes sometimes evacipate when stamped, so map to the parentElement instead\n      map[loc.key] = (node.nodeType === Node.TEXT_NODE) ? node.parentElement : node;\n      if (loc.sub) {\n        // recurse\n        locateNodes(node, loc.sub, map);\n      }\n    }\n  }\n  return map;\n};\n\n/* Annotation Producer */\n// must return `true` for any node whose key we wish to track\nconst annotatorImpl = function(node, key, notes, opts) {\n  // hook\n  if (opts.annotator && opts.annotator(node, key, notes, opts)) {\n    return true;\n  }\n  // default\n  switch (node.nodeType) {\n    case Node.DOCUMENT_FRAGMENT_NODE:\n      return;\n    case Node.ELEMENT_NODE:\n      return annotateElementNode(node, key, notes);\n    case Node.TEXT_NODE:\n      return annotateTextNode(node, key, notes);\n  }\n};\n\nconst annotateTextNode = function(node, key, notes) {\n  if (annotateMustache(node, key, notes, 'textContent', node.textContent)) {\n    node.textContent = '';\n    return true;\n  }\n};\n\nconst annotateElementNode = function(node, key, notes) {\n  if (node.hasAttributes()) {\n    let noted = false;\n    for (let a$ = node.attributes, i = a$.length - 1, a; i >= 0 && (a = a$[i]); i--) {\n      if (\n        annotateEvent(node, key, notes, a.name, a.value) ||\n        annotateMustache(node, key, notes, a.name, a.value)\n      ) {\n        node.removeAttribute(a.name);\n        noted = true;\n      }\n    }\n    return noted;\n  }\n};\n\nconst annotateMustache = function(node, key, notes, property, mustache) {\n  if (mustache.slice(0, 2) === '{{') {\n    if (property === 'class') {\n      property = 'className';\n    }\n    let value = mustache.slice(2, -2);\n    let override = value.split(':');\n    if (override.length === 2) {\n      property = override[0];\n      value = override[1];\n    }\n    takeNote(notes, key, 'mustaches', property, value);\n    if (value[0] === '$') {\n      takeNote(notes, 'xlate', value, true);\n    }\n    return true;\n  }\n};\n\nconst annotateEvent = function(node, key, notes, name, value) {\n  if (name.slice(0, 3) === 'on-') {\n    if (value.slice(0, 2) === '{{') {\n      value = value.slice(2, -2);\n      console.warn(\n        `Xen: event handler for '${name}' expressed as a mustache, which is not supported. Using literal value '${value}' instead.`\n      );\n    }\n    takeNote(notes, key, 'events', name.slice(3), value);\n    return true;\n  }\n};\n\nconst takeNote = function(notes, key, group, name, note) {\n  let n$ = notes[key] || (notes[key] = Object.create(null));\n  (n$[group] || (n$[group] = {}))[name] = note;\n};\n\nconst annotator = new Annotator(annotatorImpl);\n\nconst annotate = function(root, key, opts) {\n  return (root._notes ||\n    (root._notes = annotator.annotate(root.content, {/*ids:{}*/}, key, opts))\n  );\n};\n\n/* Annotation Consumer */\nconst mapEvents = function(notes, map, mapper) {\n  // add event listeners\n  for (let key in notes) {\n    let node = map[key];\n    let events = notes[key] && notes[key].events;\n    if (node && events) {\n      for (let name in events) {\n        mapper(node, name, events[name]);\n      }\n    }\n  }\n};\n\nconst listen = function(controller, node, eventName, handlerName) {\n  node.addEventListener(eventName, function(e) {\n    if (controller[handlerName]) {\n      return controller[handlerName](e, e.detail);\n    }\n  });\n};\n\nconst set = function(notes, map, scope, controller) {\n  if (scope) {\n    for (let key in notes) {\n      let node = map[key];\n      if (node) {\n        // everybody gets a scope\n        node.scope = scope;\n        // now get your regularly scheduled bindings\n        let mustaches = notes[key].mustaches;\n        for (let name in mustaches) {\n          let property = mustaches[name];\n          if (property in scope) {\n            _set(node, name, scope[property], controller);\n          }\n        }\n      }\n    }\n  }\n};\n\nconst _set = function(node, property, value, controller) {\n  // TODO(sjmiles): the property conditionals here could be precompiled\n  let modifier = property.slice(-1);\n  if (property === 'style%' || property === 'style') {\n    if (typeof value === 'string') {\n      node.style.cssText = value;\n    } else {\n      Object.assign(node.style, value);\n    }\n  } else if (modifier == '$') {\n    let n = property.slice(0, -1);\n    if (typeof value === 'boolean') {\n      setBoolAttribute(node, n, value);\n    } else {\n      node.setAttribute(n, value);\n    }\n  } else if (property === 'textContent') {\n    if (value && (value.$template || value.template)) {\n      _setSubTemplate(node, value, controller);\n    } else {\n      node.textContent = (value || '');\n    }\n  } else if (property === 'unsafe-html') {\n    node.innerHTML = value || '';\n  } else if (property === 'value') {\n    // TODO(sjmiles): specifically dirty-check `value` to avoid resetting input elements\n    if (node.value !== value) {\n      node.value = value;\n    }\n  } else {\n    node[property] = value;\n  }\n};\n\nconst setBoolAttribute = function(node, attr, state) {\n  node[\n    (state === undefined ? !node.hasAttribute(attr) : state)\n      ? 'setAttribute'\n      : 'removeAttribute'\n  ](attr, '');\n};\n\nconst _setSubTemplate = function(node, value, controller) {\n  // TODO(sjmiles): sub-template iteration ability\n  // specially implemented to support arcs (serialization boundary)\n  // Aim to re-implement as a plugin.\n  let template = value.template;\n  if (!template) {\n    let container = node.getRootNode();\n    template = container.querySelector(`template[${value.$template}]`);\n  } else {\n    template = maybeStringToTemplate(template);\n  }\n  // TODO(sjmiles): reuse nodes instead of punting them\n  node.textContent = '';\n  if (template && value.models) {\n    for (let m of value.models) {\n      stamp(template).events(controller).set(m).appendTo(node);\n    }\n  }\n};\n\nconst stamp = function(template, opts) {\n  template = maybeStringToTemplate(template);\n  // construct (or use memoized) notes\n  let notes = annotate(template, opts);\n  // CRITICAL TIMING ISSUE #1:\n  // importNode can have side-effects, like CustomElement callbacks (before we\n  // can do any work on the imported subtree, before we can mapEvents, e.g.).\n  // we could clone into an inert document (say a new template) and process the nodes\n  // before importing if necessary.\n  let root = document.importNode(template.content, true);\n  // map DOM to keys\n  let map = locateNodes(root, notes.locator);\n  // return dom manager\n  let dom = {\n    root,\n    notes,\n    map,\n    $(slctr) {\n      return this.root.querySelector(slctr);\n    },\n    set: function(scope) {\n      scope && set(notes, map, scope, this.controller);\n      return this;\n    },\n    events: function(controller) {\n      // TODO(sjmiles): originally `controller` was expected to be an Object with event handler\n      // methods on it (typically a custom-element stamping a template).\n      // In Arcs, we want to attach a generic handler (Function) for any event on this node.\n      // Subtemplate stamping gets involved because they need to reuse whichever controller.\n      // I suspect this can be simplified, but right now I'm just making it go.\n      if (controller && typeof controller !== 'function') {\n        controller = listen.bind(this, controller);\n      }\n      this.controller = controller;\n      if (controller) {\n        mapEvents(notes, map, controller);\n      }\n      return this;\n    },\n    appendTo: function(node) {\n      if (this.root) {\n        // TODO(sjmiles): assumes this.root is a fragment\n        node.appendChild(this.root);\n      } else {\n        console.warn('Xen: cannot appendTo, template stamped no DOM');\n      }\n      // TODO(sjmiles): this.root is no longer a fragment\n      this.root = node;\n      return this;\n    }\n  };\n  return dom;\n};\n\nconst maybeStringToTemplate = template => {\n  // TODO(sjmiles): need to memoize this somehow\n  return (typeof template === 'string') ? createTemplate(template) : template;\n};\n\nconst createTemplate = innerHTML => {\n  return Object.assign(document.createElement('template'), {innerHTML});\n};\n\nexport default {\n  createTemplate,\n  setBoolAttribute,\n  stamp\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./shell/components/xen/xen-template.js\n// module id = 101\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 Google Inc. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * Code distributed by Google as part of this project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport Arc from '../../runtime/arc.js';\nimport Description from '../../runtime/description.js';\nimport Manifest from '../../runtime/manifest.js';\nimport Planner from '../../runtime/planner.js';\nimport SlotComposer from '../../runtime/slot-composer.js';\nimport DomSlot from '../../runtime/dom-slot.js';\nimport Type from '../../runtime/type.js';\nimport BrowserLoader from './browser-loader.js';\nimport Tracing from '../../tracelib/trace.js';\nimport scheduler from '../../runtime/scheduler.js';\n\n//Tracing.enable();\n\nconst Arcs = {\n  version: '0.3',\n  Arc,\n  Description,\n  Manifest,\n  Planner,\n  SlotComposer,\n  DomSlot,\n  Type,\n  BrowserLoader,\n  Tracing,\n  scheduler\n};\n\n// TODO(sjmiles): can't export because WebPack won't make a built version with a module export\n// Instead we fall back to populating a global (possibly already created in app-shell/lib/arcs.js).\n// export default Arcs;\n\nwindow.Arcs = window.Arcs ? Object.assign(window.Arcs, Arcs) : Arcs;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./shell/source/ArcsLib.js\n// module id = 102\n// module chunks = 0"],"sourceRoot":""}