/*
 * Copyright 2019 Google LLC.
 *
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 *
 * Code distributed by Google as part of this project is also subject to an additional IP rights
 * grant found at
 * http://polymer.github.io/PATENTS.txt
 */

package arcs.core.storage.api

import arcs.core.common.Referencable
import arcs.core.data.RawEntity
import arcs.core.data.Schema
import arcs.core.data.util.ReferencablePrimitive
import kotlin.IllegalArgumentException
import kotlin.reflect.KClass

interface Entity {
    var internalId: String
    fun serialize(): RawEntity
}

/**
 * Spec for an [Entity] type. Can create and deserialize new entities.
 *
 * Implementation classes are autogenerated for each entity type.
 */
interface EntitySpec<T : Entity> {
    /** Returns an empty new instance of [T]. */
    fun create(): T

    /**
     * Takes a [RawEntity] and convert it to concrete entity class [T].
     *
     * TODO: replace this with kotlinx.serialization
     */
    fun deserialize(data: RawEntity): T

    /** The corresponding [Schema] for the specified [Entity]. */
    val SCHEMA: Schema
}

/**
 * Try to extract the primitive value from a [ReferencablePrimitive].
 */
@Suppress("UNCHECKED_CAST")
fun <T : Any> Referencable?.toPrimitiveValue(
    valueType: KClass<T>,
    defaultValue: T
): T {
    if (this == null) {
        return defaultValue
    }
    if (this is ReferencablePrimitive<*> && this.value!!::class == valueType) {
        return (this as ReferencablePrimitive<T>).value
    }
    throw IllegalArgumentException(
        "$this of type ${this::class} is not a ReferenceablePrimitive<$valueType>"
    )
}
