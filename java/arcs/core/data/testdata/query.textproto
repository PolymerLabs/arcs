# A proto encoding of a resolved and type-checked recipe:
#
# external particle Egress
#   data: reads [(&Shown {vertical: Text},
#                 &?Invoked {})]
# 
# recipe
#   shown: map *
#   invoked: map *
#   query: join (shown, invoked) [shown.session == invoked.session]
#   Egress
#     data: reads query

recipes {
  handles {
    name: "shown"
    fate: MAP
    # Storage key has been resolved.
    storage_key: "db://abc"
    # Type not inlined, as it's not needed for SQL generation.
  }
  handles {
    name: "invoked"
    fate: MAP
    # Storage key has been resolved.
    storage_key: "db://xyz"
    # Type not inlined, as it's not needed for SQL generation.
  }
  handles {
    name: "query"
    fate: JOIN
    associated_handles: "shown"
    associated_handles: "invoked"
    type: {
      collection {
        collection_type {
          tuple {
            elements {
              reference {
                referred_type {
                  entity {
                    schema {
                      names: "Shown"
                      fields {
                        key: "vertical"
                        value: {
                          primitive: TEXT
                        }
                      }
                      fields {
                        key: "session"
                        value: {
                          variable {
                            name: "a"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            elements {
              optional: true
              reference { 
                referred_type {
                  entity {
                    schema {
                      names: "Invoked"
                      fields {
                        key: "session"
                        value: {
                          variable {
                            name: "a"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          refinement {
            binary {
              left_expr {
                field: "0.session"
              }
              operator: EQUALS
              right_expr {
                field: "1.session"
              }
            }
          }
        }
      }
    }
  }
  particles {
    spec_name: "Egress"
    connections {
      name: "data"
      handle: "query"
    }
  }
}

particle_specs {
  name: "Egress"
  connections {
    name: "data"
    direction: READS
    type {
      collection {
        collection_type {
          tuple {
            elements {
              reference {
                referred_type {
                  entity {
                    schema {
                      names: "Shown"
                      fields {
                        key: "vertical"
                        value: {
                          primitive: TEXT
                        }
                      }
                    }
                  }
                }
              }
            }
            elements {
              optional: true
              reference {
                referred_type {
                  entity {
                    schema {
                      names: "Invoked"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
