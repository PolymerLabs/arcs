#!/bin/bash

source $(dirname $0)/logging.sh

NVM_VERSION="v0.34.0"

append_once() {
  if grep -Fxq "$1" "$2"; then
    status "Already updated."
  else
    echo "$1" >> "$2" || warn "Failed to update $2"
  fi
}

# Detect Platform
case $(uname | tr '[:upper:]' '[:lower:]') in
  linux*)
    OS_NAME=linux
    ;;
  darwin*)
    OS_NAME=osx
    ;;
  msys*)
    OS_NAME=windows
    # TODO(alxr) investigate windows compatability
    fail "Windows is currently unsupported. Please follow install instructions in the README."
    ;;
  *)
    OS_NAME=notset
    fail "Can't detect host OS"
    ;;
esac

status "0. Pre-requisites"
if [ "$OS_NAME" = "linux" ]; then
  status "0.1 Installing pre-requisites for Bazel"
  sudo apt-get install pkg-config zip g++ zlib1g-dev unzip python3
elif [ "$OS_NAME" = "osx" ]; then
  status "0.1. Checking for Command Line Tools"
  xcode-select --version || xcode-select --install || fail "Unable to install Command Line Tools"
  status "0.2. Updating SSL Certificates for Python3.6"
  /Applications/Python\ 3.6/Install\ Certificates.command
fi

status "1. Install nvm"
curl -L -s -o- "https://raw.githubusercontent.com/creationix/nvm/$NVM_VERSION/install.sh" | sh || \
    fail "Failed to download nvm version $NVM_VERSION."

status "1.1 ensure nvm is in your current process"
# shellcheck disable=SC1090
. $NVM_DIR/nvm.sh || fail "Nvm load failed"

status "2. Install node"
cd $ROOT && nvm install && nvm use || fail 'Failed to install target node version.'
cd -

status "3. Update npm to latest version"
nvm install-latest-npm  || fail 'Failed to update npm to latest version.'

status "4. Install dependencies"
(cd $ROOT && npm install && npm --prefix=cloud install) || fail 'Failed to install dependencies.'

# chokidar is useful when developing, but we don't want to require it for all installations
status "4.1. Install useful optional dependencies"
(cd $ROOT && npm install --no-save chokidar) || fail 'Failed to install optional dependencies.'

status "5. Install Bazel"

status "5.1. Downloading and running install script"
(cd $ROOT && ./tools/install_bazel.sh)

status "5.2. Updating PATH"
append_once 'export PATH="$PATH:$HOME/bin"' ~/.profile
# Makes the updates visible at this subshell i.e. bazel
source ~/.profile

status "6. Install ktlint"
(cd $HOME/bin && curl -L -s -O https://github.com/pinterest/ktlint/releases/download/0.35.0/ktlint && cd -) || fail 'Failed to install ktlint'
chmod a+x $HOME/bin/ktlint

echo "$GRN$BLD\n\nSETUP COMPLETE\n$END"
echo "node --version"
node --version
echo "npm --version"
npm --version
echo "bazel --version"
bazel --version
echo "ktlint --version"
ktlint --version
echo "\nNext, try the following:\n"
echo "- Setup git hooks: $CMD\`git config core.hooksPath tools/hooks\`$END"
echo "- Serve the project: $CMD\`./tools/sigh devServer\`$END"
echo "- Run tests:"
echo "  - $CMD\`./tools/sigh test\`$END"
echo "  - $CMD\`./tools/test\`$END"

echo "\nPlease source the updated environment variables:"
echo "  - $CMD\`source ~/.profile\`$END"
