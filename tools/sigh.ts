/**
 * @license
 * Copyright (c) 2017 Google Inc. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * Code distributed by Google as part of this project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

const fs = require('fs');
const os = require('os');
const path = require('path');
const minimist = require('minimist');
const semver = require('semver');
import {ChildProcess} from 'child_process';

// Use saneSpawn[Sync] or saneSpawnSyncWithOutput instead, as the arguments to
// child_process.spawn[Sync] calls must be massaged to be cross-platform.
// tslint:disable-next-line: variable-name
const _DO_NOT_USE_spawnSync = require('child_process').spawnSync;
// tslint:disable-next-line: variable-name
const _DO_NOT_USE_spawn = require('child_process').spawn;

const projectRoot = path.resolve(__dirname, '..');
process.chdir(projectRoot);

// Flags for sigh and unit tests; use `global['testFlags'].foo` to access them.
let globalOptions = {
  install: false,
  /** If true, runs tests with some warning messages suppressed. */
  quiet: false,
  /** If true, runs tests flagged as bazel tests. */
  bazel: false,
};

const sources = {
  peg: [{
    grammar: 'src/runtime/manifest-parser.pegjs',
    astNodes: 'src/runtime/manifest-ast-types/manifest-ast-nodes.ts',
    output: 'src/gen/runtime/manifest-parser.ts',
    railroad: 'manifest-railroad.html',
    tspegjs: {
      noTsLint: false,
      tslintIgnores:
          'no-any, only-arrow-functions, max-line-length, trailing-comma, interface-name, switch-default, object-literal-shorthand',
      customHeader: `
// DO NOT EDIT, AUTOGENERATED from src/runtime/manifest-parser.pegjs
import * as AstNode from '../../runtime/manifest-ast-types/manifest-ast-nodes.js';
import {Flags} from '../../runtime/flags.js';
`
    }
  }]
};

const build = buildPath('.', cleanObsolete);
const webpack = webpackPkg('webpack');
const webpackTools = webpackPkg('webpack-tools');
const webpackStorage = webpackPkg('storage');

const buildLS = buildPath('./src/tools/language-server', () => {
  getOptionalDependencies(['vscode-jsonrpc', 'vscode-languageserver'], 'Build the languageServer');
});
const webpackLS = webpackPkg('webpack-languageserver');

const buildShells = () => globalOptions.bazel ? true : buildPkg('shells');

const steps: {[index: string]: ((args?: string[]) => boolean|Promise<boolean>)[]} = {
  peg: [peg, railroad],
  test: [peg, build, buildShells, runTestsOrHealthOnCron],
  testShells: [peg, build, buildShells, webpack, webpackStorage, devServerAsync, testWdioShells],
  testWdioShells: [testWdioShells],
  webpack: [peg, build, buildShells, webpack],
  webpackStorage: [webpackStorage],
  webpackTools: [peg, build, webpackTools],
  build: [peg, build, buildShells],
  watch: [watch],
  buildifier: [buildifier],
  ktlint: [ktlint],
  lint: [check, peg, build, buildShells, lint, tslint, ktlint, cycles, buildifier],
  cycles: [peg, build, cycles],
  check: [check],
  clean: [clean],
  health: [health],
  bundle: runNodeScriptSteps('bundle'),
  schema2wasm: runNodeScriptSteps('schema2wasm'),
  manifest2proto: runNodeScriptSteps('manifest2proto'),
  recipe2plan: runNodeScriptSteps('recipe2plan'),
  flowcheck: runNodeScriptSteps('flowcheck'),
  updateCodegenUnitTests: runNodeScriptSteps('updateCodegenUnitTests'),
  devServer: [peg, build, buildShells, webpack, devServer],
  languageServer: [peg, build, buildLS, webpackLS],
  run: [peg, build, runNodeScript],
  buildWeb: [
    check, peg, railroad, build, buildShells, lint, tslint, cycles, webpack, devServerAsync, testWdioShells
  ],
  default: [
    check, peg, railroad, build, buildShells, lint, tslint, ktlint, buildifier, cycles, runTestsOrHealthOnCron,
    webpack, webpackTools, webpackStorage, devServerAsync, testWdioShells
  ]
};

/**
 * Maps from script name to script path. Scripts can be invoked via:
 * `tools/sigh run <script name> <script args>`.
 */
const scripts: {[index: string]: string} = {
  /** e.g. $ ./tools/sigh bundle -o restaurants.zip particles/Restaurants/Restaurants.recipes */
  bundle: 'build/tools/bundle-cli.js',

  /**
   * Runs the dataflow analyser on the recipes defined in the given manifest
   * file(s). e.g. ./tools/sigh flowcheck particles/Dataflow/Dataflow.recipe
   */
  flowcheck: 'build/dataflow/cli/flowcheck.js',

  schema2wasm: 'build/tools/schema2wasm.js',

  /** Serializes a manifest to protobufs. */
  manifest2proto: 'build/tools/manifest2proto-cli.js',

  /** Converts recipes in manifests into Kotlin Plans */
  recipe2plan: 'build/tools/recipe2plan-cli.js',

  updateCodegenUnitTests: 'build/tools/tests/codegen-unit-tests-updater.js',
};

const eslintCache = '.eslint_sigh_cache';
const coverageDir = 'coverage';
// Files to be deleted by clean, if they aren't in one of the cleanDirs.
const cleanFiles = ['manifest-railroad.html', eslintCache];
const cleanDirs = ['shell/build', 'shells/lib/build', 'build', 'dist', 'src/gen', 'test-output', 'user-test', coverageDir];

// RE pattern to exclude when finding within project source files.
const srcExclude = /\b(node_modules|deps|build|gen|dist|third_party|hackathon|cloud|Kotlin|particles[/\\]Native)\b/;

// RE pattern to exclude when finding within project built files.
const buildExclude = /\b(node_modules|deps|src|third_party|Kotlin)\b/;

// Standard flags for invoking node.
const nodeFlags = [
  '--experimental-modules',
  '--loader', fixPathForWindows(path.join(__dirname, '../tools/custom-loader.mjs'))
];

// The 'cron' env type indicates the daily build in Travis.
// TODO(bgogul): Review Travis-specific health stats upload and remove or
// rework for Parker.
const isTravisDaily = (process.env.TRAVIS_EVENT_TYPE === 'cron');

/** Logs to console.log, unless suppressed by the global --quiet flag. */
function sighLog(message, ...optionalParams) {
  if (!globalOptions.quiet) {
    console.log(message, ...optionalParams);
  }
}

// tslint:disable-next-line: no-any
function getOptionalDependencies(deps: string[], prefix): any[] {
  const result = [];
  const missing = [];
  for (const dep of deps) {
    try {
      result.push(require(dep));
    } catch (e) {
      missing.push(dep);
    }
  }
  if (missing.length === 0) {
    return result;
  }
  if (!globalOptions.install) {
    throw new class MissingDeps extends Error {
      constructor() {
        super(`${prefix} requires extra dependencies: re-run with '--install'\n`);
      }
    }();
  }
  if (!saneSpawnSync('npm', ['install', '--no-save', ...missing], {logCmd: true})) {
    throw new Error('Failed to install optional dependencies');
  }
  return deps.map(dep => require(dep));
}

function* findProjectFiles(dir: string, exclude: RegExp|null, include: RegExp|((path: string) => boolean)): Iterable<string> {
  const predicate = (include instanceof RegExp) ? (fullPath => include.test(fullPath)) : include;
  const tests = [];
  for (const entry of fs.readdirSync(dir)) {
    if (entry.startsWith('.') || (exclude && exclude.test(entry))) {
      continue;
    }
    if (entry.indexOf('bazel-') !== -1) {
      continue;
    }

    const fullPath = path.join(dir, entry);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      yield* findProjectFiles(fullPath, exclude, predicate);
    } else if (predicate(fullPath)) {
      yield fullPath;
    }
  }
}

function readProjectFile(relativePath: string): string {
  return fs.readFileSync(path.resolve(projectRoot, relativePath), 'utf-8');
}

function fixPathForWindows(path: string): string {
  if (path[0] === '/') {
    return path;
  }
  return '/' + path.replace(new RegExp(String.fromCharCode(92, 92), 'g'), '/');
}

function targetIsUpToDate(relativeTarget: string, relativeDeps: string[]): boolean {
  const target = path.resolve(projectRoot, relativeTarget);
  if (!fs.existsSync(target)) {
    return false;
  }

  const targetTime = fs.statSync(target).mtimeMs;
  for (const relativePath of relativeDeps) {
    if (fs.statSync(path.resolve(projectRoot, relativePath)).mtimeMs > targetTime) {
      return false;
    }
  }

  sighLog(`Skipping step; '${relativeTarget}' is up-to-date`);
  return true;
}

function check(): boolean {
  const engines = require('../package.json').engines;
  const nodeRequiredVersion = engines.node;
  const npmRequiredVersion = engines.npm;

  if (!semver.satisfies(process.version, nodeRequiredVersion)) {
    throw new Error(`at least node ${nodeRequiredVersion} is required, you have ${process.version}`);
  }

  const npmVersion = saneSpawnSyncWithOutput('npm', ['-v']).stdout;
  if (!semver.satisfies(npmVersion, npmRequiredVersion)) {
    throw new Error(`at least npm ${npmRequiredVersion} is required, you have ${npmVersion}`);
  }

  return true;
}

function clean(): boolean {
  for (const file of cleanFiles) {
    if (fs.existsSync(file)) {
      fs.unlinkSync(file);
      sighLog('Removed', file);
    }
  }

  const recursiveDelete = (dir) => {
    for (let entry of fs.readdirSync(dir)) {
      entry = path.join(dir, entry);
      if (fs.statSync(entry).isDirectory()) {
        recursiveDelete(entry);
      } else {
        fs.unlinkSync(entry);
      }
    }
    fs.rmdirSync(dir);
  };
  for (const buildDir of cleanDirs) {
    if (fs.existsSync(buildDir)) {
      recursiveDelete(buildDir);
      sighLog('Removed', buildDir);
    }
  }
  return true;
}

function peg(): boolean {
  const peg = require('pegjs');
  const tsPegjsPlugin = require('ts-pegjs');
  const ts = require('typescript');

  for (const pegsrc of sources.peg) {
    if (targetIsUpToDate(pegsrc.output, [pegsrc.grammar])) {
      continue;
    }

    const options = {
      format: 'bare',
      output: 'source',
      trace: false,
      plugins: [tsPegjsPlugin], // Used by manifest-parser
      tspegjs: pegsrc.tspegjs,
      returnTypes: {}
    };

    // If an ast-nodes file has been specified, use the TypeScript compiler to build an AST tree
    // of that file and extract the list of exported interfaces and types. The ts-pegjs plugin
    // uses these to correctly type the node objects generated by the pegjs parser.
    if (pegsrc.astNodes) {
      const program = ts.createProgram([pegsrc.astNodes], {});
      program.getTypeChecker(); // Required, not sure why
      program.getSourceFiles().filter(f => f.fileName === pegsrc.astNodes).forEach(f => {
        ts.forEachChild(f, node => {
          if ([ts.SyntaxKind.InterfaceDeclaration, ts.SyntaxKind.TypeAliasDeclaration].includes(node.kind) &&
              (ts.getCombinedModifierFlags(node) & ts.ModifierFlags.Export) !== 0) {
            const name = node.name.getText();
            options.returnTypes[name] = `AstNode.${name}`;
          }
        });
      });
    }

    const source = peg.generate(readProjectFile(pegsrc.grammar), options);
    const outputFile = path.resolve(projectRoot, pegsrc.output);
    const dir = path.dirname(outputFile);
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, {recursive: true});
    }
    fs.writeFileSync(outputFile, source);
  }
  return true;
}

function railroad(): boolean {
  // railroad rendering logic taken from GrammKit/cli.js
  const {transform} = require('grammkit/lib/util');
  const handlebars = require('handlebars');

  const diagramStyle = 'node_modules/grammkit/app/diagram.css';
  const appStyle = 'node_modules/grammkit/app/app.css';
  const baseTemplate = 'node_modules/grammkit/template/viewer.html';

  for (const pegsrc of sources.peg) {
    const deps = [pegsrc.grammar, diagramStyle, appStyle, baseTemplate];
    if (targetIsUpToDate(pegsrc.railroad, deps)) {
      continue;
    }

    const result = transform(readProjectFile(pegsrc.grammar));
    const grammars = result.procesedGrammars.map(({rules, references, name}) => {
      rules = rules.map(rule => {
        const ref = references[rule.name] || {};
        return {
          name: rule.name,
          diagram: rule.diagram,
          usedBy: ref.usedBy,
          references: ref.references
        };
      });

      return {name, rules};
    });

    const data = {
      title: `Railroad diagram for ${pegsrc.grammar}`,
      style: readProjectFile(diagramStyle) + '\n' + readProjectFile(appStyle),
      grammars
    };
    const template = handlebars.compile(readProjectFile(baseTemplate));
    fs.writeFileSync(path.resolve(projectRoot, pegsrc.railroad), template(data));
  }
  return true;
}

function cleanObsolete() {
  for (const file of [...findProjectFiles('build', /sigh\.js/, /\.(js|h|wasm)$/)]) {
    if (file.endsWith('.js')) {
      // js outputs - look for a corresponding source file (.js or .ts) in src.
      // Also remove the generated source map and type def files if they exist.
      const buildBase = file.slice(0, -2);         // drop 'js' extension
      const srcBase = 'src' + buildBase.slice(5);  // replace leading 'build' with 'src'
      if (!fs.existsSync(srcBase + 'ts') && !fs.existsSync(srcBase + 'js')) {
        sighLog('Cleaning obsolete build output:', file);
        ['js', 'js.map', 'd.ts'].forEach(ext => {
          const target = buildBase + ext;
          if (fs.existsSync(target)) {
            fs.unlinkSync(target);
          }
        });
      }
    } else {
      sighLog('Cleaning obsolete build output:', file);
      fs.unlinkSync(file);
    }
  }
}


function buildPath(path: string, preprocess: () => void): () => boolean {
  const fn = () => {
    preprocess();

    if (!tsc(path)) {
      console.error('build::tsc failed');
      return false;
    }

    if (!link(findProjectFiles('src', /webpack\.config\.js$/, /\.js$/))) {
      console.error('build::link failed');
      return false;
    }

    return true;
  };
  // Using a lambda breaks the display of func.name in the main execution loop.
  Object.defineProperty(fn, 'name', {value: `build ${path.slice(2)}`});
  return fn;
}

function tsc(path: string): boolean {
  sighLog(saneSpawnSyncWithOutput('node_modules/.bin/tsc',  ['--version']).stdout);
  const result = saneSpawnSyncWithOutput('node_modules/.bin/tsc', ['--diagnostics', '-p', path]);
  if (result.success) {
    sighLog(result.stdout);
  }
  return result.success;
}

function makeLink(src: string, dest: string, options: {existing: {src: string, dest: string, message: string}[]}): boolean {
  try {
    // First we have to ensure the entire path is there.
    const dir = path.dirname(dest);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, {recursive: true});
    }
    fs.linkSync(src, dest);
  } catch (lerr) {
    // In case of racing builds.
    if (lerr.message.startsWith('EEXIST:')) {
      options.existing.push({src, dest, message: lerr.message});
    } else {
      console.error(`Error when linking ${src} to ${dest}: ${lerr.message}`);
      return false;
    }
  }
  return true;
}

function link(srcFiles: Iterable<string>): boolean {
  let success = true;
  const linkOptions = {existing: []};
  for (const src of srcFiles) {
    const srcStats = fs.statSync(src);
    const dest = src.replace('src', 'build');
    try {
      const destStats = fs.statSync(dest);
      // This would have thrown if dest didn't exist, so it does.
      if (JSON.stringify(srcStats) !== JSON.stringify(destStats)) {
        // They aren't the same. This is likely due to switching branches.
        // Just remove the destination and make the link.
        fs.unlinkSync(dest);
        if (!makeLink(src, dest, linkOptions)) {
          success = false;
        }
      }
    } catch (err) {
      // If the error was that the dest does not exist, we make the link.
      if (err.code === 'ENOENT') {
        if (!makeLink(src, dest, linkOptions)) {
          success = false;
        }
      } else {
        console.error(`Unexpected stat error: ${err.message}`);
        success = false;
      }
    }
  }
  if (linkOptions.existing.length > 0) {
    console.warn(`Warning when linking ${linkOptions.existing.length} file(s) already existed.`);
  }
  return success;
}

function tslint(args: string[]): boolean {
  const options = minimist(args, {
    boolean: ['fix'],
  });

  const fixArgs = options.fix ? ['--fix'] : [];
  let success = true;
  for (const target of ['.', 'tools']) {
    const result = saneSpawnSyncWithOutput('node_modules/.bin/tslint', ['-p', target, ...fixArgs]);
    if (result.stdout) {
      sighLog(result.stdout);
    }
    success = success && result.success;
  }
  return success;
}

function ktlint(args: string[]): boolean {
  const options = minimist(args, {
    boolean: ['fix'],
  });

  const fixArgs = options.fix ? ['-F'] : [];
  const pathGlobs = [
    'java/**/*.kt',
    'javatests/**/*.kt',
    'particles/**/*.kt'
  ];
  let success = true;
  for (const pathGlob of pathGlobs) {
    // Do one glob at a time. Apparently ktlint can't handle more than one glob,
    // dunno why.
    const result = saneSpawnSyncWithOutput('ktlint', [...fixArgs, pathGlob]);
    if (result.stdout) {
      sighLog(result.stdout);
    }
    success = success && result.success;
  }
  return success;
}

function lint(args: string[]): boolean {
  const CLIEngine = require('eslint').CLIEngine;

  const options = minimist(args, {
    boolean: ['fix'],
    string: ['format']
  });

  const result = saneSpawnSyncWithOutput(
    'grep', ['--include', '\\*.ts', '-R', '"\\(describe\\|it\\)\\.only"', './src']
  );
  if (result.stdout !== '') {
    console.error(result.stdout);
    console.error('Please do not commit tests using .only (as it disables all other tests).');
    return false;
  }

  const jsSources = [...findProjectFiles(process.cwd(), srcExclude, /\.[jt]s$/)];
  const cli = new CLIEngine({
    useEsLintRc: false,
    configFile: '.eslintrc.json',
    fix: options.fix,
    cacheLocation: eslintCache,
    cache: true
  });
  const report = cli.executeOnFiles(jsSources);
  const formatter = cli.getFormatter(options.format || 'stylish');
  const output = formatter(report.results);
  if (output) {
    sighLog(output);
  }

  if (options.fix) {
    CLIEngine.outputFixes(report);
  }

  return report.errorCount === 0;
}

/** Runs buildifier on all BUILD files. */
function buildifier(args: string[]): boolean {
  const options = minimist(args, {
    boolean: ['fix'],
  });

  const buildifierOptions = ['--warnings=+out-of-order-load,-module-docstring,-bzl-visibility'];
  if (options.fix) {
    buildifierOptions.push('--lint=fix', '--mode=fix');
  } else {
    buildifierOptions.push('--lint=warn', '--mode=check');
  }

  const exclude = /^(node_modules|dist)$/;
  const include = /(WORKSPACE|BUILD|BUILD\.bazel|\.bzl)$/;
  let allSucceeded = true;
  for (const file of findProjectFiles(process.cwd(), exclude, include)) {
    const result = saneSpawnSync('npx', ['buildifier', ...buildifierOptions, file]);
    if (!result) {
      console.log('failed target was ' + file);
      allSucceeded = false;
    }
  }
  return allSucceeded;
}

/** Reports on cyclic dependencies. */
async function cycles(args: string[]): Promise<boolean> {
  // We are interested only in the runtime code, not the shells or devtools
  // TS support in madge 3.6.0 can't cope with our compiler version, 3.7.2 as of 12/12/19,
  // so we analyze the JS output in ./build rather than the TS.
  const madge = require('madge');
  const res = (await madge('./build')).circular();
  if (res.length) {
    sighLog(`⭯ Found ${res.length} circular dependencies:\n`);
    for (let i = 0; i < res.length; i++) {
      sighLog(`${i + 1}) ${res[i].join(' > ')}`);
    }
    sighLog('');
    return false;
  }
  return true;
}

function licenses(): boolean {
  const result = saneSpawnSyncWithOutput('npm', ['run', 'test:licenses']);
  if (result.stdout) {
    sighLog(result.stdout);
  }
  return result.success;
}

function buildPkg(pkg: string): boolean {
  const result = saneSpawnSyncWithOutput('npm', ['run', `build:${pkg}`]);
  if (result.stdout) {
    sighLog(result.stdout);
  }
  return result.success;
}


function webpackPkg(pkg: string): () => boolean {
  const fn = () => {
    const result = saneSpawnSyncWithOutput('npm', ['run', `build:${pkg}`]);
    if (result.stdout) {
      sighLog(result.stdout);
    }
    return result.success;
  };
  // Using a lambda breaks the display of func.name in the main execution loop.
  Object.defineProperty(fn, 'name', {value: pkg});
  return fn;
}

interface SpawnOptions {
  shell?: boolean;
  stdio?: string;
  dontWarnOnFailure?: boolean;
  logCmd?: boolean;
}

interface RawSpawnResult {
  status: number;
  stdout: Buffer;
  stderr: Buffer;
  error?: Error;
}

interface SpawnResult {
  success: boolean;
  stdout: string;
  stderr: string;
}

function spawnWasSuccessful(result: RawSpawnResult, opts: SpawnOptions = {}): boolean {
  if (result.status === 0 && !result.error) {
    return true;
  }
  if (!opts.dontWarnOnFailure) {
    for (const x of [result.stdout, result.stderr]) {
      if (x) {
        const str = x.toString().trim();
        if (str) {
          console.warn(str);
        }
      }
    }
    if (result.error) {
      console.warn(result.error);
    }
  }
  return false;
}

// make spawnSync work more or less the same way cross-platform
function saneSpawnSync(cmd: string, args: string[], opts?: SpawnOptions): boolean {
  cmd = path.normalize(cmd);
  opts = {stdio: 'inherit', ...opts, shell: true};
  if (opts.logCmd) {
    sighLog('+', cmd, args.join(' '));
  }
  // it's OK, I know what I'm doing
  const result: RawSpawnResult = _DO_NOT_USE_spawnSync(cmd, args, opts);
  return spawnWasSuccessful(result, opts);
}

// make spawn work more or less the same way cross-platform
function saneSpawn(cmd: string, args: string[], opts?: SpawnOptions): ChildProcess {
  cmd = path.normalize(cmd);
  opts = {stdio: 'inherit', ...opts, shell: true};
  if (opts.logCmd) {
    sighLog('+', cmd, args.join(' '));
  }
  // it's OK, I know what I'm doing
  return _DO_NOT_USE_spawn(cmd, args, opts);
}

// make spawn work more or less the same way cross-platform
function saneSpawnSyncWithOutput(cmd: string, args: string[], opts?: SpawnOptions): SpawnResult {
  cmd = path.normalize(cmd);
  opts = {...opts, shell: true};
  if (opts.logCmd) {
    sighLog('+', cmd, args.join(' '));
  }
  // it's OK, I know what I'm doing
  const result: RawSpawnResult = _DO_NOT_USE_spawnSync(cmd, args, opts);
  return {success: spawnWasSuccessful(result, opts), stdout: result.stdout.toString(), stderr: result.stderr.toString()};
}

async function runTestsOrHealthOnCron(args: string[]): Promise<boolean> {
  if (isTravisDaily) {
    // The travis cron job should add the following arguments when running the health command.
    args.push('--all', '--uploadCodeHealthStats');
    return health(args);
  }
  return runTests(args);
}

function runTests(args: string[]): boolean {
  const options = minimist(args, {
    string: ['grep', 'file'],
    inspect: ['inspect'],
    explore: ['explore'],
    coverage: ['coverage'],
    exceptions: ['exceptions'],
    boolean: ['manual', 'sequence', 'all', 'bazel'],
    repeat: ['repeat'],
    alias: {g: 'grep'},
  });

  if (options.bazel) {
    if (!options.file) {
      console.error('If the --bazel flag is set then the --file flag must be supplied too.');
      return false;
    }
    // Enables unit tests that are marked as requiring bazel. These tests are
    // usually skipped; they should generally only be supplied by bazel when it
    // invokes sigh directly.
    globalOptions.bazel = true;
  }

  const testsInDir = dir => findProjectFiles(dir, buildExclude, fullPath => {
    // some old-timey `artifacts` have their own test files that must be excluded
    if (fullPath.startsWith(path.normalize(`${dir}/artifacts/`))) {
      return false;
    }
    if (!/-tests?.js$/.test(fullPath)) {
      return false;
    }
    if (options.all) {
      return true;
    }
    const isManual = /manual[-_]test/.test(fullPath);
    const isSequence = /sequence[-_]test/.test(fullPath);
    if (options.manual) {
      return isManual;
    }
    if (options.sequence) {
      return isSequence;
    }
    return !isManual && !isSequence;
  });

  function buildTestRunner() {
    const tempDir = fs.mkdtempSync(path.join(os.tmpdir(), 'sigh-'));
    const chain = [];
    const mochaInstanceFile = fixPathForWindows(path.resolve(__dirname, '../build/platform/mocha-node.js'));

    // If a specific test file was provided, run it directly. Otherwise run all
    // the tests we can find. Expected file is the relative path to a .ts file
    // from the repo root.
    let tests: Iterable<string>;
    if (options.file) {
      // Switch from "src/abc/foo-test.ts" to "../build/abc/foo-test.js"
      const filename = options.file.replace(/^src\//, '../build/').replace(/\.ts$/, '.js');
      tests = [path.resolve(__dirname, filename)];
    } else {
      tests = testsInDir(process.cwd());
    }

    for (const test of tests) {
      const fixed = fixPathForWindows(test);
      chain.push(`
        import {mocha} from '${mochaInstanceFile}';
        mocha.suite.emit('pre-require', global, '${fixed}', mocha);
      `);
      chain.push(`
        import '${fixed}';
      `);
      chain.push(`
        import {mocha} from '${mochaInstanceFile}';
        mocha.suite.emit('require', null, '${fixed}', mocha);
        mocha.suite.emit('post-require', global, '${fixed}', mocha);
      `);
    }
    const chainImports = chain.map((entry, i) => {
      const file = path.join(tempDir, `chain${i}.js`);
      fs.writeFileSync(file, entry);
      return `import '${fixPathForWindows(file)}';`;
    });
    if (options.explore) {
      chainImports.push(`
      import {DevtoolsConnection} from '${fixPathForWindows(path.resolve(__dirname, '../build/devtools-connector/devtools-connection.js'))}';
      console.log('Waiting for Arcs Explorer');
      DevtoolsConnection.ensure();
    `);
    }
    const runner = `
      import {mocha} from '${mochaInstanceFile}';
      ${chainImports.join('\n      ')}
      (async () => {
        ${options.explore ? 'await DevtoolsConnection.onceConnected;' : ''}
        // Mocha doesn't have any way to pass custom flags into tests.
        global.testFlags = ${JSON.stringify(globalOptions)};
        let runner = mocha
            .grep(${JSON.stringify(options.grep || '')})
            .run(function(failures) {
              process.on('exit', function() {
                process.exit(failures > 0 ? 1 : 0);
              });
            });
        process.on('unhandledRejection', (reason, promise) => {
          console.error('Uncaught Exception');
          console.error(reason);
          runner.abort();
          throw reason;
        });
      })();
    `;
    const runnerFile = path.join(tempDir, 'runner.js');
    fs.writeFileSync(runnerFile, runner);
    return runnerFile;
  }

  const extraFlags = [];
  if (options.inspect) {
    extraFlags.push('--inspect-brk');
  }
  if (options.exceptions) {
    extraFlags.push('--print_all_exceptions');
  }

  const runner = buildTestRunner();
  // Spawn processes as needed to repeat tests specified by 'repeat' flag.
  const repeatCount = Number(options.repeat) || 1;
  const testResults = [];
  const failedRuns = [];
  for (let i = 1; i < repeatCount + 1; i++) {
    sighLog('RUN %s STARTING [%s]:', i, new Date().toLocaleTimeString());
    if (options.coverage) {
      process.env.NODE_V8_COVERAGE=coverageDir;
    }
    const coveragePrefix = options.coverage ? ` node_modules/.bin/c8 -r html` : '';
    const testResult = saneSpawnSync(`${coveragePrefix} node`, [
        ...nodeFlags,
        '--trace-warnings',
        '--no-deprecation',
        ...extraFlags,
        '-r', 'source-map-support/register.js',
        runner
      ]);
    if (!testResult) {
      failedRuns.push(i);
    }
    testResults.push(testResult);
  }
  const completionMessage = `${repeatCount} runs completed. ${failedRuns.length} runs failed`;
  if (failedRuns.length > 0) {
    console.error(completionMessage);
    console.error('Failed runs: ', failedRuns);
  } else {
    sighLog(completionMessage);
  }
  if (options.coverage) {
    sighLog(`Visit 'file:///${process.cwd()}/coverage/index.html' in the browser for a coverage report.`);
  }
  return testResults.filter(x => !x).length === 0;
}

// Watches for file changes, then runs the steps for the first item in args, passing the remaining items.
async function watch(args: string[]): Promise<boolean> {
  const [chokidar] = getOptionalDependencies(['chokidar'], 'The watch command');

  const options = minimist(args, {
    string: ['dir'],
    default: {dir: '.'},
    stopEarly: true,  // Allow options to be used in the command; 'sigh watch --dir src test -g foo'
  });

  const command = options._.shift() || 'webpack';
  const watcher = chokidar.watch(options.dir, {
    ignored: new RegExp(`(node_modules|build/|.git|user-test/|test-output/|${eslintCache}|bundle-cli.js|wasm/|dist/|bazel-.*/)`),
    persistent: true
  });
  let timeout = null;
  const changes = new Set();
  watcher.on('change', path => {
    if (timeout) {
      clearTimeout(timeout);
    }
    changes.add(path);
    timeout = setTimeout(async () => {
      sighLog(`\nRebuilding due to changes to:\n  ${[...changes].join('\n  ')}`);
      changes.clear();
      await runSteps(command, options._);
      timeout = null;
    }, 500);
  });
  return new Promise(() => {});  // never resolves, so the script will stay alive indefinitely
}

async function health(args: string[]): Promise<boolean> {
  const options = minimist(args, {
    boolean: ['migration', 'types', 'tests', 'nullChecks', 'uploadCodeHealthStats', 'all'],
  });

  let request;
  if (options.uploadCodeHealthStats) {
    [request] = getOptionalDependencies(['request'], 'Uploading health data');
  }

  if ((options.migration && 1 || 0) + (options.types && 1 || 0) + (options.tests && 1 || 0) > 1) {
    console.error('Please select only one detailed report at a time');
    return false;
  }

  // Utility function for counting / displaying errors caused by adding new TsLint rules.
  // tslint:disable-next-line: no-any
  function runTsLintWithModifiedConfig(modifier: (config: any) => void, lineMatch: string | RegExp): string[] {
    const pathToTsLintConfig = './config/tslint.base.json';

    // Read and parse existing TsLint config.
    const tsLintConfig = fs.readFileSync(pathToTsLintConfig, 'utf-8');
    const tsLintConfigNoComments = tsLintConfig.replace(/ *\/\/.*\r?\n/g, '');
    const parsedConfig = JSON.parse(tsLintConfigNoComments);

    modifier(parsedConfig);

    // Write the modified TsLint config.
    fs.writeFileSync(pathToTsLintConfig, JSON.stringify(parsedConfig, null, '  '), 'utf-8');

    const tslintOutput = saneSpawnSyncWithOutput('node_modules/.bin/tslint', ['--project', '.'], {dontWarnOnFailure: true}).stdout;

    // Recover original TsLint config.
    fs.writeFileSync(pathToTsLintConfig, tsLintConfig, 'utf-8');

    return tslintOutput.split('\n').filter(line => line.match(lineMatch));
  }

  const migrationFiles = () => [...findProjectFiles('src', /\b(artifacts|runtime[/\\]build)\b|webpack\.config\.js/, /\.js$/)];

  if (options.migration) {
    sighLog('JS files to migrate:\n');
    return saneSpawnSync('node_modules/.bin/sloc', ['-details', '--keys source', ...migrationFiles()]);
  }

  if (options.nullChecks) {
    return saneSpawnSync('node_modules/.bin/tsc', ['--strictNullChecks']);
  }

  if (options.types) {
    return saneSpawnSync('node_modules/.bin/type-coverage', ['--strict', '--detail']);
  }

  const testOptions = ['--coverage'];
  if (options.all) {
    testOptions.push('--all');
  }

  // Generating coverage report from tests.
  const testResult = await runSteps('test', testOptions);

  if (options.tests) {
    return saneSpawnSync('node_modules/.bin/c8', ['report']);
  }


  const healthInformation: string[] = [];

  const line = () => sighLog('+---------------------+--------+--------+---------------------------+');
  const show = (desc, score, points, info, ignore=false) => {
    if (!ignore) {
      healthInformation.push(...[desc, score, points, info].map(String));
    }
    sighLog(`| ${String(desc).padEnd(20, ' ')}| ${String(score).padEnd(7, ' ')}| ${String(points).padEnd(7, ' ')}| ${String(info).padEnd(26, ' ')}|`);
  };

  line();
  show('Category', 'Result', 'Points', 'Detailed report', true);
  line();

  const slocOutput = saneSpawnSyncWithOutput('node_modules/.bin/sloc', ['--detail', '--keys source', ...migrationFiles()]).stdout;
  const jsLocCount = String(slocOutput).match(/Source *: *(\d+)/)[1];
  const jsLocPoints = Number(jsLocCount) / 5;
  show('JS LOC to migrate', jsLocCount, jsLocPoints.toFixed(1), 'health --migration');

  const c8Output = saneSpawnSyncWithOutput('node_modules/.bin/c8', ['report']).stdout;
  const testCovPercent = String(c8Output).match(/All files *\| *([.\d]+)/)[1];
  const testCovPoints = (100 - Number(testCovPercent)) * 20;
  show('Test Coverage', testCovPercent + '%', testCovPoints.toFixed(1), 'health --tests');

  const typeCoverageOutput = saneSpawnSyncWithOutput('node_modules/.bin/type-coverage', ['--strict']).stdout;
  const typeCovPercent = String(typeCoverageOutput).match(/(\d+\.\d+)%/)[1];
  const typeCovPoints = (100 - Number(typeCovPercent)) * 30;
  show('Type Coverage', typeCovPercent + '%', typeCovPoints.toFixed(1), 'health --types');

  const nullChecksOutput = saneSpawnSyncWithOutput('node_modules/.bin/tsc', ['--strictNullChecks'], {dontWarnOnFailure: true}).stdout;
  const nullChecksErrors = (String(nullChecksOutput).match(/error TS/g) || []).length;
  const nullChecksPoints = (nullChecksErrors / 10);
  show('Null Errors', nullChecksErrors, nullChecksPoints.toFixed(1), 'health --nullChecks');

  line();

  // For go/arcs-paydown, team tech-debt paydown exercise.
  const points = jsLocPoints + testCovPoints + typeCovPoints + nullChecksPoints;
  show('Points available', '', points.toFixed(1), 'go/arcs-paydown');

  line();

  if (options.uploadCodeHealthStats) {
    return uploadCodeHealthStats(request, healthInformation, testResult);
  }
  return testResult;
}

async function uploadCodeHealthStats(request, data: string[], testResult: boolean): Promise<boolean> {
  sighLog('Uploading health data');
  const trigger = 'https://us-central1-arcs-screenshot-uploader.cloudfunctions.net/arcs-health-uploader';

  const branchTo = process.env.TRAVIS_BRANCH || 'unknown-branch';
  const branchFrom = process.env.TRAVIS_PULL_REQUEST_BRANCH || 'unknown-branch';
  const date = new Date().toString();

  return new Promise<boolean>((resolve, reject) => {
    request.post(trigger, {
      json: [[branchTo, branchFrom, date, ...data]]
    }, (error, response) => {
      if (error) {
        reject(error);
      } else if (response.statusCode !== 200) {
        reject(response.toJSON());
      } else {
        resolve(testResult);
      }
    });
  });
}

// Single place to put all common node flags for running node tools.
function prepNodeToolSpawn(toolPath: string, args: string[]) : string[] {
  return [...nodeFlags, '--no-warnings', toolPath, ...args];
}

function spawnNodeToolSync(toolPath: string, args: string[]) : boolean {
  return saneSpawnSync('node', prepNodeToolSpawn(toolPath, args));
}

function spawnNodeTool(toolPath: string, args: string[]) : ChildProcess {
  return saneSpawn('node', prepNodeToolSpawn(toolPath, args));
}

// Single place to put all optional dependencies for the devServer.
function prepDevServerOptionalDeps() {
  getOptionalDependencies(['chokidar'], 'The devServer command');
}

const devServerPath = 'build/tools/dev_server/dev-server.js';

function devServer(args: string[]) : boolean {
  prepDevServerOptionalDeps();
  return spawnNodeToolSync(devServerPath, args);
}

function devServerAsync(args: string[]) : boolean {
  prepDevServerOptionalDeps();
  const devServerProcess = spawnNodeTool(devServerPath, args.slice(1));
  process.on('exit', code => {
    devServerProcess.kill();
  });
  sighLog('ALDS child process running; continuing.');
  return true;
}

function testWdioShells(args: string[]) : boolean {
  const wdio = 'node_modules/.bin/wdio';
  // TODO(sjmiles): `fixPathForWindows` caused this to fail on my
  // windows machine (`e:/path/` becomes `e:/e:/path/`)
  // const conf = fixPathForWindows(path.resolve('shells/tests/wdio.conf.js')),
  // const conf = path.resolve('shells/tests/wdio.conf.js');
  const conf = './shells/tests/wdio.conf.js';
  const sargs = [
    conf,
    '--baseUrl',
    'http://localhost:8786/',
    ...args,
    // WebdriverIO reads the spec data from stdin which pipes in the changed
    // git object within a git hook. Redirects stdin to the null device to
    // avoid reading from stdin but from the wdio.conf.js directly.
    // Also see {@link https://github.com/webdriverio/webdriverio/issues/4957}
    '< /dev/null'
  ];
  return saneSpawnSync(wdio, sargs);
}

/**
 * Runs a node.js script with the given name and args. The first arg in the array is
 * the name of the script to run. The rest of the args are passed to that script
 * when it is invoked.
 */
function runNodeScript(args: string[]) {
  if (args.length === 0) {
    console.error('You must supply a script name.');
    return false;
  }
  const scriptName = args[0];
  const scriptPath = scripts[scriptName];
  if (!scriptPath) {
    console.error(`Unknown script name: ${scriptName}`);
    return false;
  }
  return spawnNodeToolSync(scriptPath, args.slice(1));
}

/** Returns the series of steps to run the given script. */
function runNodeScriptSteps(scriptName: string) {
  const runFn = (args: string[]) => runNodeScript([scriptName, ...args]);
  Object.defineProperty(runFn, 'name', {value: scriptName});
  return [peg, build, runFn];
}

// Looks up the steps for `command` and runs each with `args`.
async function runSteps(command: string, args: string[]): Promise<boolean> {
  const funcs = steps[command];
  if (funcs === undefined) {
    sighLog(`Unknown command: '${command}'`);
    sighLog('Available commands are:');
    const cmds = Object.keys(steps);
    let chunk;
    while ((chunk = cmds.splice(0, 8)).length) {
      sighLog(' ', chunk.join(', '));
    }
    process.exit(2);
  }

  // Keep globalOptions defaults, and override with any args from command line.
  globalOptions = {...globalOptions, ...minimist(args, {
    boolean: ['install'],
  })};
  for (const key in globalOptions) {
    // This converts command line arguments that should be interpreted as booleans.
    // This is to avoid accidentally interpreting 'false' as a truthy value.
    if (globalOptions.hasOwnProperty(key)) {
      let value = globalOptions[key];
      // if the flag hasn't been set (e.g. --flag)
      // or it if has been set to 'true' (e.g. --flag==true), set it to true.
      // if has been set to 'false' (e.g. --flag==false), set it to false.
      // Otherwise, keep the string type value.
      if (value === undefined || value === 'true') {
        value = true;
      } else if (value === 'false') {
        value = false;
      }
      globalOptions[key] = value;
    }
  }

  sighLog(`😌 ${command}`);
  let result = false;
  try {
    for (const func of funcs) {
      sighLog(`🙋 ${func.name}`);
      if (!await func(args)) {
        sighLog(`🙅 ${func.name}`);
        return false;
      }
      sighLog(`🙆 ${func.name}`);
    }
    result = true;
  } catch (e) {
    console.error(e);
  } finally {
    if (result) {
      sighLog('🎉 SUCCESS');
    } else {
      console.error('😱 FAILURE');
    }
  }
  return result;
}

let args = process.argv.slice(2);

// --quiet must be very first option to sigh.
if (args[0] === '--quiet') {
  globalOptions.quiet = true;
  args = args.slice(1);
}

void runSteps(args[0] || 'default', args.slice(1)).then(res => process.exit(res ? 0 : 1));
