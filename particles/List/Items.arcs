interface HostedItemInterface
  reads ~anyType
  // TODO(sjmiles): using slot-type for form-factor
  // all Interfaces are the same in List/* except for the slot
  item: consumes Slot

particle ItemMultiplexer in 'source/Multiplexer.js'
  // TODO(sjmiles): redundancies:
  // 1. slot is declared in HostedItemInterface and as `consume set of` here
  // 2. ~anyType is declared in HostedItemInterface and as `[~anyType]` here
  list: reads [~anyType]
  hostedParticle: hosts HostedItemInterface
  item: consumes [Slot]

particle Items in 'source/Items.js'
  list: reads [~anyType]
  root: consumes #items
    preamble: provides? Slot
    item: provides? [Slot]
    annotation: provides? [Slot]
    action: provides? Slot
    postamble: provides? Slot

particle SelectableItems in 'source/Items.js'
  list: reads [~anyType]
  selected: reads writes? ~anyType
  root: consumes Slot #items
    preamble: provides?
    item: provides [Slot{handle: list}]
    annotation: provides? [Slot {handle: list}]
    action: provides? Slot {handle: list}
    postamble: provides? Slot
  description `display ${list}`

// TODO(sjmiles): recipes below would be for use by Coalescer, but they create
// too much noise atm.

// TODO(sjmiles): recipe is the minimum coalescable artifact, which is good because we need to be able specify
// handle fates before colascing ... is there a way to combine the declarations when the recipe has only one Particle?
//recipe ItemMultiplexer
  // TODO(sjmiles): restricting fate
  // TODO(sjmiles): without `#items` this recipe doesn't coalese, why?
//  list: use #items
//  ItemMultiplexer
//    list: list

// TODO(sjmiles): nearly duplicate recipes here because we want to support `use` and `copy` but not `create`,
// maybe there should be a fate for this, or require `create` to be explicit

//recipe SelectableCopyItemsRecipe
//  items: copy #items
//  selected: create #selected
//  SelectableItems
//    items: items
//    selected: selected
//  ItemMultiplexer
//    list: items

//recipe SelectableUseItemsRecipe
//  items: use #items
//  selected: create #selected
//  SelectableItems
//    items: items
//    selected: selected
//  ItemMultiplexer
//    list: items
