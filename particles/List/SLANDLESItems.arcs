// @license
// Copyright (c) 2019 Google Inc. All rights reserved.
// This code may only be used under the BSD style license found at
// http://polymer.github.io/LICENSE.txt
// Code distributed by Google as part of this project is also
// subject to an additional IP rights grant found at
// http://polymer.github.io/PATENTS.txt

interface SlandleHostedItemInterface
  reads ~anyType
  // TODO(sjmiles): using slot-type for form-factor
  // all Interfaces are the same in List/* except for the slot
  item: `consumes Slot

particle SlandleItemMultiplexer in 'source/SlandleMultiplexer.js'
  // TODO(sjmiles): redundancies:
  // 1. slot is declared in HostedItemInterface and as `consume [Slot]  here
  // 2. ~anyType is declared in HostedItemInterface and as `[~anyType]` here
  list: reads [~anyType]
  hostedParticle: hosts SlandleHostedItemInterface
  item: `consumes [Slot]

// TODO(sjmiles): recipe is the minimum coalescable artifact, which is good because we need to be able specify
// handle fates before colascing ... is there a way to combine the declarations when the recipe has only one Particle?
//recipe SlandleItemMultiplexer
  // TODO(sjmiles): restricting fate
  // TODO(sjmiles): without `#items` this recipe doesn't coalese, why?
//  list: use #items
//  SlandleItemMultiplexer
//    list: list

//particle SlandleList in 'source/List.js'
//  list: reads [~anyType]
//  root: `consumes Slot #items
//    item: `provides? [Slot {handle: items}]
//  description `show ${list}`

//recipe SlandleList
//  items: use #items
//  SlandleList
//    items: items
//  SlandleItemMultiplexer
//    list: items

particle SlandleItems in 'source/Items.js'
  list: reads [~anyType]
  root: `consumes Slot #items
    preamble: `provides? Slot
    item: `provides? [Slot {handle: list}]
    annotation: `provides? [Slot {handle: list}]
    action: `provides? Slot
    postamble: `provides? Slot
  description `display ${list}`

particle SlandleSelectableItems in 'source/Items.js'
  list: reads [~anyType]
  selected: reads? writes? ~anyType
  root: `consumes Slot #items
    preamble: `provides? Slot
    item: `provides [Slot {handle: list}]
    annotation: `provides? [Slot {handle: list}]
    action: `provides? Slot
    postamble: `provides? Slot
  description `display ${list}`

// TODO(sjmiles): nearly duplicate recipes here because we want to support `use` and `copy` but not `create`,
// maybe there should be a fate for this, or require `create` to be explicit

//recipe SlandleSelectableCopyItemsRecipe
//  items: copy #items
//  selected: create #selected
//  SlandleSelectableItems
//    items: items
//    selected: selected
//  SlandleItemMultiplexer
//    list: items

//recipe SlandleSelectableUseItemsRecipe
//  items: use #items
//  selected: create #selected
//  SlandleSelectableItems
//    items: items
//    selected: selected
//  SlandleItemMultiplexer
//    list: items
