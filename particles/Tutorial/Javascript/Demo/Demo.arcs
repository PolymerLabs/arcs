// Tutorial 6: Handles
// Shows how to use a handle to pass information between particles.
import 'Board.arcs'
import 'DemoSchemas.arcs'

resource PlayerData
  start
  [
    {"name": "Jill", "avatar": "Y"},
    {"name": "Jack", "avatar": "P"}
  ]

// This data store contains a list of entities rather than a single entity, and is backed by the PeopleData resource defined above.
store Players of [Person] in PlayerData

particle Main in './source/Main.js'
  consume root
    provide playerSlot
    provide greetingSlot
    provide cellSlot
    provide congratulationsSlot

particle Game in './source/Game.js'
  in Person playerOne
  in Person playerTwo
  in [Person] players
  in GameState gameState
  in Move humanMove
  in Move computerMove
  out Move move
  check playerOne is private
  check playerTwo is private

particle GetPlayer in './source/GetPerson.js'
  out Person playerOne
  out Person playerTwo
  inout [Person] players
  consume playerSlot
  claim playerOne is private
  claim playerTwo is private

particle DisplayGreeting in './source/DisplayGreeting.js'
  in Person person
  in [Person] players
  consume greetingSlot

particle Congratulations in './source/Congratulations.js'
  in GameState gameState
  consume congratulationsSlot

recipe GameDemoRecipe
  copy Players as data
  Main
    consume root 
      provide playerSlot as getPlayer
      provide greetingSlot as greeting
      provide cellSlot as board
      provide congratulationsSlot as congratulations
  GetPlayer
    playerOne -> playerOne
    playerTwo -> playerTwo
    players <-> data
    consume playerSlot as getPlayer
  MoveApplier
    move <- move
    gameState <-> gameState
  Game
    gameState <- gameState
    players <- data
    playerOne <- playerOne
    playerTwo <- playerTwo
    humanMove <- humanMove
    computerMove <- computerMove
    move -> move
  DisplayGreeting
    person <- playerOne
    players <- data
    consume greetingSlot as greeting
  Board
    gameState <- gameState
    humanMove -> humanMove
    consume cellSlot as board
  Congratulations
    gameState <- gameState
    consume congratulationsSlot as congratulations
  RandomComputer
    computerMove -> computerMove
    gameState <- gameState
  description `Javascript Tutorial Demo`
