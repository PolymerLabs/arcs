// Tutorial Demo
// Shows how to use Arcs features to create a tic-tac-toe game.
import 'TicTacToe.arcs'
import 'GameSchemas.arcs'

resource PlayerData
  start
  [
    {"name": "Computer", "avatar": "ðŸ¤–"}
  ]

// This data store contains a list of entities rather than a single entity, 
// and is backed by the Person resource defined in DemoSchemas.arcs.
store Players of [Person] in PlayerData

particle Main in './source/Main.js'
  consume root
    provide playerSlot
    provide greetingSlot
    provide cellSlot
    provide congratulationsSlot

particle Game in './source/Game.js'
  inout Person playerOne
  inout Person playerTwo
  in GameState {gameOver} gameState
  in Move {Text move} humanMove
  in Move {Text move} computerMove
  inout Move move
  check playerOne is private
  check playerTwo is private

particle GetPlayers in './source/GetPlayers.js'
  out Person playerOne
  out Person playerTwo
  consume playerSlot
  claim playerOne is private
  claim playerTwo is private

particle DisplayGreeting in './source/DisplayGreeting.js'
  in Person player
  consume greetingSlot

particle Congratulations in './source/Congratulations.js'
  in Person playerOne
  in Person playerTwo
  out Move {move} humanMove
  in GameState {gameOver, winnerAvatar} gameState
  consume congratulationsSlot

recipe GameDemoRecipe
  Main
    consume root 
      provide playerSlot as getPlayers
      provide greetingSlot as greeting
      provide cellSlot as board
      provide congratulationsSlot as congratulations

  GetPlayers
    playerOne -> playerOne
    playerTwo -> playerTwo
    consume playerSlot as getPlayers

  MoveApplier
    move <- move
    gameState <-> gameState

  Game
    gameState <- gameState
    playerOne <-> playerOne
    playerTwo <-> playerTwo
    humanMove <- humanMove
    computerMove <- computerMove
    move <-> move

  DisplayGreeting
    player = playerOne
    consume greetingSlot as greeting

  TicTacToeBoard
    gameState <- gameState
    humanMove -> humanMove
    consume boardSlot as board

  Congratulations
    gameState <- gameState
    playerOne <- playerOne
    playerTwo <- playerTwo
    humanMove -> humanMove
    consume congratulationsSlot as congratulations

  RandomComputer
    computerMove -> computerMove
    gameState <- gameState

  description `Javascript Tutorial TicTacToe Demo`
