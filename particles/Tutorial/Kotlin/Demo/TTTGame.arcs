// Tutorial Demo
// Shows how to use Arcs features to create a tic-tac-toe game.
import 'TTTGameSchemas.arcs'
import 'TTTGamedata.arcs'

particle TTTBoard in 'TTTBoard.wasm'
  events: writes [Event]
  gameState: reads GameState
  boardSlot: consumes

particle TTTGame in 'TTTGame.wasm'
  gameState: reads writes GameState
  playerOne: reads writes Person
  playerOneMove: reads writes Move
  playerTwo: reads writes Person
  playerTwoMove: reads writes Move
  events: reads writes [Event]
  root: consumes
    boardSlot: provides

particle TTTHumanPlayer in 'TTTHumanPlayer.wasm'
  gameState: reads GameState
  events: reads [Event]
  player: reads Person
  myMove: writes Move

particle TTTRandomComputer in 'TTTRandomComputer.wasm'
  gameState: reads GameState
  player: reads Person
  myMove: writes Move


recipe GamePlayersDemoRecipe
  playerOne: use HumanStore
  playerTwo: use ComputerStore
  playerOneMove: create #humanMove
  playerTwoMove: create #computerMove
  TTTGame
    gameState: reads writes gameState
    playerOne: reads writes playerOne
    playerOneMove: reads writes playerOneMove
    playerTwo: reads writes playerTwo
    playerTwoMove: reads writes playerTwoMove
    events: reads writes events
    root: consumes
      boardSlot: provides board
  TTTBoard
      gameState: reads gameState
      events: writes events
      boardSlot: consumes board
  TTTHumanPlayer
    gameState: reads gameState
    events: reads events
    myMove: writes playerOneMove
    player: reads playerOne
  TTTRandomComputer
      gameState: reads gameState
      myMove: writes playerTwoMove
      player: reads playerTwo
  description `Kotlin Tutorial TicTacToe One Player Demo`

recipe GamePlayersDemoRecipe
  playerOne: use HumanOneStore
  playerTwo: use HumanTwoStore
  playerOneMove: create #firstHuman
  playerTwoMove: create #secondHuman
  TTTGame
    gameState: reads writes gameState
    playerOne: reads writes playerOne
    playerOneMove: reads writes playerOneMove
    playerTwo: reads writes playerTwo
    playerTwoMove: reads writes playerTwoMove
    events: reads writes events
    root: consumes
      boardSlot: provides board
  TTTBoard
      gameState: reads gameState
      events: writes events
      boardSlot: consumes board
  TTTHumanPlayer
    gameState: reads gameState
    events: reads events
    myMove: writes playerOneMove
    player: reads playerOne
  TTTHumanPlayer
      gameState: reads gameState
      events: reads events
      myMove: writes playerTwoMove
      player: reads playerTwo
  description `Kotlin Tutorial TicTacToe Two Players Demo`

recipe GamePlayersDemoRecipe
  playerOne: use ComputerOneStore
  playerTwo: use ComputerTwoStore
  playerOneMove: create #firstComputer
  playerTwoMove: create #secondComputer
  TTTGame
    gameState: reads writes gameState
    playerOne: reads writes playerOne
    playerOneMove: reads writes playerOneMove
    playerTwo: reads writes playerTwo
    playerTwoMove: reads writes playerTwoMove
    events: reads writes events
    root: consumes
      boardSlot: provides board
  TTTBoard
      gameState: reads gameState
      events: writes events
      boardSlot: consumes board
  TTTRandomComputer
        gameState: reads gameState
        myMove: writes playerOneMove
        player: reads playerOne
  TTTRandomComputer
      gameState: reads gameState
      myMove: writes playerTwoMove
      player: reads playerTwo
  description `Kotlin Tutorial TicTacToe Zero Players Demo`



