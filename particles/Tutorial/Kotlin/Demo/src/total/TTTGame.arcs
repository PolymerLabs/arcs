// Tutorial Demo
// Shows how to use Arcs features to create a tic-tac-toe game.


schema Person
  name: Text
  avatar: Text
  id: Number

schema GameState
  gameOver: Boolean
  board: Text
  currentPlayer: Number
  winnerAvatar: Text

schema Event
  type: Text
  move: Number
  time: Number

schema Move
  move: Number


resource ComputerDefault
  start
  [
    {"name": "Computer", "avatar": "O"}
  ]

resource FirstComputer
  start
  [
    {"name": "Computer One", "avatar": "X"}
  ]

resource SecondComputer
  start
  [
    {"name": "Computer Two", "avatar": "O"}
  ]

resource HumanDefault
  start
  [
    {"name": "Human", "avatar": "X"}
  ]

resource FirstHuman
  start
  [
    {"name": "Player One", "avatar": "X"}
  ]

resource SecondHuman
  start
  [
    {"name": "Player Two", "avatar": "O"}
  ]

store ComputerStore of Person in ComputerDefault
store ComputerOneStore of Person in FirstComputer
store ComputerTwoStore of Person in SecondComputer
store HumanStore of Person in HumanDefault
store HumanOneStore of Person in FirstHuman
store HumanTwoStore of Person in SecondHuman

particle TTTBoard in 'particles.wasm'
  events: writes [Event]
  gameState: reads GameState
  boardSlot: consumes

particle TTTGame in 'particles.wasm'
  gameState: reads writes GameState
  playerOne: reads writes Person
  playerOneMove: reads writes Move
  playerTwo: reads writes Person
  playerTwoMove: reads writes Move
  events: reads writes [Event]
  root: consumes
    boardSlot: provides

particle TTTHumanPlayer in 'particles.wasm'
  gameState: reads GameState
  events: reads [Event]
  player: reads Person
  myMove: writes Move

particle TTTRandomComputer in 'particles.wasm'
  gameState: reads GameState
  player: reads Person
  myMove: writes Move


recipe GamePlayersDemoRecipe
  playerOne: use HumanStore
  playerTwo: use ComputerStore
  playerOneMove: create #humanMove
  playerTwoMove: create #computerMove
  TTTGame
    gameState: reads writes gameState
    playerOne: reads writes playerOne
    playerOneMove: reads writes playerOneMove
    playerTwo: reads writes playerTwo
    playerTwoMove: reads writes playerTwoMove
    events: reads writes events
    root: consumes
      boardSlot: provides board
  TTTBoard
    gameState: reads gameState
    events: writes events
    boardSlot: consumes board
  TTTHumanPlayer
    gameState: reads gameState
    events: reads events
    myMove: writes playerOneMove
    player: reads playerOne
  TTTRandomComputer
    gameState: reads gameState
    myMove: writes playerTwoMove
    player: reads playerTwo
  description `Kotlin Tutorial TicTacToe One Player Demo`

recipe GamePlayersDemoRecipe
  playerOne: use HumanOneStore
  playerTwo: use HumanTwoStore
  playerOneMove: create #firstHuman
  playerTwoMove: create #secondHuman
  TTTGame
    gameState: reads writes gameState
    playerOne: reads writes playerOne
    playerOneMove: reads writes playerOneMove
    playerTwo: reads writes playerTwo
    playerTwoMove: reads writes playerTwoMove
    events: reads writes events
    root: consumes
      boardSlot: provides board
  TTTBoard
    gameState: reads gameState
    events: writes events
    boardSlot: consumes board
  TTTHumanPlayer
    gameState: reads gameState
    events: reads events
    myMove: writes playerOneMove
    player: reads playerOne
  TTTHumanPlayer
    gameState: reads gameState
    events: reads events
    myMove: writes playerTwoMove
    player: reads playerTwo
  description `Kotlin Tutorial TicTacToe Two Players Demo`

recipe GamePlayersDemoRecipe
  playerOne: use ComputerOneStore
  playerTwo: use ComputerTwoStore
  playerOneMove: create #firstComputer
  playerTwoMove: create #secondComputer
  TTTGame
    gameState: reads writes gameState
    playerOne: reads writes playerOne
    playerOneMove: reads writes playerOneMove
    playerTwo: reads writes playerTwo
    playerTwoMove: reads writes playerTwoMove
    events: reads writes events
    root: consumes
      boardSlot: provides board
  TTTBoard
    gameState: reads gameState
    events: writes events
    boardSlot: consumes board
  TTTRandomComputer
    gameState: reads gameState
    myMove: writes playerOneMove
    player: reads playerOne
  TTTRandomComputer
    gameState: reads gameState
    myMove: writes playerTwoMove
    player: reads playerTwo
  description `Kotlin Tutorial TicTacToe Zero Players Demo`



