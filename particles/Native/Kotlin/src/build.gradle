import org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile
import org.jetbrains.kotlin.gradle.utils.NativeCompilerDownloader
import org.jetbrains.kotlin.konan.KonanVersion

import java.nio.file.Paths


buildscript {
    ext.serialization_version = "0.12.0"

    repositories {
        mavenCentral()
        jcenter()

        maven { url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies" }
        maven { url "https://kotlin.bintray.com/kotlin-eap" }
        maven { url "https://kotlin.bintray.com/kotlin-dev" }
        maven { url "https://polymerlabs.bintray.com/arcs" }
        afterEvaluate {
            maven {
                url "https://kotlin.bintray.com/kotlinx"
                credentials {
                    username = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER') ?: ""
                    password = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY') ?: ""
                }
            }
        }
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.45"
        classpath "org.jetbrains.kotlin:kotlin-serialization:0.12.0-SNAPSHOT"
    }
}

// see ../settings.gradle so this plugins could be resolved
plugins {
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
}

repositories {
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://polymerlabs.bintray.com/arcs" }
}

group 'arcs'
version '0.0.1'

apply plugin: 'maven-publish'
apply plugin: 'kotlin-dce-js'
apply plugin: 'org.jetbrains.kotlin.frontend'

kotlinFrontend {
    downloadNodeJsVersion = "latest"

    npm {
        dependency("kotlin", "1.1.0")
    }

    sourceMaps = true
    webpackBundle {
        bundleName = "main"
        contentPath = file('src/main/web')
        mode = 'production'
        sourceMapEnabled = true
    }

    define "PRODUCTION", true
    define "X", false
}

// FIXME: disabled jsinterop generation for now until JetBrains allows extension by 3P
//String packageName = 'kotlinx.interop.wasm.dom'
//String jsinteropKlibFileName = Paths.get(buildDir.toString(), 'klib', "$packageName-jsinterop.klib").toString()

kotlin {
    sourceSets {
        commonMain {
            kotlin.srcDir('common')
            dependencies {
                implementation kotlin('stdlib-common')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.2.2-SNAPSHOT'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }
        commonTest {
            kotlin.srcDir('tests/common')
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            kotlin.srcDir('android')
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.2.2-SNAPSHOT'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            }
        }
        jvmTest {
            kotlin.srcDir('tests/android')
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            kotlin.srcDir('js')
            dependencies {
                implementation kotlin('stdlib-js')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.2.2-SNAPSHOT'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }
        jsTest {
            kotlin.srcDir('tests/js')
            dependencies {
                implementation kotlin('test-js')
            }
        }
        wasm32Main {
            kotlin.srcDir('wasm')
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.2.2-SNAPSHOT'
                implementation "org.jetbrains" +
                        ".kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            }
        }
        wasm32Test {
            kotlin.srcDir('tests/wasm')
        }
    }

//    jvm() // Android Disabled for now

    wasm32()
    js()

    // Switching module kind for JS is required to run tests
    targets {
        fromPreset(presets.js, 'js') {
            configure([compilations.main, compilations.test]) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    sourceMap = true
                    moduleKind = "umd"
                    metaInfo = true
//                  sourceMapEmbedSources = "always"
                }
            }
        }
        fromPreset(presets.wasm32, 'wasm32') {
            compilations.main.outputKinds 'EXECUTABLE'
            compilations.main.entryPoint 'arcs.sdk.wasm.main'
        }
    }
}

// Download compiler and jsinterop tool for WASM, not currently used.
task jsinterop(type: Exec) {

    def downloader = new NativeCompilerDownloader(project,
            KonanVersion.Companion.$$INSTANCE.fromString("1.3-dev-9780"))
    downloader.downloadIfNeeded()
    def packageName = "arcs"
    def distributionPath = downloader.compilerDirectory.toString()
    def jsinteropKlibFileName = Paths.get(buildDir.toString(), 'klib',
            "$packageName-jsinterop.klib").toString()

    workingDir projectDir
    def ext = ''
//  def distributionPath = project.properties['org.jetbrains.kotlin.native.home'] as String
    if (distributionPath != null) {
        def jsinteropCommand = Paths.get(file(distributionPath).path, 'bin',
                "jsinterop$ext").toString()

        inputs.property('jsinteropCommand', jsinteropCommand)
        inputs.property('jsinteropPackageName', packageName)
        outputs.file(jsinteropKlibFileName)

        commandLine jsinteropCommand,
                '-pkg', packageName,
                '-o', jsinteropKlibFileName,
                '-target', 'wasm32'
    } else {
        doFirst {
            // Abort build execution if the distribution path isn't specified.
            throw new GradleException("""\
                |Kotlin/Native distribution path must be specified to build the JavaScript interop.
                |Use 'org.jetbrains.kotlin.native.home' project property to specify it.
            """.stripMargin())
        }
    }
}

// Disabled because JS tests are broken at the moment
//apply from: rootProject.file('gradle/node-js.gradle')
//apply from: rootProject.file('gradle/test-mocha-js.gradle')
apply from: rootProject.file('gradle/unpack-kotlin-native-tools.gradle')
//apply plugin: 'org.jetbrains.kotlin.platform.native'

tasks["run"].dependsOn "check"
tasks.withType(KotlinNativeCompile).all {
//  dependsOn jsinterop
}
