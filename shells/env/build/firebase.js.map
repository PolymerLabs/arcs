{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../runtime/firebase.js","webpack:///../node_modules/firebase/app/dist/index.cjs.js","webpack:///../node_modules/@firebase/polyfill/dist/index.esm.js","webpack:///../node_modules/timers-browserify/main.js","webpack:///../node_modules/webpack/buildin/global.js","webpack:///../node_modules/setimmediate/setImmediate.js","webpack:///../node_modules/process/browser.js","webpack:///../node_modules/@firebase/polyfill/node_modules/whatwg-fetch/fetch.js","webpack:///../node_modules/@firebase/app/dist/index.cjs.js","webpack:///../node_modules/@firebase/util/dist/index.cjs.js","webpack:///../node_modules/tslib/tslib.es6.js","webpack:///../node_modules/firebase/database/dist/index.esm.js","webpack:///../node_modules/@firebase/database/dist/index.cjs.js","webpack:///../node_modules/@firebase/logger/dist/index.esm.js","webpack:///../node_modules/firebase/storage/dist/index.esm.js","webpack:///../node_modules/@firebase/storage/dist/index.esm.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","firebase_app__WEBPACK_IMPORTED_MODULE_0__","firebase_app__WEBPACK_IMPORTED_MODULE_0___default","a","firebase","ex","_interopDefault","setImmediate","global","setTimeoutFunc","setTimeout","noop","Promise","fn","this","TypeError","_state","_handled","_value","undefined","_deferreds","doResolve","handle","self","deferred","_immediateFn","cb","onFulfilled","onRejected","ret","e","reject","promise","resolve","push","newValue","then","finale","thisArg","apply","arguments","length","_unhandledRejectionFn","len","done","reason","prom","constructor","callback","all","arr","args","Array","slice","remaining","res","val","race","values","err","console","warn","globalNS","window","Error","createCommonjsModule","_global","Math","Function","__g","_core","core","version","__e","_isObject","it","_anObject","_fails","exec","_descriptors","document","is","createElement","_domCreate","_ie8DomDefine","_toPrimitive","S","toString","valueOf","dP","_objectDp","f","O","P","Attributes","_propertyDesc","bitmap","configurable","writable","_hide","_has","id","px","random","_uid","concat","_redefine","SRC","$toString","TPL","split","inspectSource","safe","isFunction","join","String","_ctx","that","_aFunction","b","$export","type","source","own","out","exp","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","IS_PROTO","IS_BIND","B","target","expProto","U","W","R","_export","_cof","_iobject","propertyIsEnumerable","_defined","_toObject","ceil","floor","_toInteger","isNaN","min","_toLength","_isArray","isArray","arg","store","_shared","_wks","USE_SYMBOL","SPECIES","_arraySpeciesCreate","original","C","_arrayMethods","TYPE","$create","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","NO_HOLES","$this","callbackfn","index","result","UNSCOPABLES","ArrayProto","_addToUnscopables","$find","forced","find","$find$1","forced$1","findIndex","_toIobject","max","min$1","shared","_sharedKey","arrayIndexOf","IS_INCLUDES","el","fromIndex","_toAbsoluteIndex","_arrayIncludes","IE_PROTO","_objectKeysInternal","names","_enumBugKeys","_objectKeys","keys","_objectGops","getOwnPropertySymbols","_objectPie","$assign","assign","_objectAssign","A","K","forEach","k","T","aLen","getSymbols","isEnum","j","MATCH","_stringContext","searchString","NAME","isRegExp","_isRegexp","MATCH$1","$startsWith","KEY","re","_failsIsRegexp","startsWith","search","repeat","count","str","Infinity","RangeError","_meta","META","setDesc","isExtensible","FREEZE","preventExtensions","setMeta","w","meta","NEED","fastKey","getWeak","onFreeze","def","TAG","_setToStringTag","tag","stat","_wksExt","_wksDefine","$Symbol","charAt","_objectDps","defineProperties","Properties","document$1","_html","documentElement","IE_PROTO$1","Empty","createDict","iframeDocument","iframe","style","display","appendChild","src","contentWindow","open","write","lt","close","_objectCreate","hiddenKeys","_objectGopn","getOwnPropertyNames","gOPN","toString$1","windowNames","_objectGopnExt","getWindowNames","gOPD","getOwnPropertyDescriptor","_objectGopd","gOPD$1","dP$1","gOPN$1","$JSON","JSON","_stringify","stringify","HIDDEN","TO_PRIMITIVE","SymbolRegistry","AllSymbols","OPSymbols","ObjectProto","USE_NATIVE","QObject","setter","findChild","setSymbolDesc","D","protoDesc","wrap","sym","_k","isSymbol","iterator","$defineProperty","$defineProperties","symbols","_enumKeys","$propertyIsEnumerable","E","$getOwnPropertyDescriptor","$getOwnPropertyNames","$getOwnPropertySymbols","IS_OP","$set","set","es6Symbols","wellKnownSymbols","for","keyFor","useSetter","useSimple","replacer","$replacer","TAG$1","ARG","test","tryGet","callee","_classof","_iterators","IteratorPrototype","_iterCreate","Constructor","next","IE_PROTO$2","ObjectProto$1","_objectGpo","getPrototypeOf","ITERATOR","BUGGY","returnThis","_iterDefine","Base","DEFAULT","IS_SET","FORCED","methods","getMethod","kind","proto","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","entries","$at","TO_STRING","pos","charCodeAt","_stringAt","iterated","_t","_i","point","_iterStep","es6_array_iterator","Arguments","ITERATOR$1","TO_STRING_TAG","ArrayValues","DOMIterables","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","HTMLSelectElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList","collections","explicit","Collection","scope","Timeout","clearFn","_id","_clearFn","clearTimeout","setInterval","clearInterval","timeout","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","g","eval","process","registerImmediate","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","messagePrefix","onGlobalMessage","event","data","indexOf","addEventListener","attachEvent","installPostMessageImplementation","MessageChannel","channel","port1","port2","installMessageChannelImplementation","html","script","onreadystatechange","removeChild","installReadyStateChangeImplementation","task","run","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","array","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","fetch","support","searchParams","iterable","blob","Blob","formData","arrayBuffer","viewClasses","isDataView","obj","DataView","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","Headers","append","normalizeName","normalizeValue","oldValue","map","has","items","iteratorFor","Request","clone","body","_bodyInit","Body","Response","status","statusText","headers","url","error","response","redirectStatuses","redirect","location","input","init","request","xhr","XMLHttpRequest","onload","options","rawHeaders","replace","line","parts","shift","trim","parseHeaders","getAllResponseHeaders","responseURL","responseText","onerror","ontimeout","method","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","toLowerCase","header","consumed","bodyUsed","fileReaderReady","reader","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","bufferClone","buf","view","Uint8Array","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","text","readAsText","readBlobAsText","chars","fromCharCode","readArrayBufferAsText","decode","json","parse","upcased","toUpperCase","normalizeMethod","referrer","form","bytes","decodeURIComponent","bodyInit","ok","util","contains","DEFAULT_ENTRY_NAME","tokenListeners","FirebaseAppImpl","config","firebase_","isDeleted_","services_","name_","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","options_","deepCopy","INTERNAL","getUid","getToken","addAuthTokenListener","removeAuthTokenListener","filter","listener","checkDestroyed_","delete","_this","removeApp","services","serviceKey","instanceKey","service","_getService","instanceIdentifier","instanceSpecifier","factories","extendApp","props","deepExtend","code","appErrors","log","ErrorFactory","no-app","bad-app-name","duplicate-app","app-deleted","duplicate-service","sa-not-supported","invalid-app-argument","createFirebaseNamespace","apps_","appHooks","namespace","initializeApp","rawConfig","name_1","app","callAppHooks","apps","SDK_VERSION","registerService","createService","serviceProperties","appHook","allowMultipleInstances","getApps","serviceNamespace","appArg","extendNamespace","createSubscribe","useAsService","eventName","serviceName","factoryName","useService","patchProperty","default","tslib_1","CONSTANTS","NODE_CLIENT","NODE_ADMIN","assert","assertion","message","assertionError","stringToByteArray","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","opt_webSafe","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","c1","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","byte4","base64Decode","Date","getTime","prop","Deferred","wrapCallback","catch","getUA","navigator","ERROR_NAME","captureStackTrace","FirebaseError","stack","errors","pattern","template","fullCode","match","jsonEval","token","claims","signature","extend","objTo","objFrom","findKey","opt_this","Sha1","_super","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","__extends","compress_","opt_offset","update","opt_length","lengthMinusBlock","inbuf","digest","totalBits","ObserverProxy","executor","onNoObservers","observers","unsubscribes","observerCount","finalized","forEachObserver","observer","complete","subscribe","nextOrObserver","methods_1","implementsAnyMethods","unsub","unsubscribeOne","finalError","sendOne","errorPrefix","fnName","argumentNumber","optional","argName","base64Encode","utf8Bytes","isMobileCordova","isNodeSdk","isReactNative","patchCapture","captureFake","isAdmin","issuedAtTime","isValidFormat","isValidTimestamp","validSince","validUntil","now","every","findValue","getAnyKey","getCount","rv","getValues","isEmpty","isNonNullObject","opt_obj","safeGet","querystring","querystringParams","params","arrayVal","encodeURIComponent","querystringDecode","async","onError","proxy","validateArgCount","minCount","maxCount","argCount","argError","validateCallback","validateContextObject","context","validateNamespace","stringLength","high","__assign","__rest","__decorate","__param","__metadata","__awaiter","__generator","__exportStar","__values","__read","__spread","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","extendStatics","setPrototypeOf","__proto__","__","decorators","desc","Reflect","decorate","paramIndex","decorator","metadataKey","metadataValue","metadata","_arguments","generator","fulfilled","step","y","_","label","sent","trys","ops","verb","throw","return","v","op","pop","ar","asyncIterator","q","resume","fulfill","settle","cooked","raw","mod","logger","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","sha1","sha1Bytes","buildLogMessage_","var_args","logger$1","firstLog_","enableLogging","logger_","persistent","logLevel","LogLevel","VERBOSE","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","dataSegs","substring","each","doubleToIEEE754String","ln","bits","abs","pow","LN2","round","reverse","hexByteString","hexByte","parseInt","substr","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","beingCrawled","setTimeoutNonBlocking","time","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","begin","parent","pieces","child","childPathObj","childPieces","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","ValidationPath","path","errorPrefix_","parts_","byteLength_","checkValid_","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","LONG_POLLING","RepoInfo","host","secure","webSocketOnly","persistenceKey","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","connURL","pairs","toURLString","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","protocol","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodePath","queryParams","queryString","results","_a","segment","kv","decodeQuery","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","validateFirebaseData","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","OnDisconnect","repo_","cancel","onComplete","onDisconnectCancel","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","duplicateTime","timeStampChars","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","action","exportFormat",".value","getValue",".priority","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","num","logBase2","current_","mask","bitMask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newIndexMap","newImmediateChild","numKeys","allIntegerKeys","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","MAX","setMaxNode","setMaxNode$1","USE_HINZE","nodeFromJSON$1","node_1","jsonObj_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","OperationType","VALUE_INDEX","ValueIndex","valueNode","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","otherKey","thisKey","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","cancelCallbackOrContext","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","removeEventCallbackForQuery","userCallback","cancelOrContext","firstCall","onceCallback","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","CountedSet","add","clear","SparseSnapshotTree","childKey","remember","forget","self_1","tree","forEachTree","prefixPath","func","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","children","subtree","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","newPriority","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","existing","generateEventsForChanges_","getInitialEvents","initialChanges","SyncPoint","views_","optCompleteServerCache","events_1","serverCacheComplete","eventCacheComplete","removed","hadCompleteView","hasCompleteView","viewQueryId","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layerTree_","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","queryKey","queryKeyForTag_","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","error$$1","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","forceRefresh","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","StatsCollection","counters_","incrementCounter","amount","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor","online_","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called_1","wrappedFn_1","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","start","uniqueCallbackIdentifier","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","iframeContents","contentDocument","alive","innerHTML","myID","disconn","myPW","theURL","nodeRestRequest","newRequest_","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","User-Agent","platform","origin","mySock","onopen","onclose","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","mess","resetKeepAlive","remainingData","sendString_","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","token_1","authMethod","requestData","cred","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","accessToken","interrupt","serverTimeOffset","normalizedPathString","statusCode","explanation","clientName","ReadonlyRestClient","getListenId_","listenId","thisListen","queryStringParamaters","toRestQueryStringParameters","restRequest_","queryStringParameters","authTokenData","authToken","Repo","forceRestClient","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","generateWithValues","isMerge","taggedChildren","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedTree","resolveDeferredValueTree","showDelta","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","startName","endName","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","Reference","validateRootPathString","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","createRepo","deleteRepo","appRepos","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","freeze","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","TEST_ACCESS","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","listens","firebaseRef","registerDatabase","instance","unused","setLogLevel","instances","defaultLogLevel","INFO","defaultLogHandler","logType","toISOString","DEBUG","info","WARN","ERROR","_logLevel","_logHandler","debug","level","inst","registerStorage","_firebase_app__WEBPACK_IMPORTED_MODULE_0__","_firebase_app__WEBPACK_IMPORTED_MODULE_0___default","domainBase","downloadBase","apiBaseUrl","apiUploadBaseUrl","defaultMaxOperationRetryTime","defaultMaxUploadRetryTime","minSafeInteger","FirebaseStorageError","code_","prependCode","message_","serverResponse_","codeProp","codeEquals","serverResponseProp","setServerResponseProp","serverResponse","Code","UNKNOWN","OBJECT_NOT_FOUND","BUCKET_NOT_FOUND","PROJECT_NOT_FOUND","QUOTA_EXCEEDED","UNAUTHENTICATED","UNAUTHORIZED","RETRY_LIMIT_EXCEEDED","INVALID_CHECKSUM","CANCELED","INVALID_EVENT_NAME","INVALID_URL","INVALID_DEFAULT_BUCKET","NO_DEFAULT_BUCKET","CANNOT_SLICE_BLOB","SERVER_FILE_WRONG_SIZE","NO_DOWNLOAD_URL","INVALID_ARGUMENT","INVALID_ARGUMENT_COUNT","APP_DELETED","INVALID_ROOT_OPERATION","INVALID_FORMAT","INTERNAL_ERROR","unknown","canceled","cannotSliceBlob","invalidArgument","appDeleted","invalidFormat","format","internalError","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","formatValidator","stringFormat","StringData","opt_contentType","contentType","dataFromString","string","utf8Bytes_","base64Bytes_","DataURLParts","rest","decoded","percentEncodedBytes_","dataURLBytes_","dataURLContentType_","hasMinus","hasUnder","hasPlus","hasSlash","end","endsWith","ErrorCode","TaskEvent","STATE_CHANGED","InternalTaskState","RUNNING","PAUSING","PAUSED","SUCCESS","CANCELING","TaskState","taskStateFromInternalTaskState","state","make","resolver","isDef","isJustDef","isObject","isString","isNativeBlob","isNativeBlobDefined","NetworkXhrIo","sent_","xhr_","errorCode_","NO_ERROR","sendPromise_","resolve$$1","reject$$1","ABORT","NETWORK_ERROR","opt_body","opt_headers","getErrorCode","getStatus","getResponseText","abort","getResponseHeader","addUploadProgressListener","upload","removeUploadProgressListener","removeEventListener","XhrIoPool","createXhrIo","jsonObjectOrNull","isNonArrayObject","Location","bucket","fullServerUrl","encode","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","bucketLocation","makeFromUrl","invalidDefaultBucket","groups","regex","indices","postModify","loc","group","captures","bucketValue","pathValue","invalidUrl","lastComponent","lastIndexOf","makeNormalUrl","urlPart","makeUploadUrl","makeQueryString","queryPart","nextPart","noXform_","Mapping","server","opt_local","opt_writable","opt_xform","local","xform","mappings_","getMappings","mappings","nameMapping","fullPath","xformPath","sizeMapping","size","fromResource","authWrapper","resource","mapping","makeStorageReference","addRef","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","makeDownloadUrl","alt","toResourceString","metadataValidator","validate","specs","passed","minArgs","maxArgs","argMin","argMax","real","countPart","plural","invalidArgumentCount","validator","ArgSpec","opt_optional","stringSpec","opt_validator","stringValidator","v1","v2","and_","metadataSpec","nonNegativeNumberSpec","isNumber","looseObjectSpec","nullFunctionSpec","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","FbsBlob","opt_elideCopy","blobType","data_","size_","type_","startByte","endByte","sliced","webkitSlice","mozSlice","sliceBlob","getBlob","blobby","bb","uint8Arrays","finalLength_1","merged_1","index_1","uploadData","contains$1","elem","RequestInfo","handler","errorHandler","progressCallback","successCodes","additionalRetryCodes","handlerCheck","cndn","metadataHandler","sharedErrorHandler","newErr","quotaExceeded","unauthorized","objectErrorHandler","objectNotFound","getMetadata","maxOperationRetryTime","requestInfo","getDownloadUrl","downloadUrlHandler","metadataForUpload_","opt_metadata","determineContentType_","ResumableUploadStatus","current","total","checkResumeHeader_","opt_allowed","continueResumableUpload","opt_status","opt_progressCallback","bytesLeft","bytesToUpload","X-Goog-Upload-Command","X-Goog-Upload-Offset","maxUploadRetryTime","uploadStatus","newCurrent","Observer","opt_error","opt_complete","UploadTaskSnapshot","bytesTransferred","totalBytes","argsToForward","UploadTask","transferred_","needToFetchStatus_","needToFetchMetadata_","observers_","error_","uploadUrl_","request_","chunkMultiplier_","resolve_","reject_","authWrapper_","location_","blob_","metadata_","resumable_","shouldDoResumable_","errorHandler_","completeTransitions_","transition_","metadataErrorHandler_","promise_","makeProgressCallback_","sizeBefore","loaded","updateProgress_","createResumable_","fetchStatus_","fetchMetadata_","continueUpload_","oneShotUpload_","resolveToken_","getAuthToken","X-Goog-Upload-Protocol","X-Goog-Upload-Header-Content-Length","X-Goog-Upload-Header-Content-Type","Content-Type","createResumableUpload","createRequest","makeRequest","getPromise","sizeString","getResumableUploadStatus","statusRequest","uploadRequest","newStatus","increaseMultiplier_","metadataRequest","boundary","genBoundary","preBlobPart","postBlobPart","multipartUpload","multipartRequest","transferred","old","notifyObservers_","wasPaused","externalState","completed","nextOrObserverMessage","nextValidator","observerValidator","nextOrObserverValidator","_p","makeBinder","addObserver_","removeObserver_","binderSpecs","notifyObserver_","finishPromise_","arraylike","clone$1","triggered","valid","pause","newRef","newPath","canonicalChildPath","component","throwIfRoot_","putString","deleteObject","updateMetadata","getDownloadURL","invalidRootOperation","FailRequest","appDelete","RequestMap","map_","id_","addRequest","unmap","AuthWrapper","maker","requestMaker","pool","bucket_","deleted_","extractBucket_","storageRefMaker_","requestMaker_","pool_","service_","maxOperationRetryTime_","maxUploadRetryTime_","requestMap_","_error","deleteApp","setMaxUploadRetryTime","setMaxOperationRetryTime","NetworkRequest","errorCallback","pendingXhr_","backoffId_","canceled_","appDelete_","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","errorCallback_","progressCallback_","timeout_","backoffDone","requestWentThrough","wasSuccessCode","RequestEndStatus","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","callWithDelay","millis","waitMillis","stopped","stop","wasTimeout","backoffCallback","canceled$$1","progressListener","hitServer","isRetryStatusCode_","successCode","wasCanceled","progressEvent","lengthComputable","isFiveHundredCode","isExtraRetryCode","isRequestSpecificRetryCode","opt_canceled","addAuthHeader_","number","addVersionHeader_","Service","authWrapperBucket","internals_","ServiceInternals","STORAGE_TYPE","factory","opt_url","namespaceExports","Storage"],"mappings":"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","file":"firebase.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/storage';\n\nexport {firebase};\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nrequire('@firebase/polyfill');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nmodule.exports = firebase;\n","import 'whatwg-fetch';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  this._state = 0;\n  this._handled = false;\n  this._value = undefined;\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = function(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n};\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!globalNS.Promise) {\n  globalNS.Promise = Promise;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar _global = createCommonjsModule(function (module) {\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n});\n\nvar _core = createCommonjsModule(function (module) {\nvar core = module.exports = { version: '2.5.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n});\nvar _core_1 = _core.version;\n\nvar _isObject = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\nvar _anObject = function (it) {\n  if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\nvar _fails = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar _descriptors = !_fails(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\nvar document = _global.document;\n// typeof document.createElement is 'object' in old IE\nvar is = _isObject(document) && _isObject(document.createElement);\nvar _domCreate = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\nvar _ie8DomDefine = !_descriptors && !_fails(function () {\n  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\n\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar _toPrimitive = function (it, S) {\n  if (!_isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar dP = Object.defineProperty;\n\nvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  _anObject(O);\n  P = _toPrimitive(P, true);\n  _anObject(Attributes);\n  if (_ie8DomDefine) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar _objectDp = {\n\tf: f\n};\n\nvar _propertyDesc = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar _hide = _descriptors ? function (object, key, value) {\n  return _objectDp.f(object, key, _propertyDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar _has = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\nvar id = 0;\nvar px = Math.random();\nvar _uid = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\nvar _redefine = createCommonjsModule(function (module) {\nvar SRC = _uid('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n_core.inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === _global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    _hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    _hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n});\n\nvar _aFunction = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n// optional / simple context binding\n\nvar _ctx = function (fn, that, length) {\n  _aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n    // extend global\n    if (target) _redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) _hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\n_global.core = _core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nvar _export = $export;\n\nvar toString = {}.toString;\n\nvar _cof = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n// eslint-disable-next-line no-prototype-builtins\nvar _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return _cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n// 7.2.1 RequireObjectCoercible(argument)\nvar _defined = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n// 7.1.13 ToObject(argument)\n\nvar _toObject = function (it) {\n  return Object(_defined(it));\n};\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nvar _toInteger = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n// 7.1.15 ToLength\n\nvar min = Math.min;\nvar _toLength = function (it) {\n  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n// 7.2.2 IsArray(argument)\n\nvar _isArray = Array.isArray || function isArray(arg) {\n  return _cof(arg) == 'Array';\n};\n\nvar SHARED = '__core-js_shared__';\nvar store = _global[SHARED] || (_global[SHARED] = {});\nvar _shared = function (key) {\n  return store[key] || (store[key] = {});\n};\n\nvar _wks = createCommonjsModule(function (module) {\nvar store = _shared('wks');\n\nvar Symbol = _global.Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n});\n\nvar SPECIES = _wks('species');\n\nvar _arraySpeciesConstructor = function (original) {\n  var C;\n  if (_isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;\n    if (_isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n\n// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\n\n\nvar _arraySpeciesCreate = function (original, length) {\n  return new (_arraySpeciesConstructor(original))(length);\n};\n\n// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\n\n\n\n\n\nvar _arrayMethods = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || _arraySpeciesCreate;\n  return function ($this, callbackfn, that) {\n    var O = _toObject($this);\n    var self = _iobject(O);\n    var f = _ctx(callbackfn, that, 3);\n    var length = _toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = _wks('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});\nvar _addToUnscopables = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\n\nvar $find = _arrayMethods(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n_export(_export.P + _export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n_addToUnscopables(KEY);\n\nvar find = _core.Array.find;\n\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\n\nvar $find$1 = _arrayMethods(6);\nvar KEY$1 = 'findIndex';\nvar forced$1 = true;\n// Shouldn't skip holes\nif (KEY$1 in []) Array(1)[KEY$1](function () { forced$1 = false; });\n_export(_export.P + _export.F * forced$1, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n_addToUnscopables(KEY$1);\n\nvar findIndex = _core.Array.findIndex;\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\nvar _toIobject = function (it) {\n  return _iobject(_defined(it));\n};\n\nvar max = Math.max;\nvar min$1 = Math.min;\nvar _toAbsoluteIndex = function (index, length) {\n  index = _toInteger(index);\n  return index < 0 ? max(index + length, 0) : min$1(index, length);\n};\n\n// false -> Array#indexOf\n// true  -> Array#includes\n\n\n\nvar _arrayIncludes = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = _toIobject($this);\n    var length = _toLength(O.length);\n    var index = _toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar shared = _shared('keys');\n\nvar _sharedKey = function (key) {\n  return shared[key] || (shared[key] = _uid(key));\n};\n\nvar arrayIndexOf = _arrayIncludes(false);\nvar IE_PROTO = _sharedKey('IE_PROTO');\n\nvar _objectKeysInternal = function (object, names) {\n  var O = _toIobject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (_has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n// IE 8- don't enum bug keys\nvar _enumBugKeys = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n\nvar _objectKeys = Object.keys || function keys(O) {\n  return _objectKeysInternal(O, _enumBugKeys);\n};\n\nvar f$1 = Object.getOwnPropertySymbols;\n\nvar _objectGops = {\n\tf: f$1\n};\n\nvar f$2 = {}.propertyIsEnumerable;\n\nvar _objectPie = {\n\tf: f$2\n};\n\n// 19.1.2.1 Object.assign(target, source, ...)\n\n\n\n\n\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nvar _objectAssign = !$assign || _fails(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = _toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = _objectGops.f;\n  var isEnum = _objectPie.f;\n  while (aLen > index) {\n    var S = _iobject(arguments[index++]);\n    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n// 19.1.3.1 Object.assign(target, source)\n\n\n_export(_export.S + _export.F, 'Object', { assign: _objectAssign });\n\nvar assign = _core.Object.assign;\n\n// 7.2.8 IsRegExp(argument)\n\n\nvar MATCH = _wks('match');\nvar _isRegexp = function (it) {\n  var isRegExp;\n  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');\n};\n\n// helper for String#{startsWith, endsWith, includes}\n\n\n\nvar _stringContext = function (that, searchString, NAME) {\n  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(_defined(that));\n};\n\nvar MATCH$1 = _wks('match');\nvar _failsIsRegexp = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH$1] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = _stringContext(this, searchString, STARTS_WITH);\n    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\nvar startsWith = _core.String.startsWith;\n\nvar _stringRepeat = function repeat(count) {\n  var str = String(_defined(this));\n  var res = '';\n  var n = _toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n\n_export(_export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: _stringRepeat\n});\n\nvar repeat = _core.String.repeat;\n\nvar _meta = createCommonjsModule(function (module) {\nvar META = _uid('meta');\n\n\nvar setDesc = _objectDp.f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !_fails(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!_has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!_has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n});\nvar _meta_1 = _meta.KEY;\nvar _meta_2 = _meta.NEED;\nvar _meta_3 = _meta.fastKey;\nvar _meta_4 = _meta.getWeak;\nvar _meta_5 = _meta.onFreeze;\n\nvar def = _objectDp.f;\n\nvar TAG = _wks('toStringTag');\n\nvar _setToStringTag = function (it, tag, stat) {\n  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\nvar f$3 = _wks;\n\nvar _wksExt = {\n\tf: f$3\n};\n\nvar _library = false;\n\nvar defineProperty = _objectDp.f;\nvar _wksDefine = function (name) {\n  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: _wksExt.f(name) });\n};\n\n// all enumerable object keys, includes symbols\n\n\n\nvar _enumKeys = function (it) {\n  var result = _objectKeys(it);\n  var getSymbols = _objectGops.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = _objectPie.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n\nvar _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n  _anObject(O);\n  var keys = _objectKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\nvar document$1 = _global.document;\nvar _html = document$1 && document$1.documentElement;\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\n\n\nvar IE_PROTO$1 = _sharedKey('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE$1 = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = _domCreate('iframe');\n  var i = _enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  _html.appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];\n  return createDict();\n};\n\nvar _objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE$1] = _anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : _objectDps(result, Properties);\n};\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n\nvar hiddenKeys = _enumBugKeys.concat('length', 'prototype');\n\nvar f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return _objectKeysInternal(O, hiddenKeys);\n};\n\nvar _objectGopn = {\n\tf: f$4\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n\nvar gOPN = _objectGopn.f;\nvar toString$1 = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nvar f$5 = function getOwnPropertyNames(it) {\n  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));\n};\n\nvar _objectGopnExt = {\n\tf: f$5\n};\n\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = _toIobject(O);\n  P = _toPrimitive(P, true);\n  if (_ie8DomDefine) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);\n};\n\nvar _objectGopd = {\n\tf: f$6\n};\n\n// ECMAScript 6 symbols shim\n\n\n\n\n\nvar META = _meta.KEY;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar gOPD$1 = _objectGopd.f;\nvar dP$1 = _objectDp.f;\nvar gOPN$1 = _objectGopnExt.f;\nvar $Symbol = _global.Symbol;\nvar $JSON = _global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE$2 = 'prototype';\nvar HIDDEN = _wks('_hidden');\nvar TO_PRIMITIVE = _wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = _shared('symbol-registry');\nvar AllSymbols = _shared('symbols');\nvar OPSymbols = _shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE$2];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = _global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = _descriptors && _fails(function () {\n  return _objectCreate(dP$1({}, 'a', {\n    get: function () { return dP$1(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD$1(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP$1(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);\n} : dP$1;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  _anObject(it);\n  key = _toPrimitive(key, true);\n  _anObject(D);\n  if (_has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP$1(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  _anObject(it);\n  var keys = _enumKeys(P = _toIobject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = _toPrimitive(key, true));\n  if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;\n  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = _toIobject(it);\n  key = _toPrimitive(key, true);\n  if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;\n  var D = gOPD$1(it, key);\n  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN$1(_toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, _propertyDesc(1, value));\n    };\n    if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {\n    return this._k;\n  });\n\n  _objectGopd.f = $getOwnPropertyDescriptor;\n  _objectDp.f = $defineProperty;\n  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;\n  _objectPie.f = $propertyIsEnumerable;\n  _objectGops.f = $getOwnPropertySymbols;\n\n  if (_descriptors && !_library) {\n    _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  _wksExt.f = function (name) {\n    return wrap(_wks(name));\n  };\n}\n\n_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return _has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!_isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\n_setToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\n_setToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\n_setToStringTag(_global.JSON, 'JSON', true);\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\n\nvar TAG$1 = _wks('toStringTag');\n// ES3 wrong here\nvar ARG = _cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nvar _classof = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T\n    // builtinTag case\n    : ARG ? _cof(O)\n    // ES3 arguments fallback\n    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n// 19.1.3.6 Object.prototype.toString()\n\nvar test = {};\ntest[_wks('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  _redefine(Object.prototype, 'toString', function toString() {\n    return '[object ' + _classof(this) + ']';\n  }, true);\n}\n\n_wksDefine('asyncIterator');\n\n_wksDefine('observable');\n\nvar symbol = _core.Symbol;\n\n// true  -> String#at\n// false -> String#codePointAt\nvar _stringAt = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(_defined(that));\n    var i = _toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\nvar _iterators = {};\n\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n_hide(IteratorPrototype, _wks('iterator'), function () { return this; });\n\nvar _iterCreate = function (Constructor, NAME, next) {\n  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });\n  _setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n\n\nvar IE_PROTO$2 = _sharedKey('IE_PROTO');\nvar ObjectProto$1 = Object.prototype;\n\nvar _objectGpo = Object.getPrototypeOf || function (O) {\n  O = _toObject(O);\n  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto$1 : null;\n};\n\nvar ITERATOR = _wks('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nvar _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  _iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = _objectGpo($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      _setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    _hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  _iterators[NAME] = $default;\n  _iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) _redefine(proto, key, methods[key]);\n    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\nvar $at = _stringAt(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n_iterDefine(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\nvar _iterStep = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nvar es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {\n  this._t = _toIobject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return _iterStep(1);\n  }\n  if (kind == 'keys') return _iterStep(0, index);\n  if (kind == 'values') return _iterStep(0, O[index]);\n  return _iterStep(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n_iterators.Arguments = _iterators.Array;\n\n_addToUnscopables('keys');\n_addToUnscopables('values');\n_addToUnscopables('entries');\n\nvar ITERATOR$1 = _wks('iterator');\nvar TO_STRING_TAG = _wks('toStringTag');\nvar ArrayValues = _iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = _global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);\n    if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);\n    _iterators[NAME] = ArrayValues;\n    if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);\n  }\n}\n\nvar iterator = _wksExt.f('iterator');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar util = require('@firebase/util');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n// An array to capture listeners before the true auth functions\r\n// exist\r\nvar tokenListeners = [];\r\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n */\r\nvar FirebaseAppImpl = /** @class */ (function () {\r\n    function FirebaseAppImpl(options, config, firebase_) {\r\n        this.firebase_ = firebase_;\r\n        this.isDeleted_ = false;\r\n        this.services_ = {};\r\n        this.name_ = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled || false;\r\n        this.options_ = util.deepCopy(options);\r\n        this.INTERNAL = {\r\n            getUid: function () { return null; },\r\n            getToken: function () { return Promise.resolve(null); },\r\n            addAuthTokenListener: function (callback) {\r\n                tokenListeners.push(callback);\r\n                // Make sure callback is called, asynchronously, in the absence of the auth module\r\n                setTimeout(function () { return callback(null); }, 0);\r\n            },\r\n            removeAuthTokenListener: function (callback) {\r\n                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });\r\n            }\r\n        };\r\n    }\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this._automaticDataCollectionEnabled;\r\n        },\r\n        set: function (val) {\r\n            this.checkDestroyed_();\r\n            this._automaticDataCollectionEnabled = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.name_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.options_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FirebaseAppImpl.prototype.delete = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.checkDestroyed_();\r\n            resolve();\r\n        })\r\n            .then(function () {\r\n            _this.firebase_.INTERNAL.removeApp(_this.name_);\r\n            var services = [];\r\n            Object.keys(_this.services_).forEach(function (serviceKey) {\r\n                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {\r\n                    services.push(_this.services_[serviceKey][instanceKey]);\r\n                });\r\n            });\r\n            return Promise.all(services.map(function (service) {\r\n                return service.INTERNAL.delete();\r\n            }));\r\n        })\r\n            .then(function () {\r\n            _this.isDeleted_ = true;\r\n            _this.services_ = {};\r\n        });\r\n    };\r\n    /**\r\n     * Return a service instance associated with this app (creating it\r\n     * on demand), identified by the passed instanceIdentifier.\r\n     *\r\n     * NOTE: Currently storage is the only one that is leveraging this\r\n     * functionality. They invoke it by calling:\r\n     *\r\n     * ```javascript\r\n     * firebase.app().storage('STORAGE BUCKET ID')\r\n     * ```\r\n     *\r\n     * The service name is passed to this already\r\n     * @internal\r\n     */\r\n    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\r\n        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n        this.checkDestroyed_();\r\n        if (!this.services_[name]) {\r\n            this.services_[name] = {};\r\n        }\r\n        if (!this.services_[name][instanceIdentifier]) {\r\n            /**\r\n             * If a custom instance has been defined (i.e. not '[DEFAULT]')\r\n             * then we will pass that instance on, otherwise we pass `null`\r\n             */\r\n            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\r\n                ? instanceIdentifier\r\n                : undefined;\r\n            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\r\n            this.services_[name][instanceIdentifier] = service;\r\n        }\r\n        return this.services_[name][instanceIdentifier];\r\n    };\r\n    /**\r\n     * Callback function used to extend an App instance at the time\r\n     * of service instance creation.\r\n     */\r\n    FirebaseAppImpl.prototype.extendApp = function (props) {\r\n        var _this = this;\r\n        // Copy the object onto the FirebaseAppImpl prototype\r\n        util.deepExtend(this, props);\r\n        /**\r\n         * If the app has overwritten the addAuthTokenListener stub, forward\r\n         * the active token listeners on to the true fxn.\r\n         *\r\n         * TODO: This function is required due to our current module\r\n         * structure. Once we are able to rely strictly upon a single module\r\n         * implementation, this code should be refactored and Auth should\r\n         * provide these stubs and the upgrade logic\r\n         */\r\n        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\r\n            tokenListeners.forEach(function (listener) {\r\n                _this.INTERNAL.addAuthTokenListener(listener);\r\n            });\r\n            tokenListeners = [];\r\n        }\r\n    };\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    FirebaseAppImpl.prototype.checkDestroyed_ = function () {\r\n        if (this.isDeleted_) {\r\n            error('app-deleted', { name: this.name_ });\r\n        }\r\n    };\r\n    return FirebaseAppImpl;\r\n}());\r\n// Prevent dead-code elimination of these methods w/o invalid property\r\n// copying.\r\n(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n    FirebaseAppImpl.prototype.delete ||\r\n    console.log('dc');\r\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\r\nfunction createFirebaseNamespace() {\r\n    var apps_ = {};\r\n    var factories = {};\r\n    var appHooks = {};\r\n    // A namespace is a plain JavaScript Object.\r\n    var namespace = {\r\n        // Hack to prevent Babel from modifying the object returned\r\n        // as the firebase namespace.\r\n        __esModule: true,\r\n        initializeApp: initializeApp,\r\n        app: app,\r\n        apps: null,\r\n        Promise: Promise,\r\n        SDK_VERSION: '5.5.0',\r\n        INTERNAL: {\r\n            registerService: registerService,\r\n            createFirebaseNamespace: createFirebaseNamespace,\r\n            extendNamespace: extendNamespace,\r\n            createSubscribe: util.createSubscribe,\r\n            ErrorFactory: util.ErrorFactory,\r\n            removeApp: removeApp,\r\n            factories: factories,\r\n            useAsService: useAsService,\r\n            Promise: Promise,\r\n            deepExtend: util.deepExtend\r\n        }\r\n    };\r\n    // Inject a circular default export to allow Babel users who were previously\r\n    // using:\r\n    //\r\n    //   import firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase').default;\r\n    //\r\n    // instead of\r\n    //\r\n    //   import * as firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase');\r\n    util.patchProperty(namespace, 'default', namespace);\r\n    // firebase.apps is a read-only getter.\r\n    Object.defineProperty(namespace, 'apps', {\r\n        get: getApps\r\n    });\r\n    /**\r\n     * Called by App.delete() - but before any services associated with the App\r\n     * are deleted.\r\n     */\r\n    function removeApp(name) {\r\n        var app = apps_[name];\r\n        callAppHooks(app, 'delete');\r\n        delete apps_[name];\r\n    }\r\n    /**\r\n     * Get the App object for a given name (or DEFAULT).\r\n     */\r\n    function app(name) {\r\n        name = name || DEFAULT_ENTRY_NAME;\r\n        if (!contains(apps_, name)) {\r\n            error('no-app', { name: name });\r\n        }\r\n        return apps_[name];\r\n    }\r\n    util.patchProperty(app, 'App', FirebaseAppImpl);\r\n    function initializeApp(options, rawConfig) {\r\n        if (rawConfig === void 0) { rawConfig = {}; }\r\n        if (typeof rawConfig !== 'object' || rawConfig === null) {\r\n            var name_1 = rawConfig;\r\n            rawConfig = { name: name_1 };\r\n        }\r\n        var config = rawConfig;\r\n        if (config.name === undefined) {\r\n            config.name = DEFAULT_ENTRY_NAME;\r\n        }\r\n        var name = config.name;\r\n        if (typeof name !== 'string' || !name) {\r\n            error('bad-app-name', { name: name + '' });\r\n        }\r\n        if (contains(apps_, name)) {\r\n            error('duplicate-app', { name: name });\r\n        }\r\n        var app = new FirebaseAppImpl(options, config, namespace);\r\n        apps_[name] = app;\r\n        callAppHooks(app, 'create');\r\n        return app;\r\n    }\r\n    /*\r\n     * Return an array of all the non-deleted FirebaseApps.\r\n     */\r\n    function getApps() {\r\n        // Make a copy so caller cannot mutate the apps list.\r\n        return Object.keys(apps_).map(function (name) { return apps_[name]; });\r\n    }\r\n    /*\r\n     * Register a Firebase Service.\r\n     *\r\n     * firebase.INTERNAL.registerService()\r\n     *\r\n     * TODO: Implement serviceProperties.\r\n     */\r\n    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\r\n        // Cannot re-register a service that already exists\r\n        if (factories[name]) {\r\n            error('duplicate-service', { name: name });\r\n        }\r\n        // Capture the service factory for later service instantiation\r\n        factories[name] = createService;\r\n        // Capture the appHook, if passed\r\n        if (appHook) {\r\n            appHooks[name] = appHook;\r\n            // Run the **new** app hook on all existing apps\r\n            getApps().forEach(function (app) {\r\n                appHook('create', app);\r\n            });\r\n        }\r\n        // The Service namespace is an accessor function ...\r\n        var serviceNamespace = function (appArg) {\r\n            if (appArg === void 0) { appArg = app(); }\r\n            if (typeof appArg[name] !== 'function') {\r\n                // Invalid argument.\r\n                // This happens in the following case: firebase.storage('gs:/')\r\n                error('invalid-app-argument', { name: name });\r\n            }\r\n            // Forward service instance lookup to the FirebaseApp.\r\n            return appArg[name]();\r\n        };\r\n        // ... and a container for service-level properties.\r\n        if (serviceProperties !== undefined) {\r\n            util.deepExtend(serviceNamespace, serviceProperties);\r\n        }\r\n        // Monkey-patch the serviceNamespace onto the firebase namespace\r\n        namespace[name] = serviceNamespace;\r\n        // Patch the FirebaseAppImpl prototype\r\n        FirebaseAppImpl.prototype[name] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var serviceFxn = this._getService.bind(this, name);\r\n            return serviceFxn.apply(this, allowMultipleInstances ? args : []);\r\n        };\r\n        return serviceNamespace;\r\n    }\r\n    /**\r\n     * Patch the top-level firebase namespace with additional properties.\r\n     *\r\n     * firebase.INTERNAL.extendNamespace()\r\n     */\r\n    function extendNamespace(props) {\r\n        util.deepExtend(namespace, props);\r\n    }\r\n    function callAppHooks(app, eventName) {\r\n        Object.keys(factories).forEach(function (serviceName) {\r\n            // Ignore virtual services\r\n            var factoryName = useAsService(app, serviceName);\r\n            if (factoryName === null) {\r\n                return;\r\n            }\r\n            if (appHooks[factoryName]) {\r\n                appHooks[factoryName](eventName, app);\r\n            }\r\n        });\r\n    }\r\n    // Map the requested service to a registered service name\r\n    // (used to map auth to serverAuth service when needed).\r\n    function useAsService(app, name) {\r\n        if (name === 'serverAuth') {\r\n            return null;\r\n        }\r\n        var useService = name;\r\n        var options = app.options;\r\n        return useService;\r\n    }\r\n    return namespace;\r\n}\r\nfunction error(code, args) {\r\n    throw appErrors.create(code, args);\r\n}\r\n// TypeScript does not support non-string indexes!\r\n// let errors: {[code: AppError: string} = {\r\nvar errors = {\r\n    'no-app': \"No Firebase App '{$name}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    'bad-app-name': \"Illegal App name: '{$name}\",\r\n    'duplicate-app': \"Firebase App named '{$name}' already exists\",\r\n    'app-deleted': \"Firebase App named '{$name}' already deleted\",\r\n    'duplicate-service': \"Firebase service named '{$name}' already registered\",\r\n    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\r\n        'account is only allowed in a Node.js environment. On client ' +\r\n        'devices, you should instead initialize the SDK with an api key and ' +\r\n        'auth domain',\r\n    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\r\n        'Firebase App instance.'\r\n};\r\nvar appErrors = new util.ErrorFactory('app', 'Firebase', errors);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar firebase = createFirebaseNamespace();\n\nexports.firebase = firebase;\nexports.default = firebase;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib_1 = require('tslib');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nvar CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n * @param {*} assertion The assertion to be tested for falsiness\r\n * @param {!string} message The message to display if the check fails\r\n */\r\nvar assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n * @param {string} message\r\n * @return {!Error}\r\n */\r\nvar assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar stringToByteArray = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param {Array<number>} bytes Array of numbers representing characters.\r\n * @return {string} Stringification of the array.\r\n */\r\nvar byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        var c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            var c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            var c4 = bytes[pos++];\r\n            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// Static lookup maps, lazily populated by init_()\r\nvar base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     * @type {string}\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param {boolean=} opt_webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeByteArray: function (input, opt_webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        var byteToCharMap = opt_webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i += 3) {\r\n            var byte1 = input[i];\r\n            var haveByte2 = i + 1 < input.length;\r\n            var byte2 = haveByte2 ? input[i + 1] : 0;\r\n            var haveByte3 = i + 2 < input.length;\r\n            var byte3 = haveByte3 ? input[i + 2] : 0;\r\n            var outByte1 = byte1 >> 2;\r\n            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            var outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param {string} input A string to encode.\r\n     * @param {boolean=} opt_webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param {string} input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} string representing the decoded value.\r\n     */\r\n    decodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param {string} input Input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\r\n     * @return {!Array<number>} bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray: function (input, opt_webSafe) {\r\n        this.init_();\r\n        var charToByteMap = opt_webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length;) {\r\n            var byte1 = charToByteMap[input.charAt(i++)];\r\n            var haveByte2 = i < input.length;\r\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            var haveByte3 = i < input.length;\r\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            var haveByte4 = i < input.length;\r\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            var outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 != 64) {\r\n                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 != 64) {\r\n                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_: function () {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n * @param {!string} str\r\n * @return {!string}\r\n */\r\nvar base64Encode = function (str) {\r\n    var utf8Bytes = stringToByteArray(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param {string} str To be decoded\r\n * @return {?string} Decoded result, if possible\r\n */\r\nvar base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            var dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (var prop in source) {\r\n        if (!source.hasOwnProperty(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\n// TODO: Really needed (for JSCompiler type checking)?\r\nfunction patchProperty(obj, prop, value) {\r\n    obj[prop] = value;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Deferred = /** @class */ (function () {\r\n    function Deferred() {\r\n        var _this = this;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolve = resolve;\r\n            _this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback\r\n     * @return {!function(?(Error), ?=)}\r\n     */\r\n    Deferred.prototype.wrapCallback = function (callback) {\r\n        var _this = this;\r\n        return function (error, value) {\r\n            if (error) {\r\n                _this.reject(error);\r\n            }\r\n            else {\r\n                _this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                _this.promise.catch(function () { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    return Deferred;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return {string} user agent string\r\n */\r\nvar getUA = function () {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n};\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\r\n * Cordova `onDeviceReady`, which would normally wait for a callback.\r\n *\r\n * @return {boolean} isMobileCordova\r\n */\r\nvar isMobileCordova = function () {\r\n    return (typeof window !== 'undefined' &&\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n};\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return {boolean} True if ReactNative environment is detected.\r\n */\r\nvar isReactNative = function () {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n};\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return {boolean} True if Node.js environment is detected.\r\n */\r\nvar isNodeSdk = function () {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n};\n\nvar ERROR_NAME = 'FirebaseError';\r\nvar captureStackTrace = Error\r\n    .captureStackTrace;\r\n// Export for faking in tests\r\nfunction patchCapture(captureFake) {\r\n    var result = captureStackTrace;\r\n    captureStackTrace = captureFake;\r\n    return result;\r\n}\r\nvar FirebaseError = /** @class */ (function () {\r\n    function FirebaseError(code, message) {\r\n        this.code = code;\r\n        this.message = message;\r\n        // We want the stack value, if implemented by Error\r\n        if (captureStackTrace) {\r\n            // Patches this.stack, omitted calls above ErrorFactory#create\r\n            captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n        else {\r\n            try {\r\n                // In case of IE11, stack will be set only after error is raised.\r\n                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript\r\n                throw Error.apply(this, arguments);\r\n            }\r\n            catch (err) {\r\n                this.name = ERROR_NAME;\r\n                // Make non-enumerable getter for the property.\r\n                Object.defineProperty(this, 'stack', {\r\n                    get: function () {\r\n                        return err.stack;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return FirebaseError;\r\n}());\r\n// Back-door inheritance\r\nFirebaseError.prototype = Object.create(Error.prototype);\r\nFirebaseError.prototype.constructor = FirebaseError;\r\nFirebaseError.prototype.name = ERROR_NAME;\r\nvar ErrorFactory = /** @class */ (function () {\r\n    function ErrorFactory(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n        // Matches {$name}, by default.\r\n        this.pattern = /\\{\\$([^}]+)}/g;\r\n        // empty\r\n    }\r\n    ErrorFactory.prototype.create = function (code, data) {\r\n        if (data === undefined) {\r\n            data = {};\r\n        }\r\n        var template = this.errors[code];\r\n        var fullCode = this.service + '/' + code;\r\n        var message;\r\n        if (template === undefined) {\r\n            message = 'Error';\r\n        }\r\n        else {\r\n            message = template.replace(this.pattern, function (match, key) {\r\n                var value = data[key];\r\n                return value !== undefined ? value.toString() : '<' + key + '?>';\r\n            });\r\n        }\r\n        // Service: Error message (service/code).\r\n        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';\r\n        var err = new FirebaseError(fullCode, message);\r\n        // Populate the Error object with message parts for programmatic\r\n        // accesses (e.g., e.file).\r\n        for (var prop in data) {\r\n            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {\r\n                continue;\r\n            }\r\n            err[prop] = data[prop];\r\n        }\r\n        return err;\r\n    };\r\n    return ErrorFactory;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {{header: *, claims: *, data: *, signature: string}}\r\n */\r\nvar decode = function (token) {\r\n    var header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        var parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header: header,\r\n        claims: claims,\r\n        data: data,\r\n        signature: signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidTimestamp = function (token) {\r\n    var claims = decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (now && validSince && validUntil && now >= validSince && now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {?number}\r\n */\r\nvar issuedAtTime = function (token) {\r\n    var claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidFormat = function (token) {\r\n    var decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isAdmin = function (token) {\r\n    var claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar safeGet = function (obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key))\r\n        return obj[key];\r\n    // else return undefined.\r\n};\r\n/**\r\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\r\n *\r\n * @param {?Object.<K,V>} obj Object to enumerate.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar forEach = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Copies all the (own) properties from one object to another.\r\n * @param {!Object} objTo\r\n * @param {!Object} objFrom\r\n * @return {!Object} objTo\r\n */\r\nvar extend = function (objTo, objFrom) {\r\n    forEach(objFrom, function (key, value) {\r\n        objTo[key] = value;\r\n    });\r\n    return objTo;\r\n};\r\n/**\r\n * Returns a clone of the specified object.\r\n * @param {!Object} obj\r\n * @return {!Object} cloned obj.\r\n */\r\nvar clone = function (obj) {\r\n    return extend({}, obj);\r\n};\r\n/**\r\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\r\n * for functions.\r\n *\r\n * @param obj {*} A potential object.\r\n * @returns {boolean} True if it's an object.\r\n */\r\nvar isNonNullObject = function (obj) {\r\n    return typeof obj === 'object' && obj !== null;\r\n};\r\nvar isEmpty = function (obj) {\r\n    for (var key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nvar getCount = function (obj) {\r\n    var rv = 0;\r\n    for (var key in obj) {\r\n        rv++;\r\n    }\r\n    return rv;\r\n};\r\nvar map = function (obj, f, opt_obj) {\r\n    var res = {};\r\n    for (var key in obj) {\r\n        res[key] = f.call(opt_obj, obj[key], key, obj);\r\n    }\r\n    return res;\r\n};\r\nvar findKey = function (obj, fn, opt_this) {\r\n    for (var key in obj) {\r\n        if (fn.call(opt_this, obj[key], key, obj)) {\r\n            return key;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nvar findValue = function (obj, fn, opt_this) {\r\n    var key = findKey(obj, fn, opt_this);\r\n    return key && obj[key];\r\n};\r\nvar getAnyKey = function (obj) {\r\n    for (var key in obj) {\r\n        return key;\r\n    }\r\n};\r\nvar getValues = function (obj) {\r\n    var res = [];\r\n    var i = 0;\r\n    for (var key in obj) {\r\n        res[i++] = obj[key];\r\n    }\r\n    return res;\r\n};\r\n/**\r\n * Tests whether every key/value pair in an object pass the test implemented\r\n * by the provided function\r\n *\r\n * @param {?Object.<K,V>} obj Object to test.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar every = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            if (!fn(key, obj[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\r\nvar querystring = function (querystringParams) {\r\n    var params = [];\r\n    forEach(querystringParams, function (key, value) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(function (arrayVal) {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    });\r\n    return params.length ? '&' + params.join('&') : '';\r\n};\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\r\nvar querystringDecode = function (querystring) {\r\n    var obj = {};\r\n    var tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(function (token) {\r\n        if (token) {\r\n            var key = token.split('=');\r\n            obj[key[0]] = key[1];\r\n        }\r\n    });\r\n    return obj;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Copyright 2011 The Closure Library Authors. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * @fileoverview Abstract cryptographic hash interface.\r\n *\r\n * See Sha1 and Md5 for sample implementations.\r\n *\r\n */\r\n/**\r\n * Create a cryptographic hash instance.\r\n *\r\n * @constructor\r\n * @struct\r\n */\r\nvar Hash = /** @class */ (function () {\r\n    function Hash() {\r\n        /**\r\n         * The block size for the hasher.\r\n         * @type {number}\r\n         */\r\n        this.blockSize = -1;\r\n    }\r\n    return Hash;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @extends {Hash}\r\n * @final\r\n * @struct\r\n */\r\nvar Sha1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Sha1, _super);\r\n    function Sha1() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.total_ = 0;\r\n        _this.blockSize = 512 / 8;\r\n        _this.pad_[0] = 128;\r\n        for (var i = 1; i < _this.blockSize; ++i) {\r\n            _this.pad_[i] = 0;\r\n        }\r\n        _this.reset();\r\n        return _this;\r\n    }\r\n    Sha1.prototype.reset = function () {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    };\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\r\n     * @param {number=} opt_offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\r\n        if (!opt_offset) {\r\n            opt_offset = 0;\r\n        }\r\n        var W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (var i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(opt_offset) << 24) |\r\n                        (buf.charCodeAt(opt_offset + 1) << 16) |\r\n                        (buf.charCodeAt(opt_offset + 2) << 8) |\r\n                        buf.charCodeAt(opt_offset + 3);\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[opt_offset] << 24) |\r\n                        (buf[opt_offset + 1] << 16) |\r\n                        (buf[opt_offset + 2] << 8) |\r\n                        buf[opt_offset + 3];\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (var i = 16; i < 80; i++) {\r\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        var a = this.chain_[0];\r\n        var b = this.chain_[1];\r\n        var c = this.chain_[2];\r\n        var d = this.chain_[3];\r\n        var e = this.chain_[4];\r\n        var f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (var i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    };\r\n    Sha1.prototype.update = function (bytes, opt_length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (opt_length === undefined) {\r\n            opt_length = bytes.length;\r\n        }\r\n        var lengthMinusBlock = opt_length - this.blockSize;\r\n        var n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        var buf = this.buf_;\r\n        var inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < opt_length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf == 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += opt_length;\r\n    };\r\n    /** @override */\r\n    Sha1.prototype.digest = function () {\r\n        var digest = [];\r\n        var totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (var i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        var n = 0;\r\n        for (var i = 0; i < 5; i++) {\r\n            for (var j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    };\r\n    return Sha1;\r\n}(Hash));\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    var proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nvar ObserverProxy = /** @class */ (function () {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function ObserverProxy(executor, onNoObservers) {\r\n        var _this = this;\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(function () {\r\n            executor(_this);\r\n        })\r\n            .catch(function (e) {\r\n            _this.error(e);\r\n        });\r\n    }\r\n    ObserverProxy.prototype.next = function (value) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.next(value);\r\n        });\r\n    };\r\n    ObserverProxy.prototype.error = function (error) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    };\r\n    ObserverProxy.prototype.complete = function () {\r\n        this.forEachObserver(function (observer) {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    };\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n        var _this = this;\r\n        var observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error: error,\r\n                complete: complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            this.task.then(function () {\r\n                try {\r\n                    if (_this.finalError) {\r\n                        observer.error(_this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    };\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    };\r\n    ObserverProxy.prototype.forEachObserver = function (fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (var i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    };\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    ObserverProxy.prototype.sendOne = function (i, fn) {\r\n        var _this = this;\r\n        // Execute the callback asynchronously\r\n        this.task.then(function () {\r\n            if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(_this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    ObserverProxy.prototype.close = function (err) {\r\n        var _this = this;\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        this.task.then(function () {\r\n            _this.observers = undefined;\r\n            _this.onNoObservers = undefined;\r\n        });\r\n    };\r\n    return ObserverProxy;\r\n}());\r\n/** Turn synchronous function into one called asynchronously. */\r\nfunction async(fn, onError) {\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        Promise.resolve(true)\r\n            .then(function () {\r\n            fn.apply(void 0, args);\r\n        })\r\n            .catch(function (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n        var method = methods_1[_i];\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\r\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    var argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        var error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argumentNumber, optional) {\r\n    var argName = '';\r\n    switch (argumentNumber) {\r\n        case 1:\r\n            argName = optional ? 'first' : 'First';\r\n            break;\r\n        case 2:\r\n            argName = optional ? 'second' : 'Second';\r\n            break;\r\n        case 3:\r\n            argName = optional ? 'third' : 'Third';\r\n            break;\r\n        case 4:\r\n            argName = optional ? 'fourth' : 'Fourth';\r\n            break;\r\n        default:\r\n            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\r\n    }\r\n    var error = fnName + ' failed: ';\r\n    error += argName + ' argument ';\r\n    return error;\r\n}\r\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\r\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\r\n    if (optional && !namespace)\r\n        return;\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\r\n    if (optional && !callback)\r\n        return;\r\n    if (typeof callback !== 'function')\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid function.');\r\n}\r\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\r\n    if (optional && !context)\r\n        return;\r\n    if (typeof context !== 'object' || context === null)\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid context object.');\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nvar stringToByteArray$1 = function (str) {\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            var high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nvar stringLength = function (str) {\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nexports.assert = assert;\nexports.assertionError = assertionError;\nexports.base64 = base64;\nexports.base64Decode = base64Decode;\nexports.base64Encode = base64Encode;\nexports.CONSTANTS = CONSTANTS;\nexports.deepCopy = deepCopy;\nexports.deepExtend = deepExtend;\nexports.patchProperty = patchProperty;\nexports.Deferred = Deferred;\nexports.getUA = getUA;\nexports.isMobileCordova = isMobileCordova;\nexports.isNodeSdk = isNodeSdk;\nexports.isReactNative = isReactNative;\nexports.ErrorFactory = ErrorFactory;\nexports.FirebaseError = FirebaseError;\nexports.patchCapture = patchCapture;\nexports.jsonEval = jsonEval;\nexports.stringify = stringify;\nexports.decode = decode;\nexports.isAdmin = isAdmin;\nexports.issuedAtTime = issuedAtTime;\nexports.isValidFormat = isValidFormat;\nexports.isValidTimestamp = isValidTimestamp;\nexports.clone = clone;\nexports.contains = contains;\nexports.every = every;\nexports.extend = extend;\nexports.findKey = findKey;\nexports.findValue = findValue;\nexports.forEach = forEach;\nexports.getAnyKey = getAnyKey;\nexports.getCount = getCount;\nexports.getValues = getValues;\nexports.isEmpty = isEmpty;\nexports.isNonNullObject = isNonNullObject;\nexports.map = map;\nexports.safeGet = safeGet;\nexports.querystring = querystring;\nexports.querystringDecode = querystringDecode;\nexports.Sha1 = Sha1;\nexports.async = async;\nexports.createSubscribe = createSubscribe;\nexports.errorPrefix = errorPrefix;\nexports.validateArgCount = validateArgCount;\nexports.validateCallback = validateCallback;\nexports.validateContextObject = validateContextObject;\nexports.validateNamespace = validateNamespace;\nexports.stringLength = stringLength;\nexports.stringToByteArray = stringToByteArray$1;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import '@firebase/database';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar util = require('@firebase/util');\nvar logger = require('@firebase/logger');\nvar tslib_1 = require('tslib');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < var_args.length; i++) {\r\n        if (Array.isArray(var_args[i]) ||\r\n            (var_args[i] &&\r\n                typeof var_args[i] === 'object' &&\r\n                typeof var_args[i].length === 'number')) {\r\n            message += buildLogMessage_.apply(null, var_args[i]);\r\n        }\r\n        else if (typeof var_args[i] === 'object') {\r\n            message += util.stringify(var_args[i]);\r\n        }\r\n        else {\r\n            message += var_args[i];\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger$1 = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger.LogLevel.VERBOSE;\r\n        logger$1 = logClient.log.bind(logClient);\r\n        if (persistent)\r\n            SessionStorage.set('logging_enabled', true);\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger$1 = logger_;\r\n    }\r\n    else {\r\n        logger$1 = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\r\nvar log = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger$1 === null && SessionStorage.get('logging_enabled') === true)\r\n            enableLogging(true);\r\n    }\r\n    if (logger$1) {\r\n        var message = buildLogMessage_.apply(null, var_args);\r\n        logger$1(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar error = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar fatal = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n */\r\nvar warn = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data != data || // NaN\r\n            data == Number.POSITIVE_INFINITY ||\r\n            data == Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete')\r\n                    wrappedFn_1();\r\n            });\r\n            // fallback to onload.\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return util.stringify(obj);\r\n    var keys = [];\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0)\r\n            key += ',';\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\r\nvar each = function (obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; ++i) {\r\n            fn(i, obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\r\n        util.forEach(obj, function (key, val) { return fn(val, key); });\r\n    }\r\n};\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1)\r\n            hexByte = '0' + hexByte;\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code == 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code == 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length)\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + this.pieces_[i];\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0)\r\n                    pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0)\r\n                return cmp;\r\n        }\r\n        if (leftKeys.length === rightKeys.length)\r\n            return 0;\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length == 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return this.host !== this.internalHost || this.isCustomHost();\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        util.forEach(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\r\n        var segment = _a[_i];\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        var kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;\r\n    if (parsedUrl.domain === 'firebase') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace == 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\r\nvar parseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = dataURL.length;\r\n        }\r\n        var parts = host.split('.');\r\n        if (parts.length === 3) {\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            domain = parts[1];\r\n            subdomain = parts[0].toLowerCase();\r\n        }\r\n        else if (parts.length === 2) {\r\n            domain = parts[0];\r\n        }\r\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        // Support `ns` query param if subdomain not already set\r\n        if (subdomain === '' && 'ns' in queryParams) {\r\n            subdomain = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString\r\n    };\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false, hasActualChild_1 = false;\r\n        util.forEach(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) {\r\n                // .priority is OK\r\n            }\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    util.forEach(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined)\r\n        return;\r\n    if (isInvalidJSONNumber(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined)\r\n        return;\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined)\r\n        return;\r\n    if (!isValidKey(key))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined)\r\n        return;\r\n    if (!isValidPathString(pathString))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined)\r\n        return;\r\n    if (typeof bool !== 'boolean')\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty())\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        else\r\n            return this.getValue();\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty())\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_)\r\n                cmp *= -1;\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_)\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        else\r\n            result = { key: node.key, value: node.value };\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var cmp, n;\r\n        n = this;\r\n        cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_())\r\n            n = n.moveRedLeft_();\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_())\r\n                n = n.rotateRight_();\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_())\r\n            n = n.rotateLeft_();\r\n        if (n.left.isRed_() && n.left.left.isRed_())\r\n            n = n.rotateRight_();\r\n        if (n.left.isRed_() && n.right.isRed_())\r\n            n = n.colorFlip_();\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        var blackDepth;\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty())\r\n                        node = node.right;\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length == 0) {\r\n            return null;\r\n        }\r\n        else if (length == 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap)\r\n            throw new Error('No index defined for ' + indexKey);\r\n        if (sortedMap === fallbackObject) {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n        else {\r\n            return sortedMap;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = util.clone(this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = util.clone(this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name != namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null)\r\n            return this;\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty())\r\n            return null;\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            for (var key in obj)\r\n                array[key] = obj[key];\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty())\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '')\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj_1 = json;\r\n        util.forEach(hinzeJsonObj_1, function (key, child) {\r\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length == 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        var jsonObj_1 = json;\r\n        util.forEach(jsonObj_1, function (key, childData) {\r\n            if (util.contains(jsonObj_1, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        else\r\n            return !this.node_.isEmpty();\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherCount = util.getCount(other.callbacks_);\r\n                var thisCount = util.getCount(this.callbacks_);\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    //  If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);\r\n                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName != MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName != MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel)\r\n                ret.cancel.bind(ret.context)(err);\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error$$1 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error$$1);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\r\nvar CountedSet = /** @class */ (function () {\r\n    function CountedSet() {\r\n        this.set = {};\r\n    }\r\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\r\n    CountedSet.prototype.add = function (item, val) {\r\n        this.set[item] = val !== null ? val : true;\r\n    };\r\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.contains = function (key) {\r\n        return util.contains(this.set, key);\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\r\n    CountedSet.prototype.get = function (item) {\r\n        return this.contains(item) ? this.set[item] : undefined;\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     */\r\n    CountedSet.prototype.remove = function (item) {\r\n        delete this.set[item];\r\n    };\r\n    /**\r\n     * Deletes everything in the set\r\n     */\r\n    CountedSet.prototype.clear = function () {\r\n        this.set = {};\r\n    };\r\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.set);\r\n    };\r\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\r\n    CountedSet.prototype.count = function () {\r\n        return util.getCount(this.set);\r\n    };\r\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\r\n    CountedSet.prototype.each = function (fn) {\r\n        util.forEach(this.set, function (k, v) { return fn(k, v); });\r\n    };\r\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\r\n    CountedSet.prototype.keys = function () {\r\n        var keys = [];\r\n        util.forEach(this.set, function (k) {\r\n            keys.push(k);\r\n        });\r\n        return keys;\r\n    };\r\n    return CountedSet;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.value_ = null;\r\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\r\n        this.children_ = null;\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value_ != null) {\r\n            return this.value_.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children_ != null) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children_.contains(childKey)) {\r\n                var childTree = this.children_.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = data;\r\n            this.children_ = null;\r\n        }\r\n        else if (this.value_ !== null) {\r\n            this.value_ = this.value_.updateChild(path, data);\r\n        }\r\n        else {\r\n            if (this.children_ == null) {\r\n                this.children_ = new CountedSet();\r\n            }\r\n            var childKey = path.getFront();\r\n            if (!this.children_.contains(childKey)) {\r\n                this.children_.add(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children_.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = null;\r\n            this.children_ = null;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value_ !== null) {\r\n                if (this.value_.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value_;\r\n                    this.value_ = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children_ !== null) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children_.contains(childKey)) {\r\n                    var safeToRemove = this.children_.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children_.remove(childKey);\r\n                    }\r\n                }\r\n                if (this.children_.isEmpty()) {\r\n                    this.children_ = null;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value_ !== null) {\r\n            func(prefixPath, this.value_);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        if (this.children_ !== null) {\r\n            this.children_.each(function (key, tree) {\r\n                func(key, tree);\r\n            });\r\n        }\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredValue = function (value, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    else {\r\n        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n        return serverValues[value['.sv']];\r\n    }\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (tree, serverValues) {\r\n    var resolvedTree = new SparseSnapshotTree();\r\n    tree.forEachTree(new Path(''), function (path, node) {\r\n        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\r\n    });\r\n    return resolvedTree;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredValue(rawPri, serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ affectedTree, \r\n    /**@inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        util.forEach(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /**@inheritDoc */ source, \r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util.assert(type == Change.CHILD_ADDED ||\r\n            type == Change.CHILD_CHANGED ||\r\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap\r\n                        .getNode()\r\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey == '.priority') {\r\n                    util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey == '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\r\n        this.views_ = {};\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.views_);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = util.safeGet(this.views_, queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events_1 = [];\r\n            util.forEach(this.views_, function (key, view) {\r\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n            });\r\n            return events_1;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = util.safeGet(this.views_, queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views_[queryId] = view;\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            // When you do ref.off(...), we search all views for the registration to remove.\r\n            var self_1 = this;\r\n            util.forEach(this.views_, function (viewQueryId, view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete self_1.views_[viewQueryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = util.safeGet(this.views_, queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete this.views_[queryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var _this = this;\r\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\r\n        return values.filter(function (view) {\r\n            return !view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var serverCache = null;\r\n        util.forEach(this.views_, function (key, view) {\r\n            serverCache = serverCache || view.getCompleteServerCache(path);\r\n        });\r\n        return serverCache;\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return util.safeGet(this.views_, queryId);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    /**\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var completeView = util.findValue(this.views_, function (view) {\r\n            return view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n        return completeView || null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        util.forEach(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\r\n    };\r\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\r\n        if (writeTree.value != null) {\r\n            // Since there a write is always a leaf, we're done here\r\n            return node.updateChild(relativePath, writeTree.value);\r\n        }\r\n        else {\r\n            var priorityWrite_1 = null;\r\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n                if (childKey === '.priority') {\r\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                    // to apply priorities to empty nodes that are later filled\r\n                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                    priorityWrite_1 = childTree.value;\r\n                }\r\n                else {\r\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\r\n                }\r\n            });\r\n            // If there was a priority write, we only apply it if the node is not empty\r\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n            }\r\n            return node;\r\n        }\r\n    };\r\n    return CompoundWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                util.forEach(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            // findKey can return undefined, so use !! to coerce to boolean\r\n            return !!util.findKey(writeRecord.children, function (childSnap, childName) {\r\n                return writeRecord.path.child(childName).contains(path);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap_ = {};\r\n        this.queryToTagMap_ = {};\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                util.forEach(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap_[queryKey] = tag;\r\n            // Coerce to string to avoid sparse arrays.\r\n            this.tagToQueryMap_['_' + tag] = queryKey;\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                else {\r\n                    // There's nothing below us, so nothing we need to start listening on\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        else {\r\n            // No-op, this listener must've been already removed\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                util.forEach(childMap, function (key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\r\n                delete this.queryToTagMap_[removedQueryKey];\r\n                delete this.tagToQueryMap_['_' + removedQueryTag];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return /** @type {!Query} */ query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    util.forEach(childMap, function (key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error$$1 = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error$$1);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap_['_' + tag];\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return util.safeGet(this.queryToTagMap_, queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\r\n    function AuthTokenProvider(app_) {\r\n        this.app_ = app_;\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \r\n        // .catch\r\n        function (error$$1) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error$$1 && error$$1.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error$$1);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name))\r\n            this.counters_[name] = 0;\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = util.clone(newStats);\r\n        if (this.last_) {\r\n            util.forEach(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        util.forEach(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger$1) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = this.listeners_[eventType].slice();\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, var_args);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_)\r\n                return;\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var command = args[0], arg1 = args[1], arg2 = args[2];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder)\r\n                    return; // we closed the connection.\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var pN = args[0], data = args[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (!util.isNodeSdk() &&\r\n                typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n        return (BrowserPollConnection.forceAllow_ ||\r\n            (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp() &&\r\n                !util.isNodeSdk()));\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk())\r\n            return;\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\r\n        this.outstandingRequests = new CountedSet();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n        }\r\n        else if (iframe.document) {\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        if (util.isNodeSdk() && this.myID) {\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            var theURL = this.urlFn(urlParams);\r\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial, 1);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.remove(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls)\r\n                        return;\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') == 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                this.mySock = new WebSocketImpl(this.connURL);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                this.log_(error$$1);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                _this.log_(error$$1);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length == this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null)\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable)\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports_1 = (this.transports_ = []);\r\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports_1.push(transport);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeout_ms > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n            }, Math.floor(healthyTimeout_ms));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ != 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ == 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\r\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        /** @private {Object} */\r\n        _this.interruptReasons_ = {};\r\n        _this.listens_ = {};\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        /** @private {number|null} */\r\n        _this.establishConnectionTimer_ = null;\r\n        /** @private {boolean} */\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\r\n        _this.realtime_ = null;\r\n        /** @private {string|null} */\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        this.listens_[pathString] = this.listens_[pathString] || {};\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens_[pathString][queryId] = listenSpec;\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined)\r\n            request[ /*hash*/'h'] = hash;\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete)\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        else if (action === 'm')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        else if (action === 'c')\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        else if (action === 'ac')\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        else if (action === 'sd')\r\n            this.onSecurityDebugPacket_(body);\r\n        else\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n        }, Math.floor(timeout));\r\n    };\r\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error$$1) {\r\n                self_1.log_('Failed to get token: ' + error$$1);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error$$1);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete)\r\n                    put.onComplete('disconnect');\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0)\r\n            this.outstandingPuts_ = [];\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete)\r\n            listen.onComplete('permission_denied');\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens_[normalizedPathString] !== undefined) {\r\n            listen = this.listens_[normalizedPathString][queryId];\r\n            delete this.listens_[normalizedPathString][queryId];\r\n            if (util.getCount(this.listens_[normalizedPathString]) === 0) {\r\n                delete this.listens_[normalizedPathString];\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var _this = this;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        util.forEach(this.listens_, function (pathString, queries) {\r\n            util.forEach(queries, function (key, listenSpec) {\r\n                _this.sendListen_(listenSpec);\r\n            });\r\n        });\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i])\r\n                this.sendPut_(i);\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParamaters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParamaters, function (error$$1, result) {\r\n            var data = result;\r\n            if (error$$1 === 404) {\r\n                data = null;\r\n                error$$1 = null;\r\n            }\r\n            if (error$$1 === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error$$1) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error$$1 == 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error$$1;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\r\n    function Repo(repoInfo_, forceRestClient, app) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        // A list of data pieces and paths to be set when this client disconnects.\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\r\n        this.persistentConnection_ = null;\r\n        /** @type {!AuthTokenProvider} */\r\n        var authTokenProvider = new AuthTokenProvider(app);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactions_init_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) {\r\n                    return nodeFromJSON$1(raw);\r\n                });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) {\r\n                return nodeFromJSON$1(raw);\r\n            });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (value, key) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        util.forEach(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            var newNodeUnresolved = nodeFromJSON$1(changedValue);\r\n            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            util.forEach(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                util.forEach(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined')\r\n            return;\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_)\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        util.forEach(stats, function (stat, value) {\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++)\r\n                stat += ' ';\r\n            console.log(stat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\r\n    Repo.prototype.log_ = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status == 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason)\r\n                        message += ': ' + errorReason;\r\n                    var error$$1 = new Error(message);\r\n                    error$$1.code = code;\r\n                    callback(error$$1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() == this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty())\r\n            return null;\r\n        else\r\n            return this.path.getBack();\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null)\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            else\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        if (applyLocally === undefined)\r\n            applyLocally = true;\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error$$1, committed, snapshot) {\r\n            if (error$$1) {\r\n                deferred.reject(error$$1);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error$$1, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next;\r\n        while ((next = path.getFront()) !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        util.forEach(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst)\r\n            action(this);\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst)\r\n            action(this);\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null)\r\n                action(child);\r\n            else\r\n                child.forEachImmediateDescendantWithValue(action);\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null)\r\n            this.parent_.updateChild_(this.name_, this);\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\nRepo.prototype.transactions_init_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    else\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    while ((front = path.getFront()) !== null &&\r\n        transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\r\n                // Already marked.  No action needed.\r\n            }\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].interrupt();\r\n            }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].resume();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.database.checkDeleted_('delete');\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                this.database.repo_ = null;\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\r\n        if (opt_hash !== undefined) {\r\n            opt_hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\r\nvar listens = function (firebaseRef) {\r\n    return firebaseRef.repo.persistentConnection_.listens_;\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, \r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    }, null, true);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.registerDatabase = registerDatabase;\nexports.Database = Database;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.enableLogging = enableLogging;\nexports.ServerValue = ServerValue;\nexports.DataSnapshot = DataSnapshot;\nexports.OnDisconnect = OnDisconnect;\n","/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel)\r\n        return;\r\n    var now = new Date().toISOString();\r\n    switch (logType) {\r\n        /**\r\n         * By default, `console.debug` is not displayed in the developer console (in\r\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n         * logs to the `console.log` function.\r\n         */\r\n        case LogLevel.DEBUG:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.VERBOSE:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.INFO:\r\n            console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.WARN:\r\n            console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.ERROR:\r\n            console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        default:\r\n            throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The log handler for the Logger instance.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in LogLevel)) {\r\n                throw new TypeError('Invalid value assigned to `logLevel`');\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n    };\r\n    return Logger;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.logLevel = level;\r\n    });\r\n}\n\nexport { setLogLevel, Logger, LogLevel };\n","import '@firebase/storage';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","import firebase from '@firebase/app';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain and scheme for API calls.\r\n */\r\nvar domainBase = 'https://firebasestorage.googleapis.com';\r\n/**\r\n * Domain and scheme for object downloads.\r\n */\r\nvar downloadBase = 'https://firebasestorage.googleapis.com';\r\n/**\r\n * Base URL for non-upload calls to the API.\r\n */\r\nvar apiBaseUrl = '/v0';\r\n/**\r\n * Base URL for upload calls to the API.\r\n */\r\nvar apiUploadBaseUrl = '/v0';\r\nvar configOption = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n */\r\nvar defaultMaxOperationRetryTime = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n */\r\nvar defaultMaxUploadRetryTime = 10 * 60 * 100;\r\n/**\r\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\r\n * enough for us to use it directly.\r\n */\r\nvar minSafeInteger = -9007199254740991;\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar FirebaseStorageError = /** @class */ (function () {\r\n    function FirebaseStorageError(code, message) {\r\n        this.code_ = prependCode(code);\r\n        this.message_ = 'Firebase Storage: ' + message;\r\n        this.serverResponse_ = null;\r\n        this.name_ = 'FirebaseError';\r\n    }\r\n    FirebaseStorageError.prototype.codeProp = function () {\r\n        return this.code;\r\n    };\r\n    FirebaseStorageError.prototype.codeEquals = function (code) {\r\n        return prependCode(code) === this.codeProp();\r\n    };\r\n    FirebaseStorageError.prototype.serverResponseProp = function () {\r\n        return this.serverResponse_;\r\n    };\r\n    FirebaseStorageError.prototype.setServerResponseProp = function (serverResponse) {\r\n        this.serverResponse_ = serverResponse;\r\n    };\r\n    Object.defineProperty(FirebaseStorageError.prototype, \"name\", {\r\n        get: function () {\r\n            return this.name_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseStorageError.prototype, \"code\", {\r\n        get: function () {\r\n            return this.code_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseStorageError.prototype, \"message\", {\r\n        get: function () {\r\n            return this.message_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseStorageError.prototype, \"serverResponse\", {\r\n        get: function () {\r\n            return this.serverResponse_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FirebaseStorageError;\r\n}());\r\nvar Code = {\r\n    // Shared between all platforms\r\n    UNKNOWN: 'unknown',\r\n    OBJECT_NOT_FOUND: 'object-not-found',\r\n    BUCKET_NOT_FOUND: 'bucket-not-found',\r\n    PROJECT_NOT_FOUND: 'project-not-found',\r\n    QUOTA_EXCEEDED: 'quota-exceeded',\r\n    UNAUTHENTICATED: 'unauthenticated',\r\n    UNAUTHORIZED: 'unauthorized',\r\n    RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\r\n    INVALID_CHECKSUM: 'invalid-checksum',\r\n    CANCELED: 'canceled',\r\n    // JS specific\r\n    INVALID_EVENT_NAME: 'invalid-event-name',\r\n    INVALID_URL: 'invalid-url',\r\n    INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\r\n    NO_DEFAULT_BUCKET: 'no-default-bucket',\r\n    CANNOT_SLICE_BLOB: 'cannot-slice-blob',\r\n    SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\r\n    NO_DOWNLOAD_URL: 'no-download-url',\r\n    INVALID_ARGUMENT: 'invalid-argument',\r\n    INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\r\n    APP_DELETED: 'app-deleted',\r\n    INVALID_ROOT_OPERATION: 'invalid-root-operation',\r\n    INVALID_FORMAT: 'invalid-format',\r\n    INTERNAL_ERROR: 'internal-error'\r\n};\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    var message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new FirebaseStorageError(Code.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new FirebaseStorageError(Code.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    var message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorized(path) {\r\n    return new FirebaseStorageError(Code.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new FirebaseStorageError(Code.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction invalidArgument(index, fnName, message) {\r\n    return new FirebaseStorageError(Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);\r\n}\r\nfunction invalidArgumentCount(argMin, argMax, fnName, real) {\r\n    var countPart;\r\n    var plural;\r\n    if (argMin === argMax) {\r\n        countPart = argMin;\r\n        plural = argMin === 1 ? 'argument' : 'arguments';\r\n    }\r\n    else {\r\n        countPart = 'between ' + argMin + ' and ' + argMax;\r\n        plural = 'arguments';\r\n    }\r\n    return new FirebaseStorageError(Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' +\r\n        fnName +\r\n        '`: Expected ' +\r\n        countPart +\r\n        ' ' +\r\n        plural +\r\n        ', received ' +\r\n        real +\r\n        '.');\r\n}\r\nfunction appDeleted() {\r\n    return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name The name of the operation that was invalid.\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format The format that was not valid.\r\n * @param message A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new FirebaseStorageError(Code.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StringFormat = {\r\n    RAW: 'raw',\r\n    BASE64: 'base64',\r\n    BASE64URL: 'base64url',\r\n    DATA_URL: 'data_url'\r\n};\r\nfunction formatValidator(stringFormat) {\r\n    switch (stringFormat) {\r\n        case StringFormat.RAW:\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n        case StringFormat.DATA_URL:\r\n            return;\r\n        default:\r\n            throw 'Expected one of the event types: [' +\r\n                StringFormat.RAW +\r\n                ', ' +\r\n                StringFormat.BASE64 +\r\n                ', ' +\r\n                StringFormat.BASE64URL +\r\n                ', ' +\r\n                StringFormat.DATA_URL +\r\n                '].';\r\n    }\r\n}\r\n/**\r\n * @struct\r\n */\r\nvar StringData = /** @class */ (function () {\r\n    function StringData(data, opt_contentType) {\r\n        this.data = data;\r\n        this.contentType = opt_contentType || null;\r\n    }\r\n    return StringData;\r\n}());\r\nfunction dataFromString(format, string) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(string));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, string));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(string), dataURLContentType_(string));\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(string) {\r\n    var b = [];\r\n    for (var i = 0; i < string.length; i++) {\r\n        var c = string.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) == 55296) {\r\n                    // The start of a surrogate pair.\r\n                    var valid = i < string.length - 1 &&\r\n                        (string.charCodeAt(i + 1) & 64512) == 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        var hi = c;\r\n                        var lo = string.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) == 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(string) {\r\n    var decoded;\r\n    try {\r\n        decoded = decodeURIComponent(string);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, string) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            var hasMinus = string.indexOf('-') !== -1;\r\n            var hasUnder = string.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                var invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            var hasPlus = string.indexOf('+') !== -1;\r\n            var hasSlash = string.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                var invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            string = string.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n    }\r\n    var bytes;\r\n    try {\r\n        bytes = atob(string);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    var array = new Uint8Array(bytes.length);\r\n    for (var i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\n/**\r\n * @struct\r\n */\r\nvar DataURLParts = /** @class */ (function () {\r\n    function DataURLParts(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        var matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        var middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n    return DataURLParts;\r\n}());\r\nfunction dataURLBytes_(string) {\r\n    var parts = new DataURLParts(string);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(string) {\r\n    var parts = new DataURLParts(string);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    var longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TaskEvent = {\r\n    /** Triggered whenever the task changes or progress is updated. */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\nvar InternalTaskState = {\r\n    RUNNING: 'running',\r\n    PAUSING: 'pausing',\r\n    PAUSED: 'paused',\r\n    SUCCESS: 'success',\r\n    CANCELING: 'canceling',\r\n    CANCELED: 'canceled',\r\n    ERROR: 'error'\r\n};\r\nvar TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case InternalTaskState.RUNNING:\r\n        case InternalTaskState.PAUSING:\r\n        case InternalTaskState.CANCELING:\r\n            return TaskState.RUNNING;\r\n        case InternalTaskState.PAUSED:\r\n            return TaskState.PAUSED;\r\n        case InternalTaskState.SUCCESS:\r\n            return TaskState.SUCCESS;\r\n        case InternalTaskState.CANCELED:\r\n            return TaskState.CANCELED;\r\n        case InternalTaskState.ERROR:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains methods for working with objects.\r\n */\r\nfunction contains(obj, prop) {\r\n    return Object.prototype.hasOwnProperty.call(obj, prop);\r\n}\r\nfunction forEach(obj, f) {\r\n    for (var key in obj) {\r\n        if (contains(obj, key)) {\r\n            f(key, obj[key]);\r\n        }\r\n    }\r\n}\r\nfunction clone(obj) {\r\n    if (obj == null) {\r\n        return {};\r\n    }\r\n    var c = {};\r\n    forEach(obj, function (key, val) {\r\n        c[key] = val;\r\n    });\r\n    return c;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Implements the promise abstraction interface for external\r\n * (public SDK) packaging, which just passes through to the firebase-app impl.\r\n */\r\n/**\r\n * @template T\r\n * @param {function((function(T): void),\r\n *                  (function(!Error): void))} resolver\r\n */\r\nfunction make(resolver) {\r\n    return new Promise(resolver);\r\n}\r\n/**\r\n * @template T\r\n */\r\nfunction resolve(value) {\r\n    return Promise.resolve(value);\r\n}\r\nfunction reject(error) {\r\n    return Promise.reject(error);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @return False if the object is undefined or null, true otherwise.\r\n */\r\nfunction isDef(p) {\r\n    return p != null;\r\n}\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isObject(p) {\r\n    return typeof p === 'object';\r\n}\r\nfunction isNonNullObject(p) {\r\n    return isObject(p) && p !== null;\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return isObject(p) && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNumber(p) {\r\n    return typeof p === 'number' || p instanceof Number;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    return typeof Blob !== 'undefined';\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @enum{number}\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\r\n * doesn't work in React Native on Android.\r\n */\r\nvar NetworkXhrIo = /** @class */ (function () {\r\n    function NetworkXhrIo() {\r\n        var _this = this;\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = make(function (resolve$$1, reject$$1) {\r\n            _this.xhr_.addEventListener('abort', function (event) {\r\n                _this.errorCode_ = ErrorCode.ABORT;\r\n                resolve$$1(_this);\r\n            });\r\n            _this.xhr_.addEventListener('error', function (event) {\r\n                _this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve$$1(_this);\r\n            });\r\n            _this.xhr_.addEventListener('load', function (event) {\r\n                resolve$$1(_this);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @override\r\n     */\r\n    NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {\r\n        var _this = this;\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (isDef(opt_headers)) {\r\n            var headers = opt_headers;\r\n            forEach(headers, function (key, val) {\r\n                _this.xhr_.setRequestHeader(key, val.toString());\r\n            });\r\n        }\r\n        if (isDef(opt_body)) {\r\n            this.xhr_.send(opt_body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    };\r\n    /**\r\n     * @override\r\n     */\r\n    NetworkXhrIo.prototype.getErrorCode = function () {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    };\r\n    /**\r\n     * @override\r\n     */\r\n    NetworkXhrIo.prototype.getStatus = function () {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    };\r\n    /**\r\n     * @override\r\n     */\r\n    NetworkXhrIo.prototype.getResponseText = function () {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponseText() before sending');\r\n        }\r\n        return this.xhr_.responseText;\r\n    };\r\n    /**\r\n     * Aborts the request.\r\n     * @override\r\n     */\r\n    NetworkXhrIo.prototype.abort = function () {\r\n        this.xhr_.abort();\r\n    };\r\n    /**\r\n     * @override\r\n     */\r\n    NetworkXhrIo.prototype.getResponseHeader = function (header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    };\r\n    /**\r\n     * @override\r\n     */\r\n    NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\r\n        if (isDef(this.xhr_.upload)) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    };\r\n    /**\r\n     * @override\r\n     */\r\n    NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\r\n        if (isDef(this.xhr_.upload)) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    };\r\n    return NetworkXhrIo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\r\nvar XhrIoPool = /** @class */ (function () {\r\n    function XhrIoPool() {\r\n    }\r\n    XhrIoPool.prototype.createXhrIo = function () {\r\n        return new NetworkXhrIo();\r\n    };\r\n    return XhrIoPool;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    var obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @struct\r\n */\r\nvar Location = /** @class */ (function () {\r\n    function Location(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    Object.defineProperty(Location.prototype, \"path\", {\r\n        get: function () {\r\n            return this.path_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Location.prototype.fullServerUrl = function () {\r\n        var encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    };\r\n    Location.prototype.bucketOnlyServerUrl = function () {\r\n        var encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    };\r\n    Location.makeFromBucketSpec = function (bucketString) {\r\n        var bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    };\r\n    Location.makeFromUrl = function (url) {\r\n        var location = null;\r\n        var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        var gsPath = '(/(.*))?$';\r\n        var path = '(/([^?#]*).*)?$';\r\n        var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        var gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        var version = 'v[A-Za-z0-9_]+';\r\n        var httpRegex = new RegExp('^https?://firebasestorage\\\\.googleapis\\\\.com/' +\r\n            version +\r\n            '/b/' +\r\n            bucketDomain +\r\n            '/o' +\r\n            path, 'i');\r\n        var httpIndices = { bucket: 1, path: 3 };\r\n        var groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            { regex: httpRegex, indices: httpIndices, postModify: httpModify }\r\n        ];\r\n        for (var i = 0; i < groups.length; i++) {\r\n            var group = groups[i];\r\n            var captures = group.regex.exec(url);\r\n            if (captures) {\r\n                var bucketValue = captures[group.indices.bucket];\r\n                var pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    };\r\n    return Location;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length == 0) {\r\n        return null;\r\n    }\r\n    var index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    var newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    var canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(function (component) {\r\n        return component.length > 0;\r\n    })\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    var index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeNormalUrl(urlPart) {\r\n    return domainBase + apiBaseUrl + urlPart;\r\n}\r\nfunction makeDownloadUrl(urlPart) {\r\n    return downloadBase + apiBaseUrl + urlPart;\r\n}\r\nfunction makeUploadUrl(urlPart) {\r\n    return domainBase + apiUploadBaseUrl + urlPart;\r\n}\r\nfunction makeQueryString(params) {\r\n    var encode = encodeURIComponent;\r\n    var queryPart = '?';\r\n    forEach(params, function (key, val) {\r\n        var nextPart = encode(key) + '=' + encode(val);\r\n        queryPart = queryPart + nextPart + '&';\r\n    });\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\n/**\r\n * @struct\r\n */\r\nvar Mapping = /** @class */ (function () {\r\n    function Mapping(server, opt_local, opt_writable, opt_xform) {\r\n        this.server = server;\r\n        this.local = opt_local || server;\r\n        this.writable = !!opt_writable;\r\n        this.xform = opt_xform || noXform_;\r\n    }\r\n    return Mapping;\r\n}());\r\nvar mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    var valid = isString(fullPath);\r\n    if (!valid || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        fullPath = fullPath;\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    var mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    var nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(metadata, size) {\r\n        if (isDef(size)) {\r\n            return +size;\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    var sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, authWrapper) {\r\n    function generateRef() {\r\n        var bucket = metadata['bucket'];\r\n        var path = metadata['fullPath'];\r\n        var loc = new Location(bucket, path);\r\n        return authWrapper.makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(authWrapper, resource, mappings) {\r\n    var metadata = {};\r\n    metadata['type'] = 'file';\r\n    var len = mappings.length;\r\n    for (var i = 0; i < len; i++) {\r\n        var mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, authWrapper);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(authWrapper, resourceString, mappings) {\r\n    var obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    var resource = obj;\r\n    return fromResource(authWrapper, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString) {\r\n    var obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    var tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    var encode = encodeURIComponent;\r\n    var tokensList = tokens.split(',');\r\n    var urls = tokensList.map(function (token) {\r\n        var bucket = metadata['bucket'];\r\n        var path = metadata['fullPath'];\r\n        var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        var base = makeDownloadUrl(urlPart);\r\n        var queryString = makeQueryString({\r\n            alt: 'media',\r\n            token: token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    var resource = {};\r\n    var len = mappings.length;\r\n    for (var i = 0; i < len; i++) {\r\n        var mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\r\nfunction metadataValidator(p) {\r\n    var validType = p && isObject(p);\r\n    if (!validType) {\r\n        throw 'Expected Metadata object.';\r\n    }\r\n    for (var key in p) {\r\n        var val = p[key];\r\n        if (key === 'customMetadata') {\r\n            if (!isObject(val)) {\r\n                throw 'Expected object for \\'customMetadata\\' mapping.';\r\n            }\r\n        }\r\n        else {\r\n            if (isNonNullObject(val)) {\r\n                throw \"Mapping for '\" + key + \"' cannot be an object.\";\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param name Name of the function.\r\n * @param specs Argument specs.\r\n * @param passed The actual arguments passed to the function.\r\n * @throws {fbs.Error} If the arguments are invalid.\r\n */\r\nfunction validate(name, specs, passed) {\r\n    var minArgs = specs.length;\r\n    var maxArgs = specs.length;\r\n    for (var i = 0; i < specs.length; i++) {\r\n        if (specs[i].optional) {\r\n            minArgs = i;\r\n            break;\r\n        }\r\n    }\r\n    var validLength = minArgs <= passed.length && passed.length <= maxArgs;\r\n    if (!validLength) {\r\n        throw invalidArgumentCount(minArgs, maxArgs, name, passed.length);\r\n    }\r\n    for (var i = 0; i < passed.length; i++) {\r\n        try {\r\n            specs[i].validator(passed[i]);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof Error) {\r\n                throw invalidArgument(i, name, e.message);\r\n            }\r\n            else {\r\n                throw invalidArgument(i, name, e);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @struct\r\n */\r\nvar ArgSpec = /** @class */ (function () {\r\n    function ArgSpec(validator, opt_optional) {\r\n        var self = this;\r\n        this.validator = function (p) {\r\n            if (self.optional && !isJustDef(p)) {\r\n                return;\r\n            }\r\n            validator(p);\r\n        };\r\n        this.optional = !!opt_optional;\r\n    }\r\n    return ArgSpec;\r\n}());\r\nfunction and_(v1, v2) {\r\n    return function (p) {\r\n        v1(p);\r\n        v2(p);\r\n    };\r\n}\r\nfunction stringSpec(opt_validator, opt_optional) {\r\n    function stringValidator(p) {\r\n        if (!isString(p)) {\r\n            throw 'Expected string.';\r\n        }\r\n    }\r\n    var validator;\r\n    if (opt_validator) {\r\n        validator = and_(stringValidator, opt_validator);\r\n    }\r\n    else {\r\n        validator = stringValidator;\r\n    }\r\n    return new ArgSpec(validator, opt_optional);\r\n}\r\nfunction uploadDataSpec() {\r\n    function validator(p) {\r\n        var valid = p instanceof Uint8Array ||\r\n            p instanceof ArrayBuffer ||\r\n            (isNativeBlobDefined() && p instanceof Blob);\r\n        if (!valid) {\r\n            throw 'Expected Blob or File.';\r\n        }\r\n    }\r\n    return new ArgSpec(validator);\r\n}\r\nfunction metadataSpec(opt_optional) {\r\n    return new ArgSpec(metadataValidator, opt_optional);\r\n}\r\nfunction nonNegativeNumberSpec() {\r\n    function validator(p) {\r\n        var valid = isNumber(p) && p >= 0;\r\n        if (!valid) {\r\n            throw 'Expected a number 0 or greater.';\r\n        }\r\n    }\r\n    return new ArgSpec(validator);\r\n}\r\nfunction looseObjectSpec(opt_validator, opt_optional) {\r\n    function validator(p) {\r\n        var isLooseObject = p === null || (isDef(p) && p instanceof Object);\r\n        if (!isLooseObject) {\r\n            throw 'Expected an Object.';\r\n        }\r\n        if (opt_validator !== undefined && opt_validator !== null) {\r\n            opt_validator(p);\r\n        }\r\n    }\r\n    return new ArgSpec(validator, opt_optional);\r\n}\r\nfunction nullFunctionSpec(opt_optional) {\r\n    function validator(p) {\r\n        var valid = p === null || isFunction(p);\r\n        if (!valid) {\r\n            throw 'Expected a Function.';\r\n        }\r\n    }\r\n    return new ArgSpec(validator, opt_optional);\r\n}\n\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param var_args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob() {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        var bb = new BlobBuilder();\r\n        for (var i = 0; i < var_args.length; i++) {\r\n            bb.append(var_args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(var_args);\r\n        }\r\n        else {\r\n            throw Error(\"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n */\r\nvar FbsBlob = /** @class */ (function () {\r\n    function FbsBlob(data, opt_elideCopy) {\r\n        var size = 0;\r\n        var blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (opt_elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (opt_elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    FbsBlob.prototype.size = function () {\r\n        return this.size_;\r\n    };\r\n    FbsBlob.prototype.type = function () {\r\n        return this.type_;\r\n    };\r\n    FbsBlob.prototype.slice = function (startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            var realBlob = this.data_;\r\n            var sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    };\r\n    FbsBlob.getBlob = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        if (isNativeBlobDefined()) {\r\n            var blobby = var_args.map(function (val) {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob.apply(null, blobby));\r\n        }\r\n        else {\r\n            var uint8Arrays = var_args.map(function (val) {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            var finalLength_1 = 0;\r\n            uint8Arrays.forEach(function (array) {\r\n                finalLength_1 += array.byteLength;\r\n            });\r\n            var merged_1 = new Uint8Array(finalLength_1);\r\n            var index_1 = 0;\r\n            uint8Arrays.forEach(function (array) {\r\n                for (var i = 0; i < array.length; i++) {\r\n                    merged_1[index_1++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged_1, true);\r\n        }\r\n    };\r\n    FbsBlob.prototype.uploadData = function () {\r\n        return this.data_;\r\n    };\r\n    return FbsBlob;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns true if the object is contained in the array (compared with ===).\r\n * @template T\r\n */\r\nfunction contains$1(array, elem) {\r\n    return array.indexOf(elem) !== -1;\r\n}\r\n/**\r\n * Returns a shallow copy of the array or array-like object (e.g. arguments).\r\n * @template T\r\n */\r\nfunction clone$1(arraylike) {\r\n    return Array.prototype.slice.call(arraylike);\r\n}\r\n/**\r\n * Removes the given element from the given array, if it is contained.\r\n * Directly modifies the passed-in array.\r\n * @template T\r\n */\r\nfunction remove(array, elem) {\r\n    var i = array.indexOf(elem);\r\n    if (i !== -1) {\r\n        array.splice(i, 1);\r\n    }\r\n}\n\nvar RequestInfo = /** @class */ (function () {\r\n    function RequestInfo(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n    return RequestInfo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(authWrapper, mappings) {\r\n    function handler(xhr, text) {\r\n        var metadata = fromResourceString(authWrapper, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(authWrapper, mappings) {\r\n    function handler(xhr, text) {\r\n        var metadata = fromResourceString(authWrapper, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        var newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            newErr = unauthenticated();\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.setServerResponseProp(err.serverResponseProp());\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    var shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        var newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.setServerResponseProp(err.serverResponseProp());\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata(authWrapper, location, mappings) {\r\n    var urlPart = location.fullServerUrl();\r\n    var url = makeNormalUrl(urlPart);\r\n    var method = 'GET';\r\n    var timeout = authWrapper.maxOperationRetryTime();\r\n    var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(authWrapper, location, mappings) {\r\n    var urlPart = location.fullServerUrl();\r\n    var url = makeNormalUrl(urlPart);\r\n    var method = 'GET';\r\n    var timeout = authWrapper.maxOperationRetryTime();\r\n    var requestInfo = new RequestInfo(url, method, downloadUrlHandler(authWrapper, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata(authWrapper, location, metadata, mappings) {\r\n    var urlPart = location.fullServerUrl();\r\n    var url = makeNormalUrl(urlPart);\r\n    var method = 'PATCH';\r\n    var body = toResourceString(metadata, mappings);\r\n    var headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    var timeout = authWrapper.maxOperationRetryTime();\r\n    var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject(authWrapper, location) {\r\n    var urlPart = location.fullServerUrl();\r\n    var url = makeNormalUrl(urlPart);\r\n    var method = 'DELETE';\r\n    var timeout = authWrapper.maxOperationRetryTime();\r\n    function handler(xhr, text) { }\r\n    var requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, opt_metadata) {\r\n    var metadata = clone(opt_metadata);\r\n    metadata['fullPath'] = location.path;\r\n    metadata['size'] = blob.size();\r\n    if (!metadata['contentType']) {\r\n        metadata['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadata;\r\n}\r\nfunction multipartUpload(authWrapper, location, mappings, blob, opt_metadata) {\r\n    var urlPart = location.bucketOnlyServerUrl();\r\n    var headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        var str = '';\r\n        for (var i = 0; i < 2; i++) {\r\n            str =\r\n                str +\r\n                    Math.random()\r\n                        .toString()\r\n                        .slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    var boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    var metadata = metadataForUpload_(location, blob, opt_metadata);\r\n    var metadataString = toResourceString(metadata, mappings);\r\n    var preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    var postBlobPart = '\\r\\n--' + boundary + '--';\r\n    var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    var urlParams = { name: metadata['fullPath'] };\r\n    var url = makeUploadUrl(urlPart);\r\n    var method = 'POST';\r\n    var timeout = authWrapper.maxUploadRetryTime();\r\n    var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n * @struct\r\n */\r\nvar ResumableUploadStatus = /** @class */ (function () {\r\n    function ResumableUploadStatus(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n    return ResumableUploadStatus;\r\n}());\r\nfunction checkResumeHeader_(xhr, opt_allowed) {\r\n    var status;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    var allowed = opt_allowed || ['active'];\r\n    handlerCheck(contains$1(allowed, status));\r\n    return status;\r\n}\r\nfunction createResumableUpload(authWrapper, location, mappings, blob, opt_metadata) {\r\n    var urlPart = location.bucketOnlyServerUrl();\r\n    var metadata = metadataForUpload_(location, blob, opt_metadata);\r\n    var urlParams = { name: metadata['fullPath'] };\r\n    var url = makeUploadUrl(urlPart);\r\n    var method = 'POST';\r\n    var headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': blob.size(),\r\n        'X-Goog-Upload-Header-Content-Type': metadata['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    var body = toResourceString(metadata, mappings);\r\n    var timeout = authWrapper.maxUploadRetryTime();\r\n    function handler(xhr, text) {\r\n        checkResumeHeader_(xhr);\r\n        var url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    var requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(authWrapper, location, url, blob) {\r\n    var headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr, text) {\r\n        var status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        var sizeString;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        var size = parseInt(sizeString, 10);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    var method = 'POST';\r\n    var timeout = authWrapper.maxUploadRetryTime();\r\n    var requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nvar resumableUploadChunkSize = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param opt_status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, opt_status, opt_progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    var status = new ResumableUploadStatus(0, 0);\r\n    if (opt_status) {\r\n        status.current = opt_status.current;\r\n        status.total = opt_status.total;\r\n    }\r\n    else {\r\n        status.current = 0;\r\n        status.total = blob.size();\r\n    }\r\n    if (blob.size() !== status.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    var bytesLeft = status.total - status.current;\r\n    var bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    var startByte = status.current;\r\n    var endByte = startByte + bytesToUpload;\r\n    var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\r\n    var headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': status.current\r\n    };\r\n    var body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        var newCurrent = status.current + bytesToUpload;\r\n        var size = blob.size();\r\n        var metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(authWrapper, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    var method = 'POST';\r\n    var timeout = authWrapper.maxUploadRetryTime();\r\n    var requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = opt_progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @struct\r\n */\r\nvar Observer = /** @class */ (function () {\r\n    function Observer(nextOrObserver, opt_error, opt_complete) {\r\n        var asFunctions = isFunction(nextOrObserver) ||\r\n            isDef(opt_error) ||\r\n            isDef(opt_complete);\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = opt_error || null;\r\n            this.complete = opt_complete || null;\r\n        }\r\n        else {\r\n            var observer = nextOrObserver;\r\n            this.next = observer.next || null;\r\n            this.error = observer.error || null;\r\n            this.complete = observer.complete || null;\r\n        }\r\n    }\r\n    return Observer;\r\n}());\n\nvar UploadTaskSnapshot = /** @class */ (function () {\r\n    function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {\r\n        this.bytesTransferred = bytesTransferred;\r\n        this.totalBytes = totalBytes;\r\n        this.state = state;\r\n        this.metadata = metadata;\r\n        this.task = task;\r\n        this.ref = ref;\r\n    }\r\n    return UploadTaskSnapshot;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\nfunction async(f) {\r\n    return function () {\r\n        var argsToForward = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            argsToForward[_i] = arguments[_i];\r\n        }\r\n        resolve(true).then(function () {\r\n            f.apply(null, argsToForward);\r\n        });\r\n    };\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n */\r\nvar UploadTask = /** @class */ (function () {\r\n    /**\r\n     * @param ref The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob The blob to upload.\r\n     */\r\n    function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {\r\n        if (metadata === void 0) { metadata = null; }\r\n        var _this = this;\r\n        this.transferred_ = 0;\r\n        this.needToFetchStatus_ = false;\r\n        this.needToFetchMetadata_ = false;\r\n        this.observers_ = [];\r\n        this.error_ = null;\r\n        this.uploadUrl_ = null;\r\n        this.request_ = null;\r\n        this.chunkMultiplier_ = 1;\r\n        this.resolve_ = null;\r\n        this.reject_ = null;\r\n        this.ref_ = ref;\r\n        this.authWrapper_ = authWrapper;\r\n        this.location_ = location;\r\n        this.blob_ = blob;\r\n        this.metadata_ = metadata;\r\n        this.mappings_ = mappings;\r\n        this.resumable_ = this.shouldDoResumable_(this.blob_);\r\n        this.state_ = InternalTaskState.RUNNING;\r\n        this.errorHandler_ = function (error) {\r\n            _this.request_ = null;\r\n            _this.chunkMultiplier_ = 1;\r\n            if (error.codeEquals(Code.CANCELED)) {\r\n                _this.needToFetchStatus_ = true;\r\n                _this.completeTransitions_();\r\n            }\r\n            else {\r\n                _this.error_ = error;\r\n                _this.transition_(InternalTaskState.ERROR);\r\n            }\r\n        };\r\n        this.metadataErrorHandler_ = function (error) {\r\n            _this.request_ = null;\r\n            if (error.codeEquals(Code.CANCELED)) {\r\n                _this.completeTransitions_();\r\n            }\r\n            else {\r\n                _this.error_ = error;\r\n                _this.transition_(InternalTaskState.ERROR);\r\n            }\r\n        };\r\n        this.promise_ = make(function (resolve$$1, reject$$1) {\r\n            _this.resolve_ = resolve$$1;\r\n            _this.reject_ = reject$$1;\r\n            _this.start_();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this.promise_.then(null, function () { });\r\n    }\r\n    UploadTask.prototype.makeProgressCallback_ = function () {\r\n        var _this = this;\r\n        var sizeBefore = this.transferred_;\r\n        return function (loaded, total) {\r\n            _this.updateProgress_(sizeBefore + loaded);\r\n        };\r\n    };\r\n    UploadTask.prototype.shouldDoResumable_ = function (blob) {\r\n        return blob.size() > 256 * 1024;\r\n    };\r\n    UploadTask.prototype.start_ = function () {\r\n        if (this.state_ !== InternalTaskState.RUNNING) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this.request_ !== null) {\r\n            return;\r\n        }\r\n        if (this.resumable_) {\r\n            if (this.uploadUrl_ === null) {\r\n                this.createResumable_();\r\n            }\r\n            else {\r\n                if (this.needToFetchStatus_) {\r\n                    this.fetchStatus_();\r\n                }\r\n                else {\r\n                    if (this.needToFetchMetadata_) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this.fetchMetadata_();\r\n                    }\r\n                    else {\r\n                        this.continueUpload_();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.oneShotUpload_();\r\n        }\r\n    };\r\n    UploadTask.prototype.resolveToken_ = function (callback) {\r\n        var _this = this;\r\n        this.authWrapper_.getAuthToken().then(function (authToken) {\r\n            switch (_this.state_) {\r\n                case InternalTaskState.RUNNING:\r\n                    callback(authToken);\r\n                    break;\r\n                case InternalTaskState.CANCELING:\r\n                    _this.transition_(InternalTaskState.CANCELED);\r\n                    break;\r\n                case InternalTaskState.PAUSING:\r\n                    _this.transition_(InternalTaskState.PAUSED);\r\n                    break;\r\n                default:\r\n            }\r\n        });\r\n    };\r\n    // TODO(andysoto): assert false\r\n    UploadTask.prototype.createResumable_ = function () {\r\n        var _this = this;\r\n        this.resolveToken_(function (authToken) {\r\n            var requestInfo = createResumableUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);\r\n            var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\r\n            _this.request_ = createRequest;\r\n            createRequest.getPromise().then(function (url) {\r\n                _this.request_ = null;\r\n                _this.uploadUrl_ = url;\r\n                _this.needToFetchStatus_ = false;\r\n                _this.completeTransitions_();\r\n            }, _this.errorHandler_);\r\n        });\r\n    };\r\n    UploadTask.prototype.fetchStatus_ = function () {\r\n        var _this = this;\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        var url = this.uploadUrl_;\r\n        this.resolveToken_(function (authToken) {\r\n            var requestInfo = getResumableUploadStatus(_this.authWrapper_, _this.location_, url, _this.blob_);\r\n            var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\r\n            _this.request_ = statusRequest;\r\n            statusRequest.getPromise().then(function (status) {\r\n                status = status;\r\n                _this.request_ = null;\r\n                _this.updateProgress_(status.current);\r\n                _this.needToFetchStatus_ = false;\r\n                if (status.finalized) {\r\n                    _this.needToFetchMetadata_ = true;\r\n                }\r\n                _this.completeTransitions_();\r\n            }, _this.errorHandler_);\r\n        });\r\n    };\r\n    UploadTask.prototype.continueUpload_ = function () {\r\n        var _this = this;\r\n        var chunkSize = resumableUploadChunkSize * this.chunkMultiplier_;\r\n        var status = new ResumableUploadStatus(this.transferred_, this.blob_.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        var url = this.uploadUrl_;\r\n        this.resolveToken_(function (authToken) {\r\n            var requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());\r\n            }\r\n            catch (e) {\r\n                _this.error_ = e;\r\n                _this.transition_(InternalTaskState.ERROR);\r\n                return;\r\n            }\r\n            var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\r\n            _this.request_ = uploadRequest;\r\n            uploadRequest\r\n                .getPromise()\r\n                .then(function (newStatus) {\r\n                _this.increaseMultiplier_();\r\n                _this.request_ = null;\r\n                _this.updateProgress_(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    _this.metadata_ = newStatus.metadata;\r\n                    _this.transition_(InternalTaskState.SUCCESS);\r\n                }\r\n                else {\r\n                    _this.completeTransitions_();\r\n                }\r\n            }, _this.errorHandler_);\r\n        });\r\n    };\r\n    UploadTask.prototype.increaseMultiplier_ = function () {\r\n        var currentSize = resumableUploadChunkSize * this.chunkMultiplier_;\r\n        // Max chunk size is 32M.\r\n        if (currentSize < 32 * 1024 * 1024) {\r\n            this.chunkMultiplier_ *= 2;\r\n        }\r\n    };\r\n    UploadTask.prototype.fetchMetadata_ = function () {\r\n        var _this = this;\r\n        this.resolveToken_(function (authToken) {\r\n            var requestInfo = getMetadata(_this.authWrapper_, _this.location_, _this.mappings_);\r\n            var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\r\n            _this.request_ = metadataRequest;\r\n            metadataRequest.getPromise().then(function (metadata) {\r\n                _this.request_ = null;\r\n                _this.metadata_ = metadata;\r\n                _this.transition_(InternalTaskState.SUCCESS);\r\n            }, _this.metadataErrorHandler_);\r\n        });\r\n    };\r\n    UploadTask.prototype.oneShotUpload_ = function () {\r\n        var _this = this;\r\n        this.resolveToken_(function (authToken) {\r\n            var requestInfo = multipartUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);\r\n            var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\r\n            _this.request_ = multipartRequest;\r\n            multipartRequest.getPromise().then(function (metadata) {\r\n                _this.request_ = null;\r\n                _this.metadata_ = metadata;\r\n                _this.updateProgress_(_this.blob_.size());\r\n                _this.transition_(InternalTaskState.SUCCESS);\r\n            }, _this.errorHandler_);\r\n        });\r\n    };\r\n    UploadTask.prototype.updateProgress_ = function (transferred) {\r\n        var old = this.transferred_;\r\n        this.transferred_ = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this.transferred_ !== old) {\r\n            this.notifyObservers_();\r\n        }\r\n    };\r\n    UploadTask.prototype.transition_ = function (state) {\r\n        if (this.state_ === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case InternalTaskState.CANCELING:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this.state_ = state;\r\n                if (this.request_ !== null) {\r\n                    this.request_.cancel();\r\n                }\r\n                break;\r\n            case InternalTaskState.PAUSING:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING);\r\n                this.state_ = state;\r\n                if (this.request_ !== null) {\r\n                    this.request_.cancel();\r\n                }\r\n                break;\r\n            case InternalTaskState.RUNNING:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                var wasPaused = this.state_ === InternalTaskState.PAUSED;\r\n                this.state_ = state;\r\n                if (wasPaused) {\r\n                    this.notifyObservers_();\r\n                    this.start_();\r\n                }\r\n                break;\r\n            case InternalTaskState.PAUSED:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this.state_ = state;\r\n                this.notifyObservers_();\r\n                break;\r\n            case InternalTaskState.CANCELED:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this.error_ = canceled();\r\n                this.state_ = state;\r\n                this.notifyObservers_();\r\n                break;\r\n            case InternalTaskState.ERROR:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this.state_ = state;\r\n                this.notifyObservers_();\r\n                break;\r\n            case InternalTaskState.SUCCESS:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this.state_ = state;\r\n                this.notifyObservers_();\r\n                break;\r\n        }\r\n    };\r\n    UploadTask.prototype.completeTransitions_ = function () {\r\n        switch (this.state_) {\r\n            case InternalTaskState.PAUSING:\r\n                this.transition_(InternalTaskState.PAUSED);\r\n                break;\r\n            case InternalTaskState.CANCELING:\r\n                this.transition_(InternalTaskState.CANCELED);\r\n                break;\r\n            case InternalTaskState.RUNNING:\r\n                this.start_();\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                break;\r\n        }\r\n    };\r\n    Object.defineProperty(UploadTask.prototype, \"snapshot\", {\r\n        get: function () {\r\n            var externalState = taskStateFromInternalTaskState(this.state_);\r\n            return new UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type The type of event to listen for.\r\n     */\r\n    UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\r\n        if (nextOrObserver === void 0) { nextOrObserver = undefined; }\r\n        if (error === void 0) { error = undefined; }\r\n        if (completed === void 0) { completed = undefined; }\r\n        function typeValidator(_p) {\r\n            if (type !== TaskEvent.STATE_CHANGED) {\r\n                throw \"Expected one of the event types: [\" + TaskEvent.STATE_CHANGED + \"].\";\r\n            }\r\n        }\r\n        var nextOrObserverMessage = 'Expected a function or an Object with one of ' +\r\n            '`next`, `error`, `complete` properties.';\r\n        var nextValidator = nullFunctionSpec(true).validator;\r\n        var observerValidator = looseObjectSpec(null, true).validator;\r\n        function nextOrObserverValidator(p) {\r\n            try {\r\n                nextValidator(p);\r\n                return;\r\n            }\r\n            catch (e) { }\r\n            try {\r\n                observerValidator(p);\r\n                var anyDefined = isJustDef(p['next']) ||\r\n                    isJustDef(p['error']) ||\r\n                    isJustDef(p['complete']);\r\n                if (!anyDefined) {\r\n                    throw '';\r\n                }\r\n                return;\r\n            }\r\n            catch (e) {\r\n                throw nextOrObserverMessage;\r\n            }\r\n        }\r\n        var specs = [\r\n            stringSpec(typeValidator),\r\n            looseObjectSpec(nextOrObserverValidator, true),\r\n            nullFunctionSpec(true),\r\n            nullFunctionSpec(true)\r\n        ];\r\n        validate('on', specs, arguments);\r\n        var self = this;\r\n        function makeBinder(specs) {\r\n            function binder(nextOrObserver, error, opt_complete) {\r\n                if (specs !== null) {\r\n                    validate('on', specs, arguments);\r\n                }\r\n                var observer = new Observer(nextOrObserver, error, completed);\r\n                self.addObserver_(observer);\r\n                return function () {\r\n                    self.removeObserver_(observer);\r\n                };\r\n            }\r\n            return binder;\r\n        }\r\n        function binderNextOrObserverValidator(p) {\r\n            if (p === null) {\r\n                throw nextOrObserverMessage;\r\n            }\r\n            nextOrObserverValidator(p);\r\n        }\r\n        var binderSpecs = [\r\n            looseObjectSpec(binderNextOrObserverValidator),\r\n            nullFunctionSpec(true),\r\n            nullFunctionSpec(true)\r\n        ];\r\n        var typeOnly = !(isJustDef(nextOrObserver) ||\r\n            isJustDef(error) ||\r\n            isJustDef(completed));\r\n        if (typeOnly) {\r\n            return makeBinder(binderSpecs);\r\n        }\r\n        else {\r\n            return makeBinder(null)(nextOrObserver, error, completed);\r\n        }\r\n    };\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected The rejection callback.\r\n     */\r\n    UploadTask.prototype.then = function (onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this.promise_.then(onFulfilled, onRejected);\r\n    };\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    UploadTask.prototype.catch = function (onRejected) {\r\n        return this.then(null, onRejected);\r\n    };\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    UploadTask.prototype.addObserver_ = function (observer) {\r\n        this.observers_.push(observer);\r\n        this.notifyObserver_(observer);\r\n    };\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    UploadTask.prototype.removeObserver_ = function (observer) {\r\n        remove(this.observers_, observer);\r\n    };\r\n    UploadTask.prototype.notifyObservers_ = function () {\r\n        var _this = this;\r\n        this.finishPromise_();\r\n        var observers = clone$1(this.observers_);\r\n        observers.forEach(function (observer) {\r\n            _this.notifyObserver_(observer);\r\n        });\r\n    };\r\n    UploadTask.prototype.finishPromise_ = function () {\r\n        if (this.resolve_ !== null) {\r\n            var triggered = true;\r\n            switch (taskStateFromInternalTaskState(this.state_)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this.resolve_.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    var toCall = this.reject_;\r\n                    async(toCall.bind(null, this.error_))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this.resolve_ = null;\r\n                this.reject_ = null;\r\n            }\r\n        }\r\n    };\r\n    UploadTask.prototype.notifyObserver_ = function (observer) {\r\n        var externalState = taskStateFromInternalTaskState(this.state_);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next !== null) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete !== null) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error !== null) {\r\n                    async(observer.error.bind(observer, this.error_))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error !== null) {\r\n                    async(observer.error.bind(observer, this.error_))();\r\n                }\r\n        }\r\n    };\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @return True if the operation took effect, false if ignored.\r\n     */\r\n    UploadTask.prototype.resume = function () {\r\n        validate('resume', [], arguments);\r\n        var valid = this.state_ === InternalTaskState.PAUSED ||\r\n            this.state_ === InternalTaskState.PAUSING;\r\n        if (valid) {\r\n            this.transition_(InternalTaskState.RUNNING);\r\n        }\r\n        return valid;\r\n    };\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @return True if the operation took effect, false if ignored.\r\n     */\r\n    UploadTask.prototype.pause = function () {\r\n        validate('pause', [], arguments);\r\n        var valid = this.state_ === InternalTaskState.RUNNING;\r\n        if (valid) {\r\n            this.transition_(InternalTaskState.PAUSING);\r\n        }\r\n        return valid;\r\n    };\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @return True if the operation took effect, false if ignored.\r\n     */\r\n    UploadTask.prototype.cancel = function () {\r\n        validate('cancel', [], arguments);\r\n        var valid = this.state_ === InternalTaskState.RUNNING ||\r\n            this.state_ === InternalTaskState.PAUSING;\r\n        if (valid) {\r\n            this.transition_(InternalTaskState.CANCELING);\r\n        }\r\n        return valid;\r\n    };\r\n    return UploadTask;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @param location An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nvar Reference = /** @class */ (function () {\r\n    function Reference(authWrapper, location) {\r\n        this.authWrapper = authWrapper;\r\n        if (location instanceof Location) {\r\n            this.location = location;\r\n        }\r\n        else {\r\n            this.location = Location.makeFromUrl(location);\r\n        }\r\n    }\r\n    /**\r\n     * @return The URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    Reference.prototype.toString = function () {\r\n        validate('toString', [], arguments);\r\n        return 'gs://' + this.location.bucket + '/' + this.location.path;\r\n    };\r\n    Reference.prototype.newRef = function (authWrapper, location) {\r\n        return new Reference(authWrapper, location);\r\n    };\r\n    Reference.prototype.mappings = function () {\r\n        return getMappings();\r\n    };\r\n    /**\r\n     * @return A reference to the object obtained by\r\n     *     appending childPath, removing any duplicate, beginning, or trailing\r\n     *     slashes.\r\n     */\r\n    Reference.prototype.child = function (childPath) {\r\n        validate('child', [stringSpec()], arguments);\r\n        var newPath = child(this.location.path, childPath);\r\n        var location = new Location(this.location.bucket, newPath);\r\n        return this.newRef(this.authWrapper, location);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        /**\r\n         * @return A reference to the parent of the\r\n         *     current object, or null if the current object is the root.\r\n         */\r\n        get: function () {\r\n            var newPath = parent(this.location.path);\r\n            if (newPath === null) {\r\n                return null;\r\n            }\r\n            var location = new Location(this.location.bucket, newPath);\r\n            return this.newRef(this.authWrapper, location);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        /**\r\n         * @return An reference to the root of this\r\n         *     object's bucket.\r\n         */\r\n        get: function () {\r\n            var location = new Location(this.location.bucket, '');\r\n            return this.newRef(this.authWrapper, location);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"bucket\", {\r\n        get: function () {\r\n            return this.location.bucket;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"fullPath\", {\r\n        get: function () {\r\n            return this.location.path;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"name\", {\r\n        get: function () {\r\n            return lastComponent(this.location.path);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"storage\", {\r\n        get: function () {\r\n            return this.authWrapper.service();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data The blob to upload.\r\n     * @return An UploadTask that lets you control and\r\n     *     observe the upload.\r\n     */\r\n    Reference.prototype.put = function (data, metadata) {\r\n        if (metadata === void 0) { metadata = null; }\r\n        validate('put', [uploadDataSpec(), metadataSpec(true)], arguments);\r\n        this.throwIfRoot_('put');\r\n        return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data), metadata);\r\n    };\r\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param string The string to upload.\r\n     * @param opt_format The format of the string to upload.\r\n     * @return An UploadTask that lets you control and\r\n     *     observe the upload.\r\n     */\r\n    Reference.prototype.putString = function (string, format, opt_metadata) {\r\n        if (format === void 0) { format = StringFormat.RAW; }\r\n        validate('putString', [\r\n            stringSpec(),\r\n            stringSpec(formatValidator, true),\r\n            metadataSpec(true)\r\n        ], arguments);\r\n        this.throwIfRoot_('putString');\r\n        var data = dataFromString(format, string);\r\n        var metadata = clone(opt_metadata);\r\n        if (!isDef(metadata['contentType']) && isDef(data.contentType)) {\r\n            metadata['contentType'] = data.contentType;\r\n        }\r\n        return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data.data, true), metadata);\r\n    };\r\n    /**\r\n     * Deletes the object at this location.\r\n     * @return A promise that resolves if the deletion succeeds.\r\n     */\r\n    Reference.prototype.delete = function () {\r\n        validate('delete', [], arguments);\r\n        this.throwIfRoot_('delete');\r\n        var self = this;\r\n        return this.authWrapper.getAuthToken().then(function (authToken) {\r\n            var requestInfo = deleteObject(self.authWrapper, self.location);\r\n            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\r\n        });\r\n    };\r\n    /**\r\n     *     A promise that resolves with the metadata for this object. If this\r\n     *     object doesn't exist or metadata cannot be retreived, the promise is\r\n     *     rejected.\r\n     */\r\n    Reference.prototype.getMetadata = function () {\r\n        validate('getMetadata', [], arguments);\r\n        this.throwIfRoot_('getMetadata');\r\n        var self = this;\r\n        return this.authWrapper.getAuthToken().then(function (authToken) {\r\n            var requestInfo = getMetadata(self.authWrapper, self.location, self.mappings());\r\n            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\r\n        });\r\n    };\r\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata The new metadata for the object.\r\n     *     Only values that have been explicitly set will be changed. Explicitly\r\n     *     setting a value to null will remove the metadata.\r\n     * @return A promise that resolves\r\n     *     with the new metadata for this object.\r\n     *     @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\r\n    Reference.prototype.updateMetadata = function (metadata) {\r\n        validate('updateMetadata', [metadataSpec()], arguments);\r\n        this.throwIfRoot_('updateMetadata');\r\n        var self = this;\r\n        return this.authWrapper.getAuthToken().then(function (authToken) {\r\n            var requestInfo = updateMetadata(self.authWrapper, self.location, metadata, self.mappings());\r\n            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();\r\n        });\r\n    };\r\n    /**\r\n     * @return A promise that resolves with the download\r\n     *     URL for this object.\r\n     */\r\n    Reference.prototype.getDownloadURL = function () {\r\n        validate('getDownloadURL', [], arguments);\r\n        this.throwIfRoot_('getDownloadURL');\r\n        var self = this;\r\n        return this.authWrapper.getAuthToken().then(function (authToken) {\r\n            var requestInfo = getDownloadUrl(self.authWrapper, self.location, self.mappings());\r\n            return self.authWrapper\r\n                .makeRequest(requestInfo, authToken)\r\n                .getPromise()\r\n                .then(function (url) {\r\n                if (url === null) {\r\n                    throw noDownloadURL();\r\n                }\r\n                return url;\r\n            });\r\n        });\r\n    };\r\n    Reference.prototype.throwIfRoot_ = function (name) {\r\n        if (this.location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    };\r\n    return Reference;\r\n}());\n\n/**\r\n * A request whose promise always fails.\r\n * @struct\r\n * @template T\r\n */\r\nvar FailRequest = /** @class */ (function () {\r\n    function FailRequest(error) {\r\n        this.promise_ = reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    FailRequest.prototype.getPromise = function () {\r\n        return this.promise_;\r\n    };\r\n    /** @inheritDoc */\r\n    FailRequest.prototype.cancel = function (appDelete) {\r\n        if (appDelete === void 0) { appDelete = false; }\r\n    };\r\n    return FailRequest;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @struct\r\n */\r\nvar RequestMap = /** @class */ (function () {\r\n    function RequestMap() {\r\n        this.map_ = {};\r\n        this.id_ = minSafeInteger;\r\n    }\r\n    /**\r\n     * Registers the given request with this map.\r\n     * The request is unregistered when it completes.\r\n     * @param r The request to register.\r\n     */\r\n    RequestMap.prototype.addRequest = function (r) {\r\n        var id = this.id_;\r\n        this.id_++;\r\n        this.map_[id] = r;\r\n        var self = this;\r\n        function unmap() {\r\n            delete self.map_[id];\r\n        }\r\n        r.getPromise().then(unmap, unmap);\r\n    };\r\n    /**\r\n     * Cancels all registered requests.\r\n     */\r\n    RequestMap.prototype.clear = function () {\r\n        forEach(this.map_, function (key, val) {\r\n            if (val) {\r\n                val.cancel(true);\r\n            }\r\n        });\r\n        this.map_ = {};\r\n    };\r\n    return RequestMap;\r\n}());\n\n/**\r\n * @param app If null, getAuthToken always resolves with null.\r\n * @param service The storage service associated with this auth wrapper.\r\n *     Untyped to avoid circular type dependencies.\r\n * @struct\r\n */\r\nvar AuthWrapper = /** @class */ (function () {\r\n    function AuthWrapper(app, maker, requestMaker, service, pool) {\r\n        this.bucket_ = null;\r\n        this.deleted_ = false;\r\n        this.app_ = app;\r\n        if (this.app_ !== null) {\r\n            var options = this.app_.options;\r\n            if (isDef(options)) {\r\n                this.bucket_ = AuthWrapper.extractBucket_(options);\r\n            }\r\n        }\r\n        this.storageRefMaker_ = maker;\r\n        this.requestMaker_ = requestMaker;\r\n        this.pool_ = pool;\r\n        this.service_ = service;\r\n        this.maxOperationRetryTime_ = defaultMaxOperationRetryTime;\r\n        this.maxUploadRetryTime_ = defaultMaxUploadRetryTime;\r\n        this.requestMap_ = new RequestMap();\r\n    }\r\n    AuthWrapper.extractBucket_ = function (config) {\r\n        var bucketString = config[configOption] || null;\r\n        if (bucketString == null) {\r\n            return null;\r\n        }\r\n        var loc = Location.makeFromBucketSpec(bucketString);\r\n        return loc.bucket;\r\n    };\r\n    AuthWrapper.prototype.getAuthToken = function () {\r\n        // TODO(andysoto): remove ifDef checks after firebase-app implements stubs\r\n        // (b/28673818).\r\n        if (this.app_ !== null &&\r\n            isDef(this.app_.INTERNAL) &&\r\n            isDef(this.app_.INTERNAL.getToken)) {\r\n            return this.app_.INTERNAL.getToken().then(function (response) {\r\n                if (response !== null) {\r\n                    return response.accessToken;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }, function (_error) {\r\n                return null;\r\n            });\r\n        }\r\n        else {\r\n            return resolve(null);\r\n        }\r\n    };\r\n    AuthWrapper.prototype.bucket = function () {\r\n        if (this.deleted_) {\r\n            throw appDeleted();\r\n        }\r\n        else {\r\n            return this.bucket_;\r\n        }\r\n    };\r\n    /**\r\n     * The service associated with this auth wrapper. Untyped to avoid circular\r\n     * type dependencies.\r\n     */\r\n    AuthWrapper.prototype.service = function () {\r\n        return this.service_;\r\n    };\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this AuthWrapper\r\n     * at the given Location.\r\n     * @param loc The Location.\r\n     * @return Actually a firebaseStorage.Reference, typing not allowed\r\n     *     because of circular dependency problems.\r\n     */\r\n    AuthWrapper.prototype.makeStorageReference = function (loc) {\r\n        return this.storageRefMaker_(this, loc);\r\n    };\r\n    AuthWrapper.prototype.makeRequest = function (requestInfo, authToken) {\r\n        if (!this.deleted_) {\r\n            var request = this.requestMaker_(requestInfo, authToken, this.pool_);\r\n            this.requestMap_.addRequest(request);\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    };\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    AuthWrapper.prototype.deleteApp = function () {\r\n        this.deleted_ = true;\r\n        this.app_ = null;\r\n        this.requestMap_.clear();\r\n    };\r\n    AuthWrapper.prototype.maxUploadRetryTime = function () {\r\n        return this.maxUploadRetryTime_;\r\n    };\r\n    AuthWrapper.prototype.setMaxUploadRetryTime = function (time) {\r\n        this.maxUploadRetryTime_ = time;\r\n    };\r\n    AuthWrapper.prototype.maxOperationRetryTime = function () {\r\n        return this.maxOperationRetryTime_;\r\n    };\r\n    AuthWrapper.prototype.setMaxOperationRetryTime = function (time) {\r\n        this.maxOperationRetryTime_ = time;\r\n    };\r\n    return AuthWrapper;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\r\nfunction start(f, callback, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    var waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    var timeoutId = null;\r\n    var hitTimeout = false;\r\n    var cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    var triggeredCallback = false;\r\n    function triggerCallback() {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            callback.apply(null, arguments);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        timeoutId = setTimeout(function () {\r\n            timeoutId = null;\r\n            f(handler, canceled());\r\n        }, millis);\r\n    }\r\n    function handler(success) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (success) {\r\n            triggerCallback.apply(null, arguments);\r\n            return;\r\n        }\r\n        var mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            triggerCallback.apply(null, arguments);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        var waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    var stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (timeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(timeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    setTimeout(function () {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @struct\r\n * @template T\r\n */\r\nvar NetworkRequest = /** @class */ (function () {\r\n    function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\r\n        this.pendingXhr_ = null;\r\n        this.backoffId_ = null;\r\n        this.resolve_ = null;\r\n        this.reject_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.url_ = url;\r\n        this.method_ = method;\r\n        this.headers_ = headers;\r\n        this.body_ = body;\r\n        this.successCodes_ = successCodes.slice();\r\n        this.additionalRetryCodes_ = additionalRetryCodes.slice();\r\n        this.callback_ = callback;\r\n        this.errorCallback_ = errorCallback;\r\n        this.progressCallback_ = progressCallback;\r\n        this.timeout_ = timeout;\r\n        this.pool_ = pool;\r\n        var self = this;\r\n        this.promise_ = make(function (resolve$$1, reject$$1) {\r\n            self.resolve_ = resolve$$1;\r\n            self.reject_ = reject$$1;\r\n            self.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    NetworkRequest.prototype.start_ = function () {\r\n        var self = this;\r\n        function doTheRequest(backoffCallback, canceled$$1) {\r\n            if (canceled$$1) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            var xhr = self.pool_.createXhrIo();\r\n            self.pendingXhr_ = xhr;\r\n            function progressListener(progressEvent) {\r\n                var loaded = progressEvent.loaded;\r\n                var total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (self.progressCallback_ !== null) {\r\n                    self.progressCallback_(loaded, total);\r\n                }\r\n            }\r\n            if (self.progressCallback_ !== null) {\r\n                xhr.addUploadProgressListener(progressListener);\r\n            }\r\n            xhr\r\n                .send(self.url_, self.method_, self.body_, self.headers_)\r\n                .then(function (xhr) {\r\n                if (self.progressCallback_ !== null) {\r\n                    xhr.removeUploadProgressListener(progressListener);\r\n                }\r\n                self.pendingXhr_ = null;\r\n                xhr = xhr;\r\n                var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\r\n                var status = xhr.getStatus();\r\n                if (!hitServer || self.isRetryStatusCode_(status)) {\r\n                    var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                var successCode = contains$1(self.successCodes_, status);\r\n                backoffCallback(true, new RequestEndStatus(successCode, xhr));\r\n            });\r\n        }\r\n        /**\r\n         * @param requestWentThrough True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        function backoffDone(requestWentThrough, status) {\r\n            var resolve$$1 = self.resolve_;\r\n            var reject$$1 = self.reject_;\r\n            var xhr = status.xhr;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    var result = self.callback_(xhr, xhr.getResponseText());\r\n                    if (isJustDef(result)) {\r\n                        resolve$$1(result);\r\n                    }\r\n                    else {\r\n                        resolve$$1();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject$$1(e);\r\n                }\r\n            }\r\n            else {\r\n                if (xhr !== null) {\r\n                    var err = unknown();\r\n                    err.setServerResponseProp(xhr.getResponseText());\r\n                    if (self.errorCallback_) {\r\n                        reject$$1(self.errorCallback_(xhr, err));\r\n                    }\r\n                    else {\r\n                        reject$$1(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        var err = self.appDelete_\r\n                            ? appDeleted()\r\n                            : canceled();\r\n                        reject$$1(err);\r\n                    }\r\n                    else {\r\n                        var err = retryLimitExceeded();\r\n                        reject$$1(err);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    NetworkRequest.prototype.getPromise = function () {\r\n        return this.promise_;\r\n    };\r\n    /** @inheritDoc */\r\n    NetworkRequest.prototype.cancel = function (appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingXhr_ !== null) {\r\n            this.pendingXhr_.abort();\r\n        }\r\n    };\r\n    NetworkRequest.prototype.isRetryStatusCode_ = function (status) {\r\n        // The codes for which to retry came from this page:\r\n        // https://cloud.google.com/storage/docs/exponential-backoff\r\n        var isFiveHundredCode = status >= 500 && status < 600;\r\n        var extraRetryCodes = [\r\n            // Request Timeout: web server didn't receive full request in time.\r\n            408,\r\n            // Too Many Requests: you're getting rate-limited, basically.\r\n            429\r\n        ];\r\n        var isExtraRetryCode = contains$1(extraRetryCodes, status);\r\n        var isRequestSpecificRetryCode = contains$1(this.additionalRetryCodes_, status);\r\n        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\r\n    };\r\n    return NetworkRequest;\r\n}());\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled Defaults to false.\r\n * @struct\r\n */\r\nvar RequestEndStatus = /** @class */ (function () {\r\n    function RequestEndStatus(wasSuccessCode, xhr, opt_canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.xhr = xhr;\r\n        this.canceled = !!opt_canceled;\r\n    }\r\n    return RequestEndStatus;\r\n}());\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers) {\r\n    var number = typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\r\n    headers['X-Firebase-Storage-Version'] = 'webjs/' + number;\r\n}\r\n/**\r\n * @template T\r\n */\r\nfunction makeRequest(requestInfo, authToken, pool) {\r\n    var queryPart = makeQueryString(requestInfo.urlParams);\r\n    var url = requestInfo.url + queryPart;\r\n    var headers = clone(requestInfo.headers);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n *\r\n * @struct\r\n */\r\nvar Service = /** @class */ (function () {\r\n    function Service(app, pool, url) {\r\n        this.bucket_ = null;\r\n        function maker(authWrapper, loc) {\r\n            return new Reference(authWrapper, loc);\r\n        }\r\n        this.authWrapper_ = new AuthWrapper(app, maker, makeRequest, this, pool);\r\n        this.app_ = app;\r\n        if (url != null) {\r\n            this.bucket_ = Location.makeFromBucketSpec(url);\r\n        }\r\n        else {\r\n            var authWrapperBucket = this.authWrapper_.bucket();\r\n            if (authWrapperBucket != null) {\r\n                this.bucket_ = new Location(authWrapperBucket, '');\r\n            }\r\n        }\r\n        this.internals_ = new ServiceInternals(this);\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\r\n    Service.prototype.ref = function (path) {\r\n        function validator(path) {\r\n            if (/^[A-Za-z]+:\\/\\//.test(path)) {\r\n                throw 'Expected child path but got a URL, use refFromURL instead.';\r\n            }\r\n        }\r\n        validate('ref', [stringSpec(validator, true)], arguments);\r\n        if (this.bucket_ == null) {\r\n            throw new Error('No Storage Bucket defined in Firebase Options.');\r\n        }\r\n        var ref = new Reference(this.authWrapper_, this.bucket_);\r\n        if (path != null) {\r\n            return ref.child(path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    };\r\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\r\n    Service.prototype.refFromURL = function (url) {\r\n        function validator(p) {\r\n            if (!/^[A-Za-z]+:\\/\\//.test(p)) {\r\n                throw 'Expected full URL but got a child path, use ref instead.';\r\n            }\r\n            try {\r\n                Location.makeFromUrl(p);\r\n            }\r\n            catch (e) {\r\n                throw 'Expected valid full URL but got an invalid one.';\r\n            }\r\n        }\r\n        validate('refFromURL', [stringSpec(validator, false)], arguments);\r\n        return new Reference(this.authWrapper_, url);\r\n    };\r\n    Object.defineProperty(Service.prototype, \"maxUploadRetryTime\", {\r\n        get: function () {\r\n            return this.authWrapper_.maxUploadRetryTime();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Service.prototype.setMaxUploadRetryTime = function (time) {\r\n        validate('setMaxUploadRetryTime', [nonNegativeNumberSpec()], arguments);\r\n        this.authWrapper_.setMaxUploadRetryTime(time);\r\n    };\r\n    Object.defineProperty(Service.prototype, \"maxOperationRetryTime\", {\r\n        get: function () {\r\n            return this.authWrapper_.maxOperationRetryTime();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Service.prototype.setMaxOperationRetryTime = function (time) {\r\n        validate('setMaxOperationRetryTime', [nonNegativeNumberSpec()], arguments);\r\n        this.authWrapper_.setMaxOperationRetryTime(time);\r\n    };\r\n    Object.defineProperty(Service.prototype, \"app\", {\r\n        get: function () {\r\n            return this.app_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Service.prototype, \"INTERNAL\", {\r\n        get: function () {\r\n            return this.internals_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Service;\r\n}());\r\n/**\r\n * @struct\r\n */\r\nvar ServiceInternals = /** @class */ (function () {\r\n    function ServiceInternals(service) {\r\n        this.service_ = service;\r\n    }\r\n    /**\r\n     * Called when the associated app is deleted.\r\n     * @see {!fbs.AuthWrapper.prototype.deleteApp}\r\n     */\r\n    ServiceInternals.prototype.delete = function () {\r\n        this.service_.authWrapper_.deleteApp();\r\n        return resolve(undefined);\r\n    };\r\n    return ServiceInternals;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nvar STORAGE_TYPE = 'storage';\r\nfunction factory(app, unused, opt_url) {\r\n    return new Service(app, new XhrIoPool(), opt_url);\r\n}\r\nfunction registerStorage(instance) {\r\n    var namespaceExports = {\r\n        // no-inline\r\n        TaskState: TaskState,\r\n        TaskEvent: TaskEvent,\r\n        StringFormat: StringFormat,\r\n        Storage: Service,\r\n        Reference: Reference\r\n    };\r\n    instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined, \r\n    // Allow multiple storage instances per app.\r\n    true);\r\n}\r\nregisterStorage(firebase);\n\nexport { registerStorage };\n"],"sourceRoot":""}